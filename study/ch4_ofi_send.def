page: ofi_send.h, from templates/mpid/ch4/netmod/ofi/ofi_send.h

macros:
    ctx: comm->context_id+context_offset
    G: MPIDI_OFI_global.$1

fncode: MPIDI_OFI_send
    $call @Datatype_get_info
    $(set:is_lw=!syncflag && dt_contig && data_sz<=$(G:max_buffered_send))
    $if $(is_lw)
        $if noreq
            $fcall MPIDI_OFI_send_lightweight
        $else
            $fcall MPIDI_OFI_send_lightweight_request
    $else
        $fcall MPIDI_OFI_send_normal

fncode: MPIDI_OFI_send_lightweight
    $call init_sendtag
    $call OFI_send, lightweight

fncode: MPIDI_OFI_send_lightweight_request
    $call MPIDI_OFI_send_lightweight
    MPIDI_OFI_SEND_REQUEST_COMPLETE_LW_CONDITIONAL(*request)

subcode: OFI_send(type)
    $(set:ctx=MPIDI_OFI_global.ctx[0].tx)
    $(set:addr=MPIDI_OFI_av_to_phys(addr))
    $(set:flag=FALSE)

    $(if:type=lightweight)
        $(set:buf=buf, data_sz)
        $(set:do=NULL, MPIDI_OFI_DO_INJECT)
        $(set:flag=MPIDI_OFI_COMM(comm).eagain)
    $(elif:type=normal_small)
        $(set:buf=send_buf, data_sz))
        $(set:do=NULL, MPIDI_OFI_DO_INJECT)
    $(elif:type=normal_medium)
        $(set:buf=send_buf, data_sz))
        $(set:do=(void*)&(MPIDI_OFI_REQUEST(sreq, context)), MPIDI_OFI_DO_SEND)
    $(else) # huge, send max
        $(set:buf=send_buf, $(G:max_send))
        $(set:do=(void*)&(MPIDI_OFI_REQUEST(sreq, context)), MPIDI_OFI_DO_SEND)

    $fcall MPIDI_OFI_send_handler($(ctx), $(buf), NULL, comm->rank, $(addr), match_bits, $(do), MPIDI_OFI_CALL_LOCK, $(flag))

#---------------------------------------- 
fncode: MPIDI_OFI_send_normal
    MPIDI_OFI_REQUEST_CREATE_CONDITIONAL(sreq, MPIR_REQUEST_KIND__SEND)
    *request = sreq
    $call @init_sendtag
    ...
    $if syncflag == MPIDI_OFI_SYNC_SEND
        $call @ssend_ack
    send_buf = (char *)buf + dt_true_lb
    $if !dt_contig
        $if MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz<=$(G:max_send)
            $fcall MPIDI_OFI_send_iov
            # goto fn_exit if MPI_SUCCESS
        $call set_req, event_id, MPIDI_OFI_EVENT_SEND_PACK
        $call @pack
    $else
        $call set_req, noncontig.pack, NULL
        $call set_req, noncontig.nopack, NULL

    $if data_sz <= $(G:max_buffered_send)
        $call @OFI_send, normal_small
    $elif data_sz <= $(G:max_send)
        $call @OFI_send, normal_medium
    $else
        ...
        $call @OFI_send, max
        ...

    # ----------------
    subcode: set_req(k, v)
        MPIDI_OFI_REQUEST(sreq, $(k)) = $(v)
    # ----------------
    subcode: ssend_ack
        ackreq = MPL_malloc(sizeof(MPIDI_OFI_ssendack_request_t), MPL_MEM_OTHER)
        ackreq->event_id = MPIDI_OFI_EVENT_SSEND_ACK
        ackreq->signal_req = sreq
        $my int c = 1
        MPIR_cc_incr(sreq->cc_ptr, &c)
        $call @init_recvtag
        MPIDI_OFI_CALL_RETRY(fi_trecv($(arg)), trecvsync, MPIDI_OFI_CALL_LOCK, FALSE)
fncode: MPIDI_OFI_send_iov

#---------------------------------------- 
subcode: init_sendtag
    match_bits = MPIDI_OFI_init_sendtag($(ctx), comm->rank, tag, 0)

subcode: init_recvtag
    ssend_match = MPIDI_OFI_init_recvtag(&ssend_mask, $(ctx), rank, tag)
    ssend_match |= MPIDI_OFI_SYNC_SEND_ACK

#---------------------------------------- 
subcode: NM_send(has_req, is_sync, send)
    $(if:MPIDI_ENABLE_LEGACY_TAGGED)
        $if !MPIDI_OFI_ENABLE_TAGGED
            $fcall MPIDIG_mpi_$(send)($(send_args))
            goto fn_exit

    $(set:arg=arg_$(has_req)_$(is_sync))
    $fcall MPIDI_OFI_send($(send_args), $($(arg)))

    macros:
        # int noreq, uint64_t syncflag
        arg_00: (*request==NULL), 0ULL
        arg_01: 0, MPIDI_OFI_SYNC_SEND
        arg_10: 0, 0ULL
        arg_11: 0, MPIDI_OFI_SYNC_SEND

subcode: NM_send_init(send)
    $fcall MPIDIG_mpi_$(send)_init($(send_args))
