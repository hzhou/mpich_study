page: simple_pmi, from templates/pmi/simple/simple_pmi.c
    $list PMI_Init, PMI_Initialized, PMI_Get_size, PMI_Get_rank, PMI_Get_universe_size, PMI_Get_appnum

    $global static int PMI_fd = -1
    $global static int PMI_size = 1
    $global static int PMI_rank = 0

    $global static int PMI_debug = 0

subcode: pmi_env(name, default)
    $call get_env, PMI_$(name:uc), PMI_$(name:lc), $(default)

fncode: PMI_Initialized(int* p_is_initialized): int
    *p_is_initialized = (PMI_initialized!=PMI_UNINITIALIZED)
    return PMI_SUCCESS

fncode: PMI_Get_size(pn_size):int
    $if PMI_initialized
        *pn_size = PMI_size
    $else
        *pn_size = 1
    return PMI_SUCCESS

fncode: PMI_Get_rank(pn_rank):int
    $if PMI_initialized
        *pn_rank = PMI_rank
    $else
        *pn_rank = 0
    return PMI_SUCCESS

# ENV{PMI_FD}: pipe
# ENV{PMI_PORT}: socket
# -: singleton
fncode: PMI_Init(p_has_parent): int
    PMI_initialized = PMI_UNINITIALIZED;
    setbuf(stdout, NULL);
    # ---------------------
    $call pmi_env, debug, -
    # -- try direct fd (pipes)
    $call pmi_env, fd, -
    # -- try port (host:port)
    #ifdef USE_PMI_PORT
    $if PMI_fd<0
        &call check_env, PMI_PORT
            $if pmi_connect(p)!=PMI_SUCCESS
                return PMI_FAIL
    #endif
    # -- return singleton
    $if PMI_fd<0
        $call set_singleton
        return PMI_SUCCESS;
    # ---------------------
    $my int is_done = 0
    #ifdef USE_PMI_PORT
    &call check_env, PMI_ID
        $my int id = atoi(p)
        PMII_Set_from_port(PMI_fd, id)
        is_done = 1
    #endif

    $if !is_done
        $call pmi_env, size, 1
        $call pmi_env, rank, 0
        PMIU_Set_rank(PMI_rank);

    $call @PMI_TOTALVIEW_check
    PMII_getmaxes(&PMI_kvsname_max, &PMI_keylen_max, &PMI_vallen_max);

    $call pmi_env, spawned, 0
    *p_has_parent = PMI_spawned

    $if PMI_initialized == PMI_UNINITIALIZED
        PMI_initialized = NORMAL_INIT_WITH_PM;
    return PMI_SUCCESS;
    # ---------------------
    subcode: set_singleton
        PMI_size = 1;
        PMI_rank = 0;
        *p_has_parent = 0;

        PMI_initialized = SINGLETON_INIT_BUT_NO_PM;
        /* 256 is picked as the minimum allowed length by the PMI servers */
        PMI_kvsname_max = 256;
        PMI_keylen_max = 256;
        PMI_vallen_max = 256;

    subcode: PMI_TOTALVIEW_check
        #ifdef USE_PMI_PORT
        $call pmi_env, totalview, 0
        $if PMI_totalview
            $call expect, tv_ready
        #endif
        subcode: expect(cmd)
            $my char buf[PMIU_MAXLINE]
            $my char cmd[PMIU_MAXLINE]
            PMIU_readline(PMI_fd, buf, PMIU_MAXLINE);
            PMIU_parse_keyvals(buf);
            PMIU_getval("cmd", cmd, PMIU_MAXLINE);
            if strncmp(cmd, "tv_ready", PMIU_MAXLINE) != 0
                PMIU_printf(1, "expecting cmd=tv_ready, got %s\n", buf);
                return PMI_FAIL;

#-------------------------
fncode: pmi_connect(char* p)
    PMI_fd = -1;
    $call port_connect, PMI_fd
    return PMI_SUCCESS;

    subcode: port_connect(fd)
        $call @pmi_dbg_print, "Connecting to %s\n", p
        $my char hostname[MAXHOSTNAME + 1], n_port=0

        $call parse_hostname_port
        $(fd) = PMII_Connect_to_pm(hostname, n_port);
        $call @pmi_check_fail, $(fd)<0, "Unable to connect to %s on %d\n", hostname, n_port

        subcode: parse_hostname_port
            ts = p
            my i=0
            $while *ts && &ts!=':' && i<MAXHOSTNAME
                hostname[i++] = *ts++
            hostname[i]='\0'
            $call @pmi_check_fail, *ts!=':', "unable to decode hostport from %s\n", p
            n_port = atoi(ts+1)
            $call @validate_port

#-----------------------
subcode: pmi_check_fail(cond, @msg)
    $if $(cond)
        PMIU_printf(1, $(msg))
        return PMI_FAIL;

subcode: pmi_dbg_print(@msg)
    $if PMI_debug
        DBG_PRINTF(($(msg)));

