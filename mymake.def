include: macros_mymake/args.def
include: macros_mymake/custom_make.def
include: macros_mymake/subdirs.def
include: macros_mymake/mpich.def
include: macros_mymake/bindings.def
include: macros_mymake/hydra.def
include: macros_mymake/gforker.def
include: macros_mymake/testing.def

output_dir: ./mymake

page: mymake
    module: perl

    $call set_mymake

    $if -d "pm"
        system "perl $mymake\_hydra.pl @ARGV"
        exit(0)

    $call parse_args

    $if $opts{do}
        system "perl $mymake\_$opts{do}.pl"
        exit(0)
    $call setup_mymake
    $call set_mymake_DO

    $call save_last_ARGV
    $call @dump_args

    $if $opts{pm} eq "gforker"
        $call add_rule_gforker
    $else
        $call add_rule_hydra
    # $call add_rule_testing
    $call compile_mpich

    subcode: setup_mymake
        $if $srcdir ne "."
            chdir $srcdir or die "can't chdir $srcdir\n"
        $if !-d "mymake"
            mkdir "mymake" or die "can't mkdir mymake\n"
        $call pre_patch

        subcode: pre_patch
            my $cvars_c = "src/util/mpir_cvars.c"
            $if -f "src/util/cvar/Makefile.mk"
                $cvars_c = "src/util/cvar/mpir_cvars.c"
            # .lo.c, the missing c file will throw off gnumake
            #     mpir_cvars.c will gets regenerated due to the prerequisite of src/include/mpir_cvars.h
            $if !-f $cvars_c
                system "touch $cvars_c"


    subcode: set_mymake_DO
        $(for:stage,clean,errmsg,cvars,logs,hydra,test,mpi_h)
            push @extra_make_rules, "DO_$1 = perl $mymake\_$1.pl"
        push @extra_make_rules, ""
        push @extra_make_rules, ".PHONY: test cvars errmsg"
        $(for:test,cvars,errmsg)
            $call push_autogen_rule, $1, $1

    subcode: push_autogen_rule(name, file)
        push @extra_make_rules, "$(file):"
        push @extra_make_rules, "\t\x24(DO_$(name))"
        push @extra_make_rules, ""

    subcode: dump_args
        $(for:srcdir,moddir,prefix)
            $print $1: $$1
        $if $opts{device}
            $print device: $opts{device}

include: macros_mymake/errmsgs.def
page: mymake_errmsg
    module: perl

    $call parse_args
    $call defmsg_h

include: macros_mymake/cvars.def
page: mymake_cvars
    module: perl

    $call parse_args
    $call extractcvars

include: macros_mymake/logstates.def
page: mymake_logs
    module: perl

    $call parse_args
    $call logging_states

# ----------------
include: macros_mymake/mpi_h.def
page: mymake_mpi_h
    module: perl

    $call parse_args
    $call get_mpi_h

# ----------------
page: mymake_hydra
    module: perl

    $call set_mymake
    $if !-d "mymake"
        mkdir "mymake" or die "can't mkdir mymake\n"
    $(for:stage,clean)
        push @extra_make_rules, "DO_$1 = perl $mymake\_$1.pl"
    push @extra_make_rules, ""
    $call parse_args
    $call prepare_hydra

page: mymake_test
    module: perl

    $call parse_args
    $call prepare_testing
    $if $ENV{skip_test} eq "custom"
        $call run_tests_custom
    $else
        # $call run_tests

# ----------------
# print out a stage header
page: mymake_stage
    module: perl
    my $t = join(' ', @ARGV)
    $call stage, $t
    exit(0)

page: mymake_clean
    module: perl

    $call parse_args

    my @realclean_list
    $(for:a in $(mpich_configure_deps))
        push @realclean_list, "$(a)"
    $(for:a in $(subdir_list))
        $if -d "$(D$(a))"
            push @realclean_list, "$(H$(a))"
    push @realclean_list, "src/pm/hydra/mymake/Makefile.orig"
    push @realclean_list, "src/mpi/errhan/defmsg.h"
    push @realclean_list, "src/include/mpir_cvars.h"
    $foreach $t in @realclean_list
        system "rm -fv $t"

#---------------------------------------- 
#---- stages ---------------------------- 
subcode: stage(@name)
    $print ---------------------------\n
    $print -     $(name)
    $print ---------------------------\n

#---- proprocess utils ---------------- 
macros:
    mpi_src_dirs: mpi mpi_t nameserv util binding include mpid pmi

subcode: find_files(dir, name)
    &call open_r, find $(dir) -name '$(name)' |
        chomp
        push @files, $_

subcode: each_ch_file
    my @files
    $foreach $dir in qw($(mpi_src_dirs))
        $call find_files, src/$dir, *.[ch]
    $foreach $f in @files
        BLOCK

subcode: each_name_file(name)
    my @files
    $call find_files, ., $(name)
    $foreach $f in @files
        BLOCK

#---------------------------------------- 
subcode: hdr_guard(name)
    $print "#ifndef $(name:uc)_H_INCLUDED"
    $print "#define $(name:uc)_H_INCLUDED"
    $print
    BLOCK
    $print "#endif /* $(name:uc)_H_INCLUDED */"

subcode: do_cmd(@cmd)
    $(if:cmd~")
        my $cmd = $(cmd)
    $(else)
        my $cmd = "$(cmd)"
    $print $cmd
    system $cmd

