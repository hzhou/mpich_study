fncode: MPL_get_sockaddr_iface(const char * s_iface, p_addr)
    memset(p_addr, 0, sizeof(*p_addr))

    $(if:1)
        $call getifaddrs
    $(else)
        $call ifconf
    # ----------------
    subcode: getifaddrs
        # since glibc 2.3 (2002-10)
        $include <ifaddrs.h>
        $local struct ifaddrs * ifaddr
        ret = getifaddrs(&ifaddr)
        $if ret
            return ret

        $local struct ifaddrs * ifa
        $local int found = 0
        ifa = ifaddr
        $while ifa; ifa = ifa->ifa_next
            $if s_iface && ifa->ifa_name && strcmp(s_iface, ifa->ifa_name)!=0
                ifa = ifa->ifa_next
                continue
            $if ifa->ifa_addr && ifa->ifa_addr->sa_family == af_type
                found ++
                $call set_addr, ifa->ifa_addr
        freeifaddrs(ifaddr)
        $if !found
            return -1
        $else
            return 0

    subcode: set_addr(a)
        $if af_type==AF_INET
            memcpy(p_addr, $(a), sizeof($(SA4)))
        $elif af_type==AF_INET6
            memcpy(p_addr, $(a), sizeof($(SA6)))

        $if !is_localhost((struct sockaddr *)ifa->ifa_addr)
            break
    # ----------------
    subcode: ifconf
        $if af_type == AF_INET
            $include <net/if.h>, <netinet/in.h>, <sys/ioctl.h>, <sys/types.h>, <sys/socket.h>
            $my int fd
            fd = socket(AF_INET, SOCK_DGRAM,0)
            $if fd>0
                $my struct ifconf ifc
                $my struct ifreq ifr[10]
                ifc.ifc_len = sizeof(ifr);
                ifc.ifc_ifcu.ifcu_buf = (caddr_t)ifr;

                $if ioctl(fd, SIOCGIFCONF, &ifc)==0
                    $my n = ifc.ifc_len/sizeof(struct ifreq)
                    $for i=0:n
                        $if ioctl(sd, SIOCGIFADDR, &ifr[i]) == 0
                            $if ifr[i].if_addr.sa_family == af_type
                                $call set_addr, &ifr[i].if_addr

                close(fd)

fncode: is_localhost(struct sockaddr* p_addr): int
    # test for loopback address
    $local char* p
    $if p_addr->sa_family==AF_INET
        p = (void*)&(($(SA4) *)p_addr)->sin_addr
        # return strncmp(p, "\x7f\x00\x00",3)==0
        return strncmp(p, "\x7f\x00\x00\x01",4)==0
    $elif p_addr->sa_family==AF_INET6
        p = (void*)&(($(SA6) *)p_addr)->sin6_addr
        return strncmp(p, "$(x15:\0)\x01", 16)==0 || strncmp(p, "\xfe\x80$(x13:\0)\x01", 16)==0
    $else
        return 0
        
