include: macros/sockaddr_listen.def
include: macros/sockaddr_if.def
include: macros/sockaddr_debug.def

subcode: _autoload
    $include <assert.h>
    $include <sys/types.h>  # .._t types
    $include <sys/socket.h> # sockaddr, socket, bind, listen, connect, accept etc.
    $include <netdb.h>      # getaddrinfo etc.
    # The following seems to be required by freebsd etc.
    $include <netinet/in.h> # sockaddr_in etc.
    # $include <netinet/tcp.h # TCP_NODELAY
    # ---------------------------
    # handle cmdline option -ipv6 
    $global static int af_type = AF_INET
    $register_name(socket) int
    $register_name(port) unsigned short
    $register_name(p_port) unsigned short *
    $register_name(addr) struct sockaddr_storage
    $register_name(p_addr) struct sockaddr_storage *
    $register_name(p_addr4) struct sockaddr_in *
    $register_name(p_addr6) struct sockaddr_in6 *
    # --------
    $register_name(ret) int

macros: 
    SA4: struct sockaddr_in
    SA6: struct sockaddr_in6

fncode: MPL_socket: int
    return socket(af_type, SOCK_STREAM, IPPROTO_TCP)

fncode: MPL_connect(socket, p_addr, port): int
    $if af_type==AF_INET
        (($(SA4) *)p_addr)->sin_port = htons(port)
	return connect(socket, (const struct sockaddr *)p_addr, sizeof($(SA4)))
    $elif af_type==AF_INET6
        (($(SA6) *)p_addr)->sin6_port = htons(port)
        return connect(socket, (const struct sockaddr *)p_addr, sizeof($(SA6)))
    $else
        return -1
    
#----------------------------------------------- 
fncode: MPL_get_sockaddr(const char * s_hostname, p_addr)
    memset(p_addr, 0, sizeof(*p_addr))
    $(if:0)
        $call @get_ipv4
    $(else)
        $call @get_ipv6

    subcode: get_ipv4
        $local struct hostent * ht
        ht = gethostbyname(s_hostname);
        $if ht == NULL
            return 1

        $local p_addr4 = p_addr
        p_addr4->sin_family = AF_INET
        #ifdef HAVE_H_ADDR_LIST
        memcpy(&p_addr4->sin_addr, ht->h_addr_list[0], ht->h_length);
        #else
        memcpy(&p_addr4->sin_addr, ht->h_addr, ht->h_length);
        #endif
        return 0

    subcode: get_ipv6
        $local struct addrinfo ai_hint
        memset(&ai_hint, 0, sizeof(ai_hint))
        ai_hint.ai_family = af_type;
        ai_hint.ai_socktype = SOCK_STREAM;
        ai_hint.ai_protocol = IPPROTO_TCP;
        ai_hint.ai_flags = AI_ADDRCONFIG|AI_V4MAPPED
        $local struct addrinfo * ai_list
        ret = getaddrinfo(s_hostname, NULL, &ai_hint, &ai_list)
        $if ret
            return ret
        # assert af_type==ai_list->ai_family

        $(set:T=p_addr->ss_family)
        $(set:T=af_type)
        $if $(T)==AF_INET
	    memcpy(p_addr, ai_list->ai_addr, sizeof($(SA4)))
            # $call assert, p_addr->ss_family == af_type
        $elif $(T)==AF_INET6
	    memcpy(p_addr, ai_list->ai_addr, sizeof($(SA6)))
            # $call assert, p_addr->ss_family == af_type
        $else
            assert(0)

        freeaddrinfo(ai_list)
        return 0

fncode: MPL_get_sockaddr_direct(int type, p_addr)
    memset(p_addr, 0, sizeof(*p_addr))

    $define(MPL_SOCKADDR_ANY) 0
    $define(MPL_SOCKADDR_LOOPBACK) 1
    assert(type==MPL_SOCKADDR_ANY || type==MPL_SOCKADDR_LOOPBACK)

    $if af_type == AF_INET
        $my p_addr4 = ($(SA4) *) p_addr
        NEWLINE
        p_addr4->sin_family = AF_INET
        $if type==MPL_SOCKADDR_LOOPBACK
            $(set:lo=0x7f000001)
            p_addr4->sin_addr.s_addr = htonl($(lo))
        $else
            p_addr4->sin_addr.s_addr = htonl(INADDR_ANY)
        return 0
    $elif af_type == AF_INET6
        $my p_addr6 = ($(SA6) *) p_addr
        NEWLINE
        p_addr6->sin6_family = AF_INET6
        $if type==MPL_SOCKADDR_LOOPBACK
            p_addr6->sin6_addr = in6addr_loopback
        $else
            p_addr6->sin6_addr = in6addr_any
        return 0
    $else
        assert(0)

