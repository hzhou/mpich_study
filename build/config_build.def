subcode: on_enable_g
    $call convert_comma_list, enable_g
    $for option in $enable_g
        $switch "$option"
            $of debug|dbg
                enable_append_g=yes
            $of no|none
                NOOP
            $of handlealloc
                perform_handlealloc=yes
            $of handle
                perform_handle=yes
            $of meminit
                perform_meminit=yes
            $of memarena
                perform_memarena=yes
                perform_memtracing=yes
            $of mem
                perform_memtracing=yes
            $of mutex
                perform_dbgmutex=yes
            $of mutexnesting
                perform_mutexnesting=yes
            $of most|yes
                perform_memtracing=yes
                enable_append_g=yes
                perform_meminit=yes
                perform_dbgmutex=yes
                perform_mutexnesting=yes
                perform_handlealloc=yes
                perform_handle=yes
            $of all
                perform_memarena=yes
                perform_memtracing=yes
                enable_append_g=yes
                perform_meminit=yes
                perform_dbgmutex=yes
                perform_mutexnesting=yes
                perform_handlealloc=yes
                perform_handle=yes
            $of *
                AC_MSG_WARN([Unknown value $option for enable-g])

    if test "$enable_append_g" = "yes" ; then
        PAC_APPEND_FLAG([-g],[CFLAGS])
        PAC_APPEND_FLAG([-g],[CXXFLAGS])
        PAC_APPEND_FLAG([-g],[FFLAGS])
        PAC_APPEND_FLAG([-g],[FCFLAGS])
        PAC_APPEND_FLAG([-g],[WRAPPER_CFLAGS])
        PAC_APPEND_FLAG([-g],[WRAPPER_CXXFLAGS])
        PAC_APPEND_FLAG([-g],[WRAPPER_FFLAGS])
        PAC_APPEND_FLAG([-g],[WRAPPER_FCFLAGS])
    fi
    if test -n "$perform_meminit" ; then
        AC_DEFINE(MPICH_DEBUG_MEMINIT,1,[Define to enable preinitialization of memory used by structures and unions])
    fi
    if test "$perform_handlealloc" = yes ; then
        AC_DEFINE(MPICH_DEBUG_HANDLEALLOC,1,[Define to enable checking of handles still allocated at MPI_Finalize])
    fi
    AS_IF([test "X$perform_handle" = "Xyes"],
        [AC_DEFINE(MPICH_DEBUG_HANDLES,1,[Define to enable handle checking])])

    if test -n "$perform_memtracing" ; then
        enable_g_mem=yes
        AC_DEFINE(USE_MEMORY_TRACING,1,[Define to enable memory tracing])
        if test -n "$perform_memarena" ; then
            AC_DEFINE(MPICH_DEBUG_MEMARENA,1,[Define if each function exit should confirm memory arena correctness])
        fi
    fi

    if test -n "$perform_dbgmutex" ; then 
    AC_DEFINE(MPICH_DEBUG_MUTEX,1,[Define to enable mutex debugging])
    fi

subcode: on_enable_fast
    $call convert_comma_list
    $for option in $enable_fast
        $switch $option
            $of O*
                enable_fast_opts=$option
            $of ndebug
                enable_fast_ndebug=yes
            $of all|yes
                enable_fast_ndebug=yes
                enable_fast_opts=O2
            $of none|no
                enable_fast_ndebug=no
                enable_fast_opts=O0
            $of *
                AC_MSG_WARN([Unknown value $option for --enable-fast])
    $if -n "$enable_fast_opts" 
        # Allows O<n> where <n> can be [0-9] or ' '.
        opt_flags=`echo $enable_fast_opts | sed -e 's%\(O[0-9] \)%\1%g'`
        $if -n "$opt_flags" 
            MPI_DEFAULT_COPTS="-$enable_fast_opts"
            MPI_DEFAULT_CXXOPTS="-$enable_fast_opts"
            MPI_DEFAULT_FOPTS="-$enable_fast_opts"
            MPI_DEFAULT_FCOPTS="-$enable_fast_opts"
        $else
            AC_MSG_WARN([Unknown value $enable_fast_opts for --enable-fast])

    $if test "$enable_fast_ndebug" = "yes" 
        CFLAGS="$CFLAGS -DNDEBUG -DNVALGRIND"
        CXXFLAGS="$CXXFLAGS -DNDEBUG -DNVALGRIND"
        # MPICH does NOT assume any preprocessing support from the Fortran compiler,
        # so no Fortran files contain any preprocessing statements.
        # Don't set FFLAGS or FCFLAGS with any -D.

subcode: on_enable_error_checking
    # Change default into the specific value of the default
    $call arg_alias, enable_error_checking, yes, all
    # mpir_ext.h needs the variable HAVE_ERROR_CHECKING to have the value 0 or 1
    HAVE_ERROR_CHECKING=0
    $switch "$enable_error_checking"
        $of no
            # if error checking has been disabled, then automatically disable the error
            # checking tests in the test suite
            ac_configure_args="${ac_configure_args} --disable-checkerrors"
        $of all|runtime
            error_checking_kind=MPID_ERROR_LEVEL_$(upper:$enable_error_checking)
            AC_DEFINE_UNQUOTED(HAVE_ERROR_CHECKING,$error_checking_kind,[Define to enable error checking])
            HAVE_ERROR_CHECKING=1
        $of *
            AC_MSG_WARN([Unknown value $enable_error_checking for enable-error-checking])

subcode: on_enable_error_messages
    # permit @HAVE_ERROR_CHECKING@ substitution in mpir_ext.h
    $switch "$enable_error_messages"
        $of no|none
            error_message_kind="MPICH_ERROR_MSG__NONE"
        $of all|yes
            error_message_kind="MPICH_ERROR_MSG__ALL"
        $of generic
            error_message_kind="MPICH_ERROR_MSG__GENERIC"
        $of class
            error_message_kind="MPICH_ERROR_MSG__CLASS"
        $of *
            AC_MSG_WARN([Unknown value $enable_error_messages for enable-error-messages])

    AC_DEFINE_UNQUOTED(MPICH_ERROR_MSG_LEVEL,$error_message_kind,[define to enable error messages])

subcode: on_enable_tag_error_bits
    $if "$enable_tag_error_bits" = "yes" 
        AC_DEFINE([HAVE_TAG_ERROR_BITS],[1],[Define to enable tag error bits])

# Support for MPI_T performance variables
subcode: on_enable_mpit_pvars
    $call convert_comma_list, enable_mpit_pvars
    $for a in $enable_mpit_pvars
        $switch "$a"
            $(for:nem,recvq,rma,dims)
                $of $1
                    enable_pvar_$1=yes
            $of all|yes
                $(for:nem,recvq,rma,dims)
                    enable_pvar_$1=yes
            $of no|none
                AC_MSG_WARN([Unknown value ($option) for enable-mpit-pvars])

    if test -n "$enable_pvar_nem" ; then
        status_nem_pvars=1
    else
        status_nem_pvars=0
    fi
    AC_DEFINE_UNQUOTED(ENABLE_PVAR_NEM,$status_nem_pvars,
            [Define to 1 to enable nemesis-related MPI_T performance variables])

    if test -n "$enable_pvar_recvq" ; then
        status_recvq_pvars=1
    else
        status_recvq_pvars=0
    fi
    AC_DEFINE_UNQUOTED(ENABLE_PVAR_RECVQ,$status_recvq_pvars,
            [Define to 1 to enable message receive queue-related MPI_T performance variables])

    if test -n "$enable_pvar_rma" ; then
        status_rma_pvars=1
    else
        status_rma_pvars=0
    fi
    AC_DEFINE_UNQUOTED(ENABLE_PVAR_RMA,$status_rma_pvars,
            [Define to 1 to enable rma-related MPI_T performance variables])

    if test -n "$enable_pvar_dims" ; then
        status_dims_pvars=1
    else
        status_dims_pvars=0
    fi
    AC_DEFINE_UNQUOTED(ENABLE_PVAR_DIMS,$status_dims_pvars,
            [Define to 1 to enable getdims-related MPI_T performance variables])
