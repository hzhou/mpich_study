subcode: prereq_src_pm_remshell
    NOOP

subcode: subcfg_src_pm_remshell
    $call subcfg_pm, remshell

subcode: prereq_src_pm_gforker
    NOOP

subcode: subcfg_src_pm_gforker
    $call subcfg_pm, gforker

#--------------------------- 
subcode: subconfig_remshell
    $call subconfig_pm_simple, remshell

subcode: subconfig_gforker
    $call subconfig_pm_simple, gforker

#--------------------------- 
subcode: subconfig_pm_simple(which)
    $if -z $PM_REQUIRES_PMI
        PM_REQUIRES_PMI=simple
    $elif $PM_REQUIRES_PMI!=simple
        AC_MSG_ERROR([$(which) requires the simple PMI; $PM_REQUIRES_PMI has already been selected])
    build_pm_util=yes

    # AC_SEARCH_LIBS(gethostbyname,nsl)
    AC_SEARCH_LIBS([socketpair],[socket])
    AC_CHECK_HEADERS([sys/types.h signal.h sys/ptrace.h])
    AC_CHECK_FUNCS([strsignal])
    # Check for signal handlers
    AC_CHECK_FUNCS([sigaction signal sigset])
    sigaction_ok=no
    if test "$ac_cv_func_sigaction" = "yes" ; then
        AC_CACHE_CHECK([for struct sigaction],pac_cv_struct_sigaction,[
        AC_TRY_COMPILE([#include <signal.h>],[
    struct sigaction act; sigaddset( &act.sa_mask, SIGINT );],
        pac_cv_struct_sigaction="yes",pac_cv_struct_sigaction="no")])
        if test "$pac_cv_struct_sigaction" = "no" ; then
            AC_CACHE_CHECK([for struct sigaction with _POSIX_SOURCE],
            pac_cv_struct_sigaction_needs_posix,[
            AC_TRY_COMPILE([#define _POSIX_SOURCE
    #include <signal.h>],[
    struct sigaction act; sigaddset( &act.sa_mask, SIGINT );],
        pac_cv_struct_sigaction_needs_posix="yes",
        pac_cv_struct_sigaction_needs_posix="no")])
            if test "$pac_cv_struct_sigaction_needs_posix" = "yes" ; then
                sigaction_ok=yes
            fi
        else
            sigaction_ok=yes
        fi
    fi
    dnl
    # Decide on the signal handler to use
    if test "$ac_cv_func_sigaction" = "yes" -a "$sigaction_ok" = "yes" ; then
        # FIXME DJG: where should this get set?
        if test "$pac_struct_sigaction_needs_posix" = yes ; then
            AC_DEFINE(NEEDS_POSIX_FOR_SIGACTION,1,[Define if _POSIX_SOURCE needed to get sigaction])
        fi
        AC_DEFINE(USE_SIGACTION,1,[Define if sigaction should be used to set signals])
    elif test "$ac_cv_func_signal" = "yes" ; then
        AC_DEFINE(USE_SIGNAL,1,[Define if signal should be used to set signals])
    fi
    dnl
    if test "$enable_allowport" = "yes" ; then
    AC_DEFINE(MPIEXEC_ALLOW_PORT,1,[Define if a port may be used to communicate with the processes])
    fi

    # some of these may be redundant with the upper level code, although the caching
    # should detect it and make the performance impact a non-issue
    AC_CHECK_HEADERS([string.h sys/time.h unistd.h stdlib.h sys/socket.h wait.h errno.h])

    $(if:which=remshell)
        AC_CHECK_FUNCS([ptrace])
        # It isn't enough to find ptrace.  We also need the ptrace 
        # parameters, which some systems, such as IRIX, do not define.
        if test "$ac_cv_func_ptrace" = yes ; then
            AC_CACHE_CHECK([for ptrace named parameters],
        [pac_cv_has_ptrace_parms],[
            AC_TRY_COMPILE([
        #include <sys/types.h>
        #include <sys/ptrace.h>],[int i = PTRACE_CONT;],[pac_cv_has_ptrace_parms=yes],
        [pac_cv_has_ptrace_parms=no])])
            if test "$pac_cv_has_ptrace_parms" = "yes" ; then
                AC_DEFINE([HAVE_PTRACE_CONT],[],[Define if ptrace parameters available])
            fi
        fi

        dnl The test for getsid etc is in src/pm/util (see the subconfigure.m4 there)
        dnl AC_CHECK_FUNCS([setsid isatty getsid])
        if test "$enable_newsession" = "yes" ; then
            AC_DEFINE([USE_NEW_SESSION],[1],[Define if mpiexec should create a new process group session])
        fi

        AC_PATH_PROG([SSH],[ssh])
        AC_PATH_PROG([RSH],[rsh])
        $if -z "$SSH" && -n "$RSH" 
            remshell="$RSH"
        $else
            remshell="$SSH"

        AC_DEFINE_UNQUOTED(DEFAULT_MACHINES_PATH,"$eval_datadir:.",[Define the search path for machines files])
        AC_DEFINE_UNQUOTED(DEFAULT_REMOTE_SHELL,"$remshell",[Define the default remote shell program to use])

#-------------------------- 
subcode: subcfg_pm(which)
    build_$(which)=no
    $for pm_name in $pm_names
        $if $pm_name = $(which)
            build_$(which)=yes
    $(eval:PM_NAME=uc("pm_$(which)"))
    AM_CONDITIONAL([BUILD_$(PM_NAME)], [test x$build_$(which) = xyes])
    AM_CONDITIONAL([PRIMARY_$(PM_NAME)], [test x$first_pm_name = x$(which)])

    &call subsys_am_cond_if, $(PM_NAME)
        $call subconfig_$(which)


