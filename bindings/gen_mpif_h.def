include: macros/load.def
page: gen_mpif_h
    module: perl

    # $call load_types, BASE_C
    # $call load_types, SMALL_C
    # $call load_types, SMALL_F90
    $call load_types, F77_C
    $call load_funcs
    $call dump_func, MPI_Send
    my $t = f_get_arg_types("MPI_Send")
    $print "    : $t"

    # $call output_f_c, MPI_Send

subcode: output_f_c(MPI_Func)
    my $Func = $(MPI_Func)
    my $func = lc($Func)
    my $FUNC = uc($Func)
    my $func_ = lc($Func)."_"
    my $func__ = lc($Func)."__"
    my $PFUNC = "P$FUNC"
    my $arg_types = get_arg_types($Func)
    &call open_W, out/sendf.c
        $call copyright
        $print "#include \"mpi_fortimpl.h\"\n\n"

#---------------------------------------- 
subcode: copyright
    $print "\x2f* -*- Mode: C; c-basic-offset:4 ; -*- */"
    $print "\x2f*  "
    $print " *  (C) 2001 by Argonne National Laboratory."
    $print " *      See COPYRIGHT in top-level directory."
    $print " *"
    $print " * This file is automatically generated by buildiface "
    $print " * DO NOT EDIT"
    $print " */"
    $print "#include \"mpi_fortimpl.\h"

subcode: profiling_block
    $print "\x2f* Begin MPI profiling block */"
    &call if_def_USE_WEAK_SYMBOLS
        $print "#if defined(HAVE_MULTIPLE_PRAGMA_WEAK)"
        $call multiple_pragma_weak
        $print "#elif defined(HAVE_PRAGMA_WEAK)"
        $call just_pragma_weak
        $print "#elif defined(HAVE_PRAGMA_HP_SEC_DEF)"
        $call hp_sec_def
        $print "#elif defined(HAVE_PRAGMA_CRI_DUP)"
        $call cri_dup
        $print "#elif defined(HAVE_WEAK_ATTRIBUTE)"
        $call weak_attribute
        $print "#endif"

    subcode: if_def_USE_WEAK_SYMBOLS
        $print "#if defined(USE_WEAK_SYMBOLS) && !defined(USE_ONLY_MPI_NAMES) "
        BLOCK
        $print "#endif"

    subcode: multiple_pragma_weak
        $(for:FUNC, func__, func, func_)
            $print "extern FORT_DLL_SPEC void FORT_CALL $1( $arg_types, MPI_Fint * );"
        $print
        $(for:a,b,c in if,elif,elif,else and UPPER, LOWER_2USCORE, LOWER_USCORE, LOWER and P$FUNC, p$func__, p$func_, p$func)
            $(if:a=else)
                $print "#$(a)"
            $(else)
                $print "#$(a) defined(F77_NAME_$(b))"
            $(for:FUNC,func__,func_,func)
                $print "#pragma weak $1 = $(c)
        $print "#endif"
        $print
    subcode: just_pragma_weak


       print $OUTFD "\
#elif defined(HAVE_PRAGMA_WEAK)\

#if defined(F77_NAME_UPPER)\n";
        &print_weak_decl( $OUTFD, "${ucprefix}$ucname", $args, $lcname );
        print $OUTFD "\
#pragma weak ${ucprefix}$ucname = P${ucprefix}$ucname\
#elif defined(F77_NAME_LOWER_2USCORE)\n";
        &print_weak_decl( $OUTFD, "${lcprefix}${lcname}__", $args, $lcname );
	print $OUTFD "\
#pragma weak ${lcprefix}${lcname}__ = p${lcprefix}${lcname}__\
#elif !defined(F77_NAME_LOWER_USCORE)\n";
        &print_weak_decl( $OUTFD, "${lcprefix}$lcname", $args, $lcname );
	print $OUTFD "\
#pragma weak ${lcprefix}$lcname = p${lcprefix}$lcname\
#else\n";
        &print_weak_decl( $OUTFD, "${lcprefix}${lcname}_", $args, $lcname );
	print $OUTFD "\
#pragma weak ${lcprefix}${lcname}_ = p${lcprefix}${lcname}_\
#endif\
\
#elif defined(HAVE_PRAGMA_HP_SEC_DEF)\
#if defined(F77_NAME_UPPER)\
#pragma _HP_SECONDARY_DEF P${ucprefix}$ucname  ${ucprefix}$ucname\
#elif defined(F77_NAME_LOWER_2USCORE)\
#pragma _HP_SECONDARY_DEF p${lcprefix}${lcname}__  ${lcprefix}${lcname}__\
#elif !defined(F77_NAME_LOWER_USCORE)\
#pragma _HP_SECONDARY_DEF p${lcprefix}$lcname  ${lcprefix}$lcname\
#else\
#pragma _HP_SECONDARY_DEF p${lcprefix}${lcname}_  ${lcprefix}${lcname}_\
#endif\
\
#elif defined(HAVE_PRAGMA_CRI_DUP)\
#if defined(F77_NAME_UPPER)\
#pragma _CRI duplicate ${ucprefix}$ucname as P${ucprefix}$ucname\
#elif defined(F77_NAME_LOWER_2USCORE)\
#pragma _CRI duplicate ${lcprefix}${lcname}__ as p${lcprefix}${lcname}__\
#elif !defined(F77_NAME_LOWER_USCORE)\
#pragma _CRI duplicate ${lcprefix}${lcname} as p${lcprefix}${lcname}\
#else\
#pragma _CRI duplicate ${lcprefix}${lcname}_ as p${lcprefix}${lcname}_\
#endif\
\
#elif defined(HAVE_WEAK_ATTRIBUTE)
#if defined(F77_NAME_UPPER)\n";
    &print_weak_decl( $OUTFD, "${ucprefix}$ucname", $args, $lcname, "P${ucprefix}${ucname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}__", $args, $lcname, "P${ucprefix}${ucname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}_", $args, $lcname, "P${ucprefix}${ucname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}", $args, $lcname, "P${ucprefix}${ucname}" );
    print $OUTFD "
#elif defined(F77_NAME_LOWER_2USCORE)\n";
    &print_weak_decl( $OUTFD, "${ucprefix}$ucname", $args, $lcname, "p${lcprefix}${lcname}__" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}__", $args, $lcname, "p${lcprefix}${lcname}__" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}_", $args, $lcname, "p${lcprefix}${lcname}__" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}", $args, $lcname, "p${lcprefix}${lcname}__" );
    print $OUTFD "
#elif defined(F77_NAME_LOWER_USCORE)\n";
    &print_weak_decl( $OUTFD, "${ucprefix}$ucname", $args, $lcname, "p${lcprefix}${lcname}_" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}__", $args, $lcname, "p${lcprefix}${lcname}_" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}_", $args, $lcname, "p${lcprefix}${lcname}_" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}", $args, $lcname, "p${lcprefix}${lcname}_" );
    print $OUTFD "
#else\n";
    &print_weak_decl( $OUTFD, "${ucprefix}$ucname", $args, $lcname, "p${lcprefix}${lcname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}__", $args, $lcname, "p${lcprefix}${lcname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}_", $args, $lcname, "p${lcprefix}${lcname}" );
    &print_weak_decl( $OUTFD, "${lcprefix}${lcname}", $args, $lcname, "p${lcprefix}${lcname}" );
    print $OUTFD "
#endif
#endif /* HAVE_PRAGMA_WEAK */\
#endif /* USE_WEAK_SYMBOLS */\
/* End MPI profiling block */\n\n";

    &AddFwrapWeakName( $out_prefix, $lcname, $ucname, $args );
    }
