include: macros/ac_utils.def
page: aclocal_cc.m4
    module: sh
    $call PAC_PROG_CC
    $call PAC_C_CHECK_COMPILER_OPTION
    $call PAC_C_OPTIMIZATION
    $call PAC_PROG_C_UNALIGNED_DOUBLES
    $call PAC_PROG_C_WEAK_SYMBOLS
    $call PAC_PROG_CC_WORKS # return code
    $call PAC_PROG_C_MULTIPLE_WEAK_SYMBOLS
    $call PAC_CC_STRICT
    $call PAC_ARG_STRICT
    $call PAC_C_MAX_INTEGER_ALIGN
    $call PAC_C_MAX_FP_ALIGN
    $call PAC_C_MAX_DOUBLE_FP_ALIGN
    $call PAC_C_MAX_LONGDOUBLE_FP_ALIGN
    $call PAC_C_DOUBLE_ALIGNMENT_EXCEPTION
    $call PAC_C_DOUBLE_POS_ALIGN
    $call PAC_C_LLINT_POS_ALIGN
    $call PAC_FUNC_NEEDS_DECL
    $call PAC_C_GNU_ATTRIBUTE
    $call PAC_PROG_INSTALL_BREAKS_LIBS
    $call PAC_CC_FUNCTION_NAME_SYMBOL
    $call PAC_STRUCT_ALIGNMENT
    $call PAC_C_MACRO_VA_ARGS
    $call PAC_C_BUILTIN_EXPECT
    $call PAC_C_STATIC_ASSERT # add

#---------------------------------------- 
subcode: PAC_C_STATIC_ASSERT
    &call pac_check_define, PAC_C_STATIC_ASSERT, HAVE_C11__STATIC_ASSERT, C11 _Stattic_assert
        &call ac_link_source
            int main(){
                _Static_assert(1, "The impossible happened!");
                return 0;
            }


#---------------------------------------- 
subcode: Fn_PAC_PROG_CC
    AC_BEFORE([$0],[AC_PROG_CC])
    &call pac_push, CFLAGS
        # AC_PROG_CC sets CFLAGS unless it is preset (even empty)
        # therefore, pac_push not (really) necessary
        AC_PROG_CC([icc pgcc xlc xlC pathcc gcc clang cc])

subcode: Fn_PAC_C_CHECK_COMPILER_OPTION
    AC_MSG_CHECKING([whether C compiler accepts option $1])
    pac_opt="$1"
    AC_LANG_PUSH([C])
    CFLAGS_orig="$CFLAGS"
    CFLAGS_opt="$pac_opt $CFLAGS"
    pac_result="unknown"
    $call test_hello_world
    if test "$pac_result" = "yes" \
        -a "$pac_c_check_compiler_option_prototest" != "no" ; then
        # gcc 4.2.2 walk-around
        $call test_option_further
    fi
    #
    if test "$pac_result" = "yes" ; then
        AC_MSG_CHECKING([whether routines compiled with $pac_opt can be linked with ones compiled without $pac_opt])
        pac_result=unknown
        $call test_option_link
    fi
    rm -f pac_test1.log pac_test2.log

    dnl Restore CFLAGS before 2nd/3rd argument commands are executed,
    dnl as 2nd/3rd argument command could be modifying CFLAGS.
    CFLAGS="$CFLAGS_orig"
    if test "$pac_result" = "yes" ; then
        ifelse([$2],[],[COPTIONS="$COPTIONS $1"],[$2])
    else
        ifelse([$3],[],[:],[$3])
    fi
    AC_LANG_POP([C])
    # -----------------------
    subcode: test_hello_world
        AC_LANG_CONFTEST([
                AC_LANG_PROGRAM([[#include <stdio.h>
                                const char hw[] = "Hello, World\n";]],
                        [[fputs (hw, stdout);]])
        ])
        CFLAGS="$CFLAGS_orig"
        rm -f pac_test1.log
        # compile and link conftest.c > pac_test1.log
        PAC_LINK_IFELSE_LOG([pac_test1.log], [], [
            CFLAGS="$CFLAGS_opt"
            rm -f pac_test2.log
            PAC_LINK_IFELSE_LOG([pac_test2.log], [], [
                PAC_RUNLOG_IFELSE([diff -b pac_test1.log pac_test2.log],
                                [pac_result=yes],[pac_result=no])
            ],[
                pac_result=no
            ])
        ], [
            pac_result=no
        ])
        AC_MSG_RESULT([$pac_result])
        rm -f conftest.$ac_ext

    subcode: test_option_further
        # gcc 4.2.4 on 32-bit does not complain about the -Wno-type-limits option 
        # even though it doesn't support it. It will give error triggered by a warning.
        AC_MSG_CHECKING([whether C compiler option $1 works with an invalid prototype program])
        AC_LINK_IFELSE([
            # we want the prog to run but with a warning (unused/uninitialized variable)
            AC_LANG_SOURCE([int main(int argc, char **argv){ int foo, bar = 0; foo += 1; return foo; }])
        ],[pac_result=yes],[pac_result=no])
        AC_MSG_RESULT([$pac_result])

    subcode: test_option_link
        CFLAGS="$CFLAGS_orig"
        rm -f pac_test3.log
        PAC_COMPILE_IFELSE_LOG([pac_test3.log], [
            AC_LANG_SOURCE([
                int foo(void);
                int foo(void){return 0;}
            ])
        ],[
            PAC_RUNLOG([mv conftest.$OBJEXT pac_conftest.$OBJEXT])
            saved_LIBS="$LIBS"
            LIBS="pac_conftest.$OBJEXT $LIBS"

            rm -f pac_test4.log
            PAC_LINK_IFELSE_LOG([pac_test4.log], [AC_LANG_PROGRAM()], [
                CFLAGS="$CFLAGS_opt"
                rm -f pac_test5.log
                PAC_LINK_IFELSE_LOG([pac_test5.log], [AC_LANG_PROGRAM()], [
                    PAC_RUNLOG_IFELSE([diff -b pac_test4.log pac_test5.log],
                                    [pac_result=yes], [pac_result=no])
                ],[
                    pac_result=no
                ])
            ],[
                pac_result=no
            ])
            LIBS="$saved_LIBS"
            rm -f pac_conftest.$OBJEXT
        ],[
            pac_result=no
        ])
        AC_MSG_RESULT([$pac_result])
        rm -f pac_test3.log pac_test4.log pac_test5.log

subcode: Fn_PAC_C_OPTIMIZATION
    $for copt in "-O4 -Ofast" "-Ofast" "-fast" "-O3" "-xO3" "-O"
        PAC_C_CHECK_COMPILER_OPTION($copt,found_opt=yes,found_opt=no)
        $if "$found_opt" = "yes"
	    ifelse($1,,COPTIONS="$COPTIONS $copt",$1)
	    break
    $if "$ac_cv_prog_gcc" = "yes"
	$for copt in "-fomit-frame-pointer" "-finline-functions" "-funroll-loops"
	    PAC_C_CHECK_COMPILER_OPTION($copt,found_opt=yes,found_opt=no)
	    $if "$found_opt" = "yes"
	        ifelse($1,,COPTIONS="$COPTIONS $copt",$1)
	        # no break because we're trying to add them all
	# We could also look for architecture-specific gcc options

