# -- utils
include: macros/args.def
# -- core components
include: macros/comm.def
include: macros/async.def
include: macros/thread.def
# -- optional features
include: macros/threaded.def
# include: macros/windows.def
# include: macros/error_checking.def
# include: macros/coverage.def
# include: macros/memory_tracing.def
include: macros/hwloc.def
include: macros/argobots.def
# include: macros/dbg_logging.def
# include: macros/f08_binding.def
# include: macros/fortran_binding.def
# include: macros/cxx_binding.def
include: macros/mpi_api.def

subcode: _autoload
    $register_prefix(has) int

subcode: mpich_pre
    $local int mpi_errno = MPI_SUCCESS

    # Thread_Lock

    $(if:LOG_$(FunctionName))
        $(set:state=MPID_STATE_$(FunctionName:uc))
        $(set:L=$(LOG_$(FunctionName)))
        $(if:L~TERSE)
            $(set:F=MPIR_FUNC_TERSE)
        $(else)
            $(set:F=MPIR_FUNC_VERBOSE)
        $(if:FunctionName~MPI_Init)
            $(F)_INIT_STATE_DECL($(state))
        $(elif:FunctionName~MPI_Finalize)
            $(F)_FINALIZE_STATE_DECL($(state))
        $(else)
            $(F)_STATE_DECL($(state))
        $(if:L~PT2PT)
            $(if:L~FRONT)
                $(set:F.=_PT2PT_$1_FRONT)
            $(elif:L~BACK)
                $(set:F.=_PT2PT_$1_BACK)
            $(else)
                $(set:F.=_PT2PT_$1)
        $(else)
            $(set:F.=_$1)
        $(mexport:F, state)
        $(F:ENTER)($(state))

    $(if:FunctionName~MPI_)
        $call @error_check_$(FunctionName)

subcode: mpich_post
    fn_exit:
        $(if:LOG_$(FunctionName))
            $(F:EXIT)($(state))
        return mpi_errno
    fn_fail:
        $(if:hascode:on_fail_$(FunctionName))
            $call on_fail_$(FunctionName)
        $(else)
            $call @on_fail
        goto fn_exit

perlcode: _FUNC_HOOK
    my $open = $func->{openblock}
    my $name = $func->{name}

    $if $name =~ /^MPI[A-Z]*_/
        $call @decl_FUNCNAME
        $call @add_man_docs

    $if $name =~/^MPI_/
        my @t
        $call @MPI_weak_symbols
        $func->{declare_block}=\@t

    # -------------------------------
    subcode: decl_FUNCNAME
        unshift @$open, "#undef FUNCNAME", "#define FUNCNAME $name", "#undef FCNAME", "#define FCNAME MPL_QUOTE(FUNCNAME)"

    subcode: add_man_docs
        $if -f "docs/$name.txt" # these are direct manpages from man/man3/
            $print "      found docs/$name.txt"
            unshift @$open, "INCLUDE_FILE docs/$name.txt"
    subcode: MPI_weak_symbols
        push @t, "/* -- Begin Profiling Symbol Block for routine $name */"
        push @t, "#if defined(HAVE_PRAGMA_WEAK)\n"
        push @t, "#pragma weak $name = P$name\n"
        push @t, "#elif defined(HAVE_PRAGMA_HP_SEC_DEF)\n"
        push @t, "#pragma _HP_SECONDARY_DEF P$name  $name\n"
        push @t, "#elif defined(HAVE_PRAGMA_CRI_DUP)\n"
        push @t, "#pragma _CRI duplicate $name as P$name\n"
        push @t, "#elif defined(HAVE_WEAK_ATTRIBUTE)\n"
        push @t, "$func->{declare} __attribute__ ((weak, alias(\"P$name\")));\n"
        push @t, "#endif\n"
        push @t, "/* -- End Profiling Symbol Block */\n"
        push @t, "\n"
        push @t, "/* Define MPICH_MPI_FROM_PMPI if weak symbols are not supported to build the MPI routines */\n"
        push @t, "#ifndef MPICH_MPI_FROM_PMPI\n"
        push @t, "#undef $name\n"
        push @t, "#define $name P$name\n"
        
#----------------------------------------------- 
subcode: ifdef(feat)
    <-|#ifdef $(feat)
    BLOCK
    <-|#endif

subcode: set_state(state)
    OPA_store_int(&MPIR_Process.mpich_state, MPICH_MPI_STATE__$(state));

subcode: check_state(eq, state)
    $if OPA_load_int(&MPIR_Process.mpich_state) $(eq) MPICH_MPI_STATE__$(state)
        BLOCK

subcode: get_comm_ptr
    $local MPIR_Comm *comm_ptr = NULL
    $call @error_check_comm
    MPIR_Comm_get_ptr(comm, comm_ptr);
    $call @error_check_comm_ptr

#---- mpi_errno & fn_fail ----
subcode: check_fail
    $if mpi_errno != MPI_SUCCESS
        goto fn_fail;

subcode: _autoload
    $plugin fcall, fcall_fail

subcode: fcall(@F)
    mpi_errno = $(F);
    $if mpi_errno
        MPIR_ERR_POP(mpi_errno)

subcode: fcall_fail(@F)
    mpi_errno = $(F);
    $if mpi_errno
        goto fn_fail;

subcode: set_error(@msg)
    #ifdef HAVE_ERROR_REPORTING
    {
        mpi_errno = MPIR_Err_create_code(mpi_errno, MPIR_ERR_RECOVERABLE, FCNAME, __LINE__, MPI_ERR_OTHER, $(msg));
    }
    #endif
    mpi_errno = MPIR_Err_return_comm(0, FCNAME, mpi_errno);

