page: gen_coll_tests
    module: perl

    my $srcdir = "."
    my $mpich_dir = "../.."

    $call @parse_cmdline

    $global @test_list
    $call collect_cvar_tests

    &call open_W, coll/testlist.cvar
        $foreach $l in @test_list
            $print $l

subcode: collect_cvar_tests
    $foreach $c in @coll_list
        $foreach $coll in $c, "i$c"
            my ($cvar, $enums)
            &call open_r, $mpich_dir/src/mpi/coll/$coll/$coll.c
                my $COLL = uc($coll)
                $if /-\s+name\s*:\s*(MPIR_CVAR_$COLL\_(INTRA|INTER)_ALGORITHM)/
                    $cvar = $1
                $elif $cvar && /^\s*description\s*:/ 
                    $enums = []
                $elif /^\s*$/
                    $if $cvar && $enums && @$enums
                        add_tests($cvar, $enums)
                    undef $enums
                    undef $cvar
                $elif $enums  && /^\s*(\w+)\s*-/ -> $v
                    $if $v=~/^gentran_/
                        push @$enums, $v

fncode: add_tests($cvar, $enums)
    my ($tests, $coll, $intra)
    my @env_a
    $if $cvar=~/MPIR_CVAR_(\w+)_(INTRA|INTER)/
        ($coll, $intra)=($1, $2)
        push @env_a, "env=MPIR_CVAR_$coll\_DEVICE_COLLECTIVE=0"
        $if $coll=~/^I(\w+)/
            $coll = $1
            push @env_a, "env=MPIR_CVAR_$coll\_DEVICE_COLLECTIVE=0"
            push @env_a, "env=MPIR_CVAR_$coll\_$intra\_ALGORITHM=nb"
        $if $intra eq "INTRA"
            $tests = $coll_intra_tests{lc($coll)}
        $else
            $tests = $coll_inter_tests{lc($coll)}

    $if !@$enums
        return

    $foreach $t in @$tests
        $foreach $v in @$enums
            my @env_b = ("env=$cvar=$v")
            $if $v=~/gentran_tree/
                add_tests_gentran_tree($coll, "$t @env_a @env_b")
            $elif $v=~/gentran_ring/
                add_tests_gentran_ring($coll, "$t @env_a @env_b")
            $elif $v=~/gentran_brucks/
                add_tests_gentran_brucks($coll, "$t @env_a @env_b")
            $elif $v=~/gentran_recexch/
                add_tests_gentran_recexch($coll, "$t @env_a @env_b")
            $elif $v=~/gentran_scattered/
                add_tests_gentran_scattered($coll, "$t @env_a @env_b")
            $else
                push @test_list, "$t @env_a @env_b"

fncode: add_tests_gentran_tree($coll, $t)
    $foreach $tree in ("kary","knomial_1","knomial_2")
        $foreach $kval in 2,3,4
            my @env
            push @env, "env=MPIR_CVAR_I$coll\_TREE_TYPE=$tree"
            push @env, "env=MPIR_CVAR_I$coll\_TREE_KVAL=$kval"
            push @test_list, "$t @env"

fncode: add_tests_gentran_ring($coll, $t)
    my @env
    push @env, "env=MPIR_CVAR_I$coll\_RING_CHUNK_SIZE=4096"
    push @test_list, "$t @env"

fncode: add_tests_gentran_scattered($coll, $t)
    $foreach $n1 in 1,2,4
        $foreach $n2 in 4, 8
            my @env
            push @env, "env=MPIR_CVAR_I$coll\_SCATTERED_BATCH_SIZE=$n1"
            push @env, "env=MPIR_CVAR_I$coll\_SCATTERED_OUTSTANDING_TASKS=$n2"
            push @test_list, "$t @env"

fncode: add_tests_gentran_brucks($coll, $t)
    $foreach $kval in 2,3,4
        my @env
        push @env, "env=MPIR_CVAR_I$coll\_BRUCKS_KVAL=$kval"
        $if $coll=~/ALLTOALL/
            push @test_list, "$t @env env=MPIR_CVAR_I$coll\_BRUCKS_BUFFER_PER_NBR=0"
            push @test_list, "$t @env env=MPIR_CVAR_I$coll\_BRUCKS_BUFFER_PER_NBR=1"
        $else
            push @test_list, "$t @env"

fncode: add_tests_gentran_recexch($coll, $t)
    $foreach $kval in 2,3,4
        my @env
        push @env, "env=MPIR_CVAR_I$coll\_RECEXCH_KVAL=$kval"
        push @test_list, "$t @env"

#---------------------------------------- 
subcode: _autoload
    $global @coll_list = qw(barrier bcast gather gatherv scatter scatterv allgather allgatherv alltoall alltoallv alltoallw reduce allreduce reduce_scatter reduce_scatter_block scan exscan neighbor_allgather neighbor_allgatherv neighbor_alltoall neighbor_alltoallv neighbor_alltoallw)
    $global %coll_intra_tests, %coll_inter_tests
    $foreach $coll in @coll_list
        $coll_intra_tests{$coll}=[]
        $coll_inter_tests{$coll}=[]
    my $list = $coll_intra_tests{bcast}
    push @$list, "bcasttest 10", "bcastzerotype 5"
    my $list = $coll_intra_tests{gather}
    push @$list, "gather 4", "gather2 4"
    my $list = $coll_intra_tests{scatter}
    push @$list, "scattern 4", "scatter2 4", "scatter3 4"
    my $list = $coll_intra_tests{allgather}
    push @$list, "allgather2 10", "allgather3 10"
    my $list = $coll_intra_tests{allgatherv}
    push @$list, "allgatherv2 10", "allgatherv3 10", "allgatherv4 4 timeLimit=600"
    my $list = $coll_intra_tests{alltoall}
    push @$list, "alltoall1 8"
    my $list = $coll_intra_tests{alltoallv}
    push @$list, "alltoallv 8", "alltoallv0 10"
    my $list = $coll_intra_tests{reduce}
    push @$list, "reduce 5", "reduce 10", "red3 10", "red4 10"
    my $list = $coll_intra_tests{allreduce}
    push @$list, "allred 4 arg=100", "allred 7", "allredmany 4", "allred2 4", "allred3 10", "allred4 4", "allred5 5", "allred6 4", "allred6 7"

    my $list = $coll_intra_tests{reduce_scatter}
    push @$list, "redscat 4", "redscat 6", "redscat2 4", "redscat2 10", "redscat3 8"

    my $list = $coll_intra_tests{reduce_scatter_block}
    push @$list, "red_scat_block 4 mpiversion=2.2"
    push @$list, "red_scat_block 5 mpiversion=2.2"
    push @$list, "red_scat_block 8 mpiversion=2.2"
    push @$list, "red_scat_block2 4 mpiversion=2.2"
    push @$list, "red_scat_block2 5 mpiversion=2.2"
    push @$list, "red_scat_block2 10 mpiversion=2.2"
    push @$list, "redscatblk3 8 mpiversion=2.2"
    push @$list, "redscatblk3 10 mpiversion=2.2"

    my $list = $coll_intra_tests{scan}
    push @$list, "scantst 4"

    $foreach $a in "allgather", "allgatherv", "alltoall", "alltoallv", "alltoallw"
        push @{$coll_intra_tests{"neighbor_$a"}}, "neighb_$a 4 mpiversion=3.0"
