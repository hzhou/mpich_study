include: macros/github.def
page: pr_signoff
    module: perl
    # arg: 3767 wesley
    arg: 3792 # just rebase to master

    my $base="$ENV{HOME}/work/mpich-github"
    my $default_signoff="hzhou"
    $call init_signoff

    $call @usage
    my $pr = $ARGV[0]
    my $by = $ARGV[1]
    $if $by
        $if !$users{$by}
            die "Signoff user '$by' un-recognized.\n"
    $else
        # NO signoff, just rebase master
        # $by = $default_signoff

    # --------------------------
    $call get_github_token
    $call get_pr_info
    $print PR $pr - $author : $branch\n--------------\n
    $if $by && $by eq $author
        die "PR cannot be signed-off by author\n"
    # my $remote = "https://github.com/$author/$REPO.git"
    my $remote = "git\@github.com:$author/$REPO.git"
    # exit 0

    chdir $base or die "Can't chdir $base\n"
    $call get_git_remotes
    $if !$remote_hash{"gh-$author"}
        $print :    add remote gh-$author
        my $t = `git remote add gh-$author $remote`
    $else
        $print :    remote gh-$author exists

    # --------------------------
    my $t = `git checkout master 2>&1`
    my $t = `git pull origin master 2>&1`
    # OK if "error: branch 'xxx' not found."
    my $t = `git branch -D $branch 2>&1`
    my $t = `git fetch gh-$author 2>&1`
    my $t = `git checkout -b $branch gh-$author/$branch 2>&1`

    $call @echo_git, rebase master
    $call @parse_commits
    $if $by
        $call @do_pr_signoff
    $call @echo_git, push -f gh-$author $branch

    #---------------------------------------- 
    subcode: echo_git(@cmd)
        $print :    git $(cmd) ...
        my $t = `git $(cmd)`
        $if $?
            die "Failed '$(cmd)':\n$t"


    #---------------------------------------- 
    subcode: usage
        $if !$ARGV[0]>0
            die "Usage: $0 PR\x23 reviewer\n"

    subcode: init_signoff
        my %users=(
            hzhou=>'Hui Zhou <hzhou321@anl.gov>',
            pavan=>'Pavan Balaji <balaji@mcs.anl.gov>',
            ken=>'Ken Raffenetti <raffenet@mcs.anl.gov>',
            yanfei=>'Yanfei Guo <yguo@anl.gov>',
            wesley=>'Wesley Bland <wesley.bland@intel.com>',
            min=>'Min Si <msi@anl.gov>',
        );

    subcode: get_git_remotes
        my %remote_hash
        my $t=`git remote -v`
        $while $t=~/^(gh-\w+)\s+(\S+)\s+\(fetch\)/mg
            # $print $1 $2
            $remote_hash{$1} = $2

    subcode: parse_commits
        my $t = `git log --oneline master..$branch`
        my @commits
        $while $t=~/^([0-9a-f]+)\s+(.+)/mg
            $print :    commit $1: $2
            push @commits, $1
        my $n = @commits
        $print :    $n commits.

    # -----------------------
    subcode: do_pr_signoff
        my $P="$ENV{HOME}/bin"
        $ENV{GIT_SEQUENCE_EDITOR}="pr_signoff_seq"
        $ENV{GIT_EDITOR}="pr_signoff_commit"
        $ENV{signoff}=$users{$by}

        # my $commit_mark = $commits[$n-1] # won't work, one-off
        my $commit_mark="HEAD~$n"
        my $t = `git rebase -i $commit_mark 2>&1`
        $if $t=~/edit (\d+) commits/ && $1 eq $n
            # OK
        $else
            system "git rebase --abort"
            die "Inconsistent rebase: $t"

        my $t
        $for $i=0:$n
            $print :    sign-off commit $commits[$i]
            $t = `git commit --amend 2>&1`
            $t = `git rebase --continue 2>&1`
        $if $t=~/Successfully rebased/
            $print :    sign-off successful.
        $else
            system "git rebase --abort"
            die "Sign-off unsuccessful."
            
