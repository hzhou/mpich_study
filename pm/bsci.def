page: bsci # from templates/tools/bootstrap/bsci_init.c
    $global static const char* launcher_array[] = { "ssh", "rsh", "fork", "slurm", "ll", "lsf", "sge", "manual", "persist", NULL }
    $global static const char* rmk_array[] = { "user", "slurm", "ll", "lsf", "sge", "pbs", "cobalt", NULL }

fncode: HYDT_bsci_init(ts_rmk, ts_launcher, ts_launcher_exec, b_enablex, b_debug)
    init_bsci_info()
    init_rmk_fns()
    init_launcher_fns()

    $(set:this=HYDT_bsci_info.)
    $call set_s_var, $.rmk, ts_rmk, HYDRA_RMK
    $if $.rmk==NULL
        $.rmk = detect_rmk(b_debug)

    $call set_s_var, $.launcher, ts_launcher, HYDRA_LAUNCHER, HYDRA_BOOTSTRAP
    $if $.launcher==NULL && $.rmk
        $call @match_launcher_array
    $if $.launcher == NULL
        $.launcher = HYDRA_DEFAULT_LAUNCHER
    $if $.launcher == NULL
        $call @internal_error, "no appropriate launcher found\n"

    $.debug = b_debug
    $.enablex = b_enablex

    $call set_s_var, $.launcher_exec, ts_launcher_exec, HYDRA_LAUNCHER_EXEC, HYDRA_BOOTSTRAP_EXEC

    $call @try_init, launcher

    $if $.rmk==NULL
        $.rmk = HYDRA_DEFAULT_RMK
    $call @try_init, rmk

    $if HYDT_bsci_fns.launch_procs == NULL
        $call internal_error, "mandatory launch function undefined\n"

    subcode: try_init(a)
        &call each_array, $(a)
            $if $.$(a) $Eq $(s)
                $fcall (*$(a)_init_array[i])
                break
        $if $(a)_array[i]==NULL
            $call @internal_error, "unrecognized $(a): %s\n", $.$(a)

fncode: detect_rmk(b_debug): static const char *
    &call each_array, rmk
        init_rmk_fns()
        HYDT_bsci_info.rmk = rmk_array[i]
        HYDT_bsci_info.debug = debug
        $fcall (*rmk_init_array[i])
        $local int ret
        $fcall HYDT_bsci_query_native_int, &ret
        $if HYDT_bsci_fns.rmk_finalize
            $fcall HYDT_bsci_fns.rmk_finalize
        init_rmk_fns()
        $if ret
            break
#---------------------------------------- 
include: mpl.def
subcode: set_s_var(var, user_str, @env_vars)
    $if $(user_str)
        $(var) = $(user_str)
    $(for:V in $(env_vars))
        $if $(var)==NULL
            $call mpl_env2str, $(V), $(var)

subcode: each_array(rmk)
    $for i=0; $(rmk)_array[i]; i++
        $(set:s=$(rmk)_array[i])
        BLOCK

subcode: internal_error(@msg)
    HYDU_ERR_SETANDJUMP(status, HYD_INTERNAL_ERROR, $(msg))
