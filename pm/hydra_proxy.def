fncode: signal_cb(int sig): static void
    $if sig==SIGPIPE
        HYD_pmcd_pmip_send_signal(SIGKILL)
    $elif sig==SIGTSTP
        HYD_pmcd_pmip_send_signal(SIGTSTP)
    
page: pmip, basic_frame # from templates/pm/hydra/pm/pmiserv/pmip.c
    struct HYD_pmcd_hdr hdr;
    HYD_status status = HYD_SUCCESS;

    $fcall HYDU_dbg_init, "proxy:unset"
    $fcall HYDU_set_signal, SIGPIPE, signal_cb
    $fcall HYDU_set_signal, SIGTSTP, signal_cb
    $fcall HYDU_set_common_signals, signal_cb

    $fcall init_params 
    $fcall HYD_pmcd_pmip_get_params, argv

    $fcall HYDT_dmx_init, &HYD_pmcd_pmip.user_global.demux

    /* See if HYDI_CONTROL_FD is set before trying to connect upstream */
    $(set:U=HYD_pmcd_pmip.upstream.$1)
    $(set:D=HYD_pmcd_pmip.downstream.$1)
    $(set:L=HYD_pmcd_pmip.local.$1)
    $my int ret
    ret = MPL_env2int("HYDI_CONTROL_FD", &$(U:control))
    $if ret < 0
        HYDU_ERR_POP(status, "error reading HYDI_CONTROL_FD environment\n");
    $elif ret==0
        $fcall HYDU_sock_connect, $(U:server_name), $(U:server_port), &$(U:control), $(L:retries), HYD_CONNECT_DELAY

    $local int sent, bool closed
    $fcall HYDU_sock_write, $(U:control), &$(L:id), sizeof($(L:id)), &sent, &closed, HYDU_SOCK_COMM_MSGWAIT
    $if closed
        goto fn_fail;

    $fcall HYDT_dmx_register_fd, 1, &$(U:control), HYD_POLLIN, NULL, HYD_pmcd_pmip_control_cmd_cb

    loop:
        $fcall HYDT_dmx_wait_for_event, -1
        $for i = 0:$(L:proxy_process_count)
            $if $(D:out)[i] != HYD_FD_CLOSED
                goto loop
            $if $(D:err)[i] != HYD_FD_CLOSED
                goto loop

    /* Now wait for the processes to finish */
    n_done = 0;
    $while 1
        $my int pid, int ret_status
        pid = waitpid(-1, &ret_status, 0);
        &call find_pid_i
            $if $(D:forced_cleanup)
                $if $(D:exit_status)[i] == -1
                    $(D:exit_status)[i] = 0
                $else
                    $(D:exit_status)[i] = ret_status;
            $else
                $(D:exit_status)[i] = ret_status;
            n_done++
        $if n_done == $(L:proxy_process_count)
            break;

        /* Check if there are any messages from the launcher */
        status = HYDT_dmx_wait_for_event(0);
        HYDU_IGNORE_TIMEOUT(status);
        HYDU_ERR_POP(status, "demux engine error waiting for event\n");

    /* Send the exit status upstream */
    HYD_pmcd_init_header(&hdr);
    hdr.cmd = EXIT_STATUS;
    $fcall HYDU_sock_write, $(U:control), &hdr, sizeof(hdr), &sent, &closed, HYDU_SOCK_COMM_MSGWAIT
    HYDU_ASSERT(!closed, status); # status=HYD_INTERNAL_ERROR

    $fcall HYDU_sock_write, $(U:control), $(D:exit_status), $(L:proxy_process_count) * sizeof(int), &sent, &closed, HYDU_SOCK_COMM_MSGWAIT
    HYDU_ASSERT(!closed, status);

    $fcall HYDT_dmx_deregister_fd, $(U:control)
    close($(U:control));

    $fcall HYDT_dmx_finalize, 

    $fcall HYDT_bsci_finalize, 

    /* cleanup the params structure */
    cleanup_params();

  fn_exit:
    HYDU_dbg_finalize();
    return status;

  fn_fail:
    /* kill all processes */
    HYD_pmcd_pmip_send_signal(SIGKILL);
    goto fn_exit;
    # --------------------------------------- 
    subcode: find_pid_i
        /* Find the pid and mark it as complete. */
        $if pid > 0
            $for i=0:$(L:proxy_process_count)
                $if $(D:pid)[i] == pid
