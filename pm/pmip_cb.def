page: pmip_cb # from templates/pm/pmiserv/pmip_cb.c

macros:
    proc_count: HYD_pmcd_pmip.local.proxy_process_count

#-- stdout/stderr --> upstream
fncode: stdoe_cb(fd, events, void* userp)
    $local char buf[HYD_TMPBUF_SIZE]
    $my int stdfd = (int) (size_t) userp # double cast to avoid warning
    $fcall read, fd, buf
    $if recvd
        $if stdfd == STDOUT_FILENO
            $call find_std_i, out
        $else
            $call find_std_i, err
        HYDU_ASSERT(i<$(proc_count))
        $call @set_hdr, pgid, proxy_id, rank, buflen
        $my int upstream_sock_closed
        $fcall write, $(UP), hdr
        $fcall write, $(UP), buf
        $if b_closed
            $fcall HYDT_dmx_deregister_fd(fd)
            $call @set_downstream_FD_CLOSED
            close(fd)

    subcode: find_std_i(out)
        HYD_pmcd_init_header(&hdr)
        hdr.cmd = $(uc:STD$(out))
        $for i=0:$(proc_count)
            $if HYD_pmcd_pmip.downstream.$(out)[i] == fd
                break

fncode: pmi_cb(fd, events, void* userp)
    HYD_pmcd_init_header(&hdr)
    $my int pid = -1
    $call @find_pmi_pid
    
    read_cmd:
    $call read, pmi_storage
    $if b_closed
        $call @cleanup
    $else
        pmi_storage_len += linelen
        pmi_storage[pmi_storage_len] = 0

    check_cmd:
        $fcall check_pmi_cmd, &buf, &hdr.pmi_version, &repeat
        $if buf == NULL
            goto read_cmd
        $if pid!=-1 && !$(DOWN).pmi_fd_active[pid]
            $(DOWN).pmi_fd_active[pid]=1
        $if hdr.pmi_version == 1
            HYD_pmcd_pmip_pmi_handle = HYD_pmcd_pmip_pmi_v1
        $else
            HYD_pmcd_pmip_pmi_handle = HYD_pmcd_pmip_pmi_v2

        $call @malloc_args
        $fcall HYD_pmcd_pmi_parse_pmi_cmd, buf, version, &pmi_cmd, args

        h = HYD_pmcd_pmip_pmi_handle
        $while h->handler
            $if pmi_cmd $Eq h->cmd
                $fcall h->handler(fd, args)
                goto fn_exit
            h++

        # Unhandled cmd
        $call @write_upstream

    subcode: cleanup
        $if pid!=-1 && $(pmi_fd_active)[pid]
            $if $(DOWN).forced_cleanup == 0
                $(DOWN).exit_status[pid] =1
            $fcall HYDT_dmx_deregister_fd(fd)
            close(fd)
            
            $if $.auto_cleanup
                HYD_pmcd_pmip_send_signal(SIGKILL)
            $else
                HYD_pmcd_pmip_send_signal(SIGUSR1)
                hdr.cmd = PROCESS_TERMINATED
                $call write hdr
                HYDU_ASSERT(!closed, status)

# -- pmi_cmd --> buf
subcode: _autoload
    $global static char pmi_storage[HYD_TMPBUF_SIZE], int pmi_storage_len
    $global status char *sptr = pmi_storage

fncode: check_pmi_cmd(char **buf, int* pmi_version, pn_repeat)
    $if pmi_storage_len < 6
        goto fn_exit
    $call @detect_pmi_version
    $if full_command
        buflen = bufptr - sptr + 1
        HYDU_MALLOC_OR_JUMP(*buf, char *, buflen, status)
        memcpy(*buf, sptr, buflen)
        sptr += buflen
        pmi_storage_len -= buflen
        (*buf)[buflen-1] = '\0'

        $if pmi_storage_len ==0
            sptr = pmi_storage # not sure yet
        $else
            *pn_repeat = 1
    $else
        $if sptr != pmi_storage
            memmove(pmi_storage, sptr, pmi_storage_len - (sptr - pmi_storage))
            sptr = pmi_storage
        *buf = NULL

    subcode: detect_pmi_version
        full_command = 0;
        $if sptr $eq "cmd=" || sptr $eq "mcmd="
            *pmi_version = 1;
            $if sptr $eq "cmd="
                $call find_line_end, buf_ptr
            $else
                $call find_endcmd, buf_ptr
        $else
            *pmi_version = 2;
            memcpy(lenptr, sptr, 6);
            lenptr[6] = 0;
            cmdlen = atoi(lenptr);
            $if pmi_storage_len >= cmdlen + 6
                full_command = 1;
                bufptr = sptr + 6 + cmdlen - 1;
    # ----------------------
    subcode: find_line_end(p)
        $for $(p)=sptr:sptr+pmi_storage_len
            $if *$(p) == '\n'
                full_command = 1;
                break;

    subcode: find_endcmd(p)
        $for $(p)=sptr:sptr+pmi_storage_len-6
            $if $(p) $eq "endcmd\n"
                full_command = 1;
                bufptr += strlen("endcmd\n") - 1;
                break;

#---------------------------------------- 
fncode: handle_pmi_response
fncode: pmi_listen_cb
fncode: launch_procs
    $(proc_count) = 0
    &call each_exec
        $(proc_count) += exec->proc_count
    $(for:out,err,pid,exit_status,pmi_rank,pmi_fd,pmi_fd_active)
        $call malloc, $(DOWN).out, $(proc_count)
    $for i=0:$(proc_count)
        $(DOWN).exit_status[i] = -1
        $(DOWN).pmi_fd[i] = HYD_FD_UNSET
        $(DOWN).pmi_fd_active[i] = 0
        $(DOWN).pmi_rank[i] = local_to_global_id(i)

    $fcall HYDT_topo_init, $.topolib, $.binding, $.mapping, $.membind
    $fcall HYDT_ckpoint_init, $.ckpointlib, $.ckpoint_num
    $if $.ckpoint_prefix
        using_pmi_port = 1
        $fcall @sock_create_listen

    $if $(exec)[0]==NULL
        $call @check_point_restart
        goto fn_spawn_complete

    $(set:L=HYD_pmcd_pmip.local.$1)
    process_id = 0
    &call each_exec
        $call @get_env_props
        $if $(L:iface_ip_env_name)
            $if $.iface
                $fcall HYDU_sock_get_iface_ip, $.iface, &ip
                $call setenv, $(L:iface_ip_env_name), ip, &force_env
            $elif $(L:hostname)
                $call setenv, $(L:hostname), ip, &force_env

        $if exec->wdir 
            tn_ret = chdir(exec->wdir) 
            $if tn_ret < 0
                $call internal_error, "unable to change wdir to %s (%s)\n", exec->wdir, MPL_strerrer(errno))

        $for i=0:exec->proc_count
            $call setenv, "MPI_LOCALRANKS", ...
            $call setenv, "MPI_LOCALRANKID", ...
            $if using_pmi_port
                $call setenv, "PMI_PORT", ...
                $call setenv, "PMI_ID", ...
            $else
                $call setenv, "PMI_RANK", ...
                $fcall socketpair, AF_UNIX, SOCK_STREAM, 0, pmi_fds
                $fcall HYDT_dmx_register_fd, 1, &pmi_fds[0], HYD_POLLIN, NULL, pmi_cb
                $fcall HYDU_sock_cloexec, pmi_fds[0]
                $(DOWN).pmi_fd[process_id] = pmi_fds[0]
                $call setenv, "PMI_FD", ...
                $call setenv, "PMI_SIZE", ...
            HYD_STRING_STASH_INIT(stash)
            $for j=0; exec->exec[j]; j++
                HYD_STRING_STASH(stash, MPL_strdup(exec->exec[j]), status)

            $fcall HYDU_create_process, stash.strlist, force_env, $(in), $(out), $(err), $(pid), process_id

            $if $(DOWN).in != HYD_FD_UNSET
                $fcall HYDU_sock_set_nonblock, $(DOWN).in

            HYD_STRING_STASH_FREE(stash)
            $if pmi_fds[1] != HYD_FD_UNSET
                close(pmi_fds[1])
                pmi_fds[1] = HYD_FD_CLOSED

            process_id++
        HYDU_env_free_list(force_env)
        force_env = NULL
    HYD_pmcd_init_header(&hdr)
    hdr.cmd = PID_LIST
    $call write, $(UP), hdr
    $call write, $(UP), $(DOWN).pid

    fn_spawn_complete:
    $(for:out, err)
        $fcall HYDT_dmx_register_fd($(L:proxy_process_count), $(DOWN).$1, HYD_POLLIN, STD$(uc:$1)_FILENO, stdod_cb)

    # ----------------------
    subcode: get_env_props
        # global inherited env
        # global user env
        # local user env
        # system env

fncode: parse_exec_params
fncode: procinfo

#---------------------------------------- 
# command from $(UP)
fncode: HYD_pmcd_pmip_control_cmd_cb(fd, events, void* userp)
    $call read, fd, hdr
    $if hdr.cmd == PROC_INFO
        $fcall procinfo, fd
        $fcall launch_procs
    $elif hdr.cmd == CKPOINT
        $fcall HYDT_ckpoint_checkpoint(...)
    $elif hdr.cmd == PMI_RESPONSE
        $fcall handle_pmi_response, fd, hdr
    $elif hdr.cmd == SIGNAL
        HYD_pmcd_pmip_send_signal(hdr.signum)
    $elif hdr.cmd==STDIN
        $if hdr.buflen
            $call read, fd, buf
            $if $(DOWN).in == HYD_FD_CLOSED
                MPL_free(buf)
                goto fn_exit
            $call write, $(DOWN).in, buf
            
            $if $.auto_cleanup
                HYDU_ASSERT(!closed, status)
            $elif b_closed
                $call close_down_in
            MPL_free(buf)
        $else
            $call close_down_in

    subcode: close_down_in
        close($(DOWN).in)
        $(DOWN).in = HYD_FD_CLOSED
               

