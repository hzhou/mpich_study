include: common.def

page: mpid_init, from templates/mpid/ch3/src/mpid_init.c

fncode: fn_MPID_Init
    &call MPIR_enter, VERBOSE
        $call @mpid_init_1
        $call @pg_init
        $call @mpid_init_2
        $call @mpid_init_3
        $call @set_comm_parent
        $call set_provided_thread_level
        $call fcall, MPIR_Comm_register_hint("eager_rendezvous_threshold", set_eager_threshold, NULL)
        $call fcall, MPIDI_RMA_init();

    # -------------------
    subcode: fcall_jump(@F)
        mpi_errno = $(F);
        $(if:F~init_pg)
            $(set:msg=**ch3|ch3_init)
        $(elif:F~MPIDI_PG)
            $(set:f=$(F:6:word))
            $(set:msg=**dev|$(f:lc))
        $(elif:F~MPIDI)
            $(set:f=$(F:6:word))
            $(set:msg=**ch3|$(f:lc))
        $if mpi_errno != MPI_SUCCESS
            MPIR_ERR_SETANDJUMP(mpi_errno,MPI_ERR_OTHER,"$(msg)")
    subcode: fcall_jump1(s, @F)
        mpi_errno = $(F);
        $(if:F~MPID_Comm_connect)
            $(set:msg=**ch3|conn_parent)
        $(elif:F~MPIDI)
            $(set:f=$(F:6:word))
            $(set:msg=**dev|$(f:lc))
        $if mpi_errno != MPI_SUCCESS
            MPIR_ERR_SETANDJUMP1(mpi_errno, MPI_ERR_OTHER,"$(msg)", "$(msg) %s", $(s))

    subcode: pmi_call(@F)
        pmi_errno = $(F);
        $(set:f=$(F:0:word))
        $(set:msg=**$(f:lc))
        $if pmi_errno != PMI_SUCCESS
            MPIR_ERR_SETANDJUMP1(mpi_errno, MPI_ERR_OTHER,"$(msg)", "$(msg) %d", pmi_errno)

    # ------------------
    subcode: pg_init
        /* * Perform channel-independent PMI initialization */
        $local MPIDI_PG_t* pg=NULL
        $local int pg_rank=-1, int pg_size
        $local int has_parent
        $call fcall_jump, init_pg( p_argc, p_argv, p_has_args, p_has_env, &has_parent, &pg_rank, &pg )
        
        /* FIXME: Why are pg_size and pg_rank handled differently? */
        pg_size = MPIDI_PG_Get_size(pg);
        MPIDI_Process.my_pg = pg;  
        /* brad : this is rework for shared memories * because they need this set earlier * for getting the business card */
        MPIDI_Process.my_pg_rank = pg_rank;
        /* FIXME: Why do we add a ref to pg here? */
        MPIDI_PG_add_ref(pg);

    subcode: set_provided_thread_level
        /* * Set provided thread level */
        $if pn_provided != NULL
            /* This must be min(requested,MPICH_THREAD_LEVEL) if runtime control of thread level is available */
            *pn_provided = (MPICH_THREAD_LEVEL < n_requested) ?  MPICH_THREAD_LEVEL : n_requested;

#----------------------------------------------- 
/* * Initialize the process group structure by using PMI calls.  * This routine initializes PMI and uses PMI calls to setup the * process group structures.  * */
fncode: init_pg(int* p_arg, char*** p_argv, p_has_args, p_has_env, p_has_parent, pn_rank, MPIDI_PG_t** p_pg)
    &call MPIR_fn
        $local MPIDI_PG_t* pg = NULL
        $local int pg_rank, int pg_size
        $call @pre_init
        $call init_pmi
        $call create_pg
        /* FIXME: has_args and has_env need to come from PMI eventually... */
        *p_has_args = TRUE;
        *p_has_env  = TRUE;

        *p_pg    = pg;
        *pn_rank = pg_rank;

    # ----------------
    subcode: on_fail
        $if pg
            MPIDI_PG_Destroy(pg)
    subcode: pre_init
        /* See if the channel will provide the PMI values.  The channel is responsible for defining HAVE_CH3_PRE_INIT and providing the MPIDI_CH3_Pre_init function.  */
        #ifdef HAVE_CH3_PRE_INIT
        {
            int setvals;
            $call fcall_fail, MPIDI_CH3_Pre_init( &setvals, p_has_parent, &pg_rank, &pg_size );
            $if setvals
                usePMI = 0;
        }
        #endif 

    # ---------------------------
    subcode: init_pmi
        int pmi_errno;
        int appnum, pg_id_sz;
        int usePMI=1;
        char *pg_id;

        /* If we use PMI here, make the PMI calls to get the basic values.  Note that systems that return setvals == true do not make use of PMI for the KVS routines either (it is assumed that the discover connection information through some other mechanism */
        /* FIXME: We may want to allow the channel to ifdef out the use of PMI calls, or ask the channel to provide stubs that return errors if the routines are in fact used */
        $if usePMI
            /* * Initialize the process manangement interface (PMI), * and get rank and size information about our process group */

            #ifdef USE_PMI2_API
            $call PMI2_init
            #else
            $call PMI_init
            #endif
            $if appnum != -1
                MPIR_Process.attrs.appnum = appnum;

            #ifdef USE_PMI2_API
            $call create_pg_id_PMI2
            #else
            $call create_pg_id_PMI
            #endif
        $else
            $call create_pg_id_default

    subcode: pg_id_alloc(size)
	/* This memory will be freed by the PG_Destroy if there is an error */
	pg_id = MPL_malloc($(size), MPL_MEM_OTHER);
	$if pg_id == NULL
	    MPIR_ERR_SETANDJUMP1(mpi_errno,MPI_ERR_OTHER,"**nomem","**nomem %d", $(size));

    subcode: create_pg_id_default
	/* Create a default pg id */
        $call alloc_pg_id, 2
	MPL_strncpy( pg_id, "0", 2 );

    subcode: create_pg_id_PMI
	/* Now, initialize the process group information with PMI calls */
	/* * Get the process group id */
	$call pmi_call, PMI_KVS_Get_name_length_max(&pg_id_sz);
        $call alloc_pg_id, pg_id_size+1
	/* Note in the singleton init case, the pg_id is a dummy.  We'll want to replace this value if we join an Process manager */
	$call pmi_call, PMI_KVS_Get_my_name(pg_id, pg_id_sz);
    subcode: PMI_init
        $call pmi_call, PMI_Init(p_has_parent)
        $call pmi_call, PMI_Get_rank(&pg_rank)
	$call pmi_call, PMI_Get_size(&pg_size)
	$call pmi_call, PMI_Get_appnum(&appnum)
    subcode: create_pg_id_PMI2
        $call alloc_pg_id, MAX_JOBID_LEN
        $call fcall, PMI2_Job_GetId(pg_id, MAX_JOBID_LEN)
    subcode: PMI2_init
        $call fcall, PMI2_Init(p_has_parent, &pg_size, &pg_rank, &appnum)
    # -----------------
    subcode: create_pg
        /* * Initialize the process group tracking subsystem */
        $call fcall_jump, MPIDI_PG_Init(p_argc, p_argv, pg_compare_ids, pg_destroy);
        /* * Create a new structure to track the process group for our MPI_COMM_WORLD */
        $call fcall_jump, MPIDI_PG_Create(pg_size, pg_id, &pg);
        /* FIXME: We can allow the channels to tell the PG how to get connection information by passing the pg to the channel init routine */
        $if usePMI
            /* Tell the process group how to get connection information */
            $call fcall, MPIDI_PG_InitConnKVS( pg );

        /* FIXME: Who is this for and where does it belong? */
        #ifdef USE_MPIDI_DBG_PRINT_VC
        MPIDI_DBG_parent_str = (*p_has_parent) ? "+" : "";
        #endif

#----------------------------------------------- 
subcode:: mpid_init_1
    /* Call any and all MPID_Init type functions */
    MPIR_Err_init();
    MPIR_Datatype_init();
    MPIR_Group_init();
    /* initialization routine for ch3u_comm.c */
    $call fcall, MPIDI_CH3I_Comm_init()
    /* init group of failed processes, and set finalize callback */
    MPIDI_Failed_procs_group = MPIR_Group_empty;
    MPIR_Add_finalize(finalize_failed_procs_group, NULL, MPIR_FINALIZE_CALLBACK_PRIO-1);
    /* FIXME: This is a good place to check for environment variables and command line options that may control the device */

    MPIDI_Use_pmi2_api = FALSE;
    #ifdef USE_PMI2_API
    MPIDI_Use_pmi2_api = TRUE;
    #else
    {
        $local int val, int ret
        ret = MPL_env2bool("MPICH_USE_PMI2_API", &val);
        $if ret == 1 && val
            MPIDI_Use_pmi2_api = TRUE;
    }
    #endif
    /* Create the string that will cache the last group of failed processes * we received from PMI */
    #ifdef USE_PMI2_API
    MPIDI_failed_procs_string = MPL_malloc(sizeof(char) * PMI2_MAX_VALLEN, MPL_MEM_STRINGS);
    #else
    $local int val
    PMI_KVS_Get_value_length_max(&val);
    MPIDI_failed_procs_string = MPL_malloc(sizeof(char) * (val+1), MPL_MEM_STRINGS);
    #endif

    /* * Set global process attributes.  These can be overridden by the channel * if necessary.  */
    MPIR_Process.attrs.tag_ub = INT_MAX;
    MPIR_Process.attrs.io = MPI_ANY_SOURCE;

subcode:: mpid_init_2
    /* We intentionally call this before the channel init so that the channel can use the node_id info. */
    /* Ideally this wouldn't be needed.  Once we have PMIv2 support for node information we should probably eliminate this function. */
    $call fcall, MPIDI_Populate_vc_node_ids(pg, pg_rank)
    $call fcall, MPIDU_Ftb_init()

    /* Initialize Window functions table with defaults, then call the channel's init function. */
    MPIDI_Win_fns_init(&MPIDI_CH3U_Win_fns);
    MPIDI_CH3_Win_fns_init(&MPIDI_CH3U_Win_fns);
    MPIDI_CH3_Win_hooks_init(&MPIDI_CH3U_Win_hooks);

subcode:: mpid_init_3
    /* * Let the channel perform any necessary initialization * The channel init should assume that PMI_Init has been called and that * the basic information about the job has been extracted from PMI (e.g., * the size and rank of this process, and the process group id) */
    $call fcall_jump, MPIDI_CH3_Init(has_parent, pg, pg_rank)
    /* setup receive queue statistics */
    $call fcall, MPIDI_CH3U_Recvq_init()

    /* Ask channel to expose Window packet ordering. */
    MPIDI_CH3_Win_pkt_orderings_init(&MPIDI_CH3U_Win_pkt_orderings);

