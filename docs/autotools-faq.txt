autoreconf runs autoconf, autoheader, aclocal, automake, libtoolize, and autopoint (when appropriate) repeatedly to update configure.

autoconf:       configure.ac -> configure
autoheader:     configure.ac -> config.h.in
aclocal:        configure.ac, ac_include.m4 -> aclocal.m4
automake:       configure.ac, Makefile.am -> Makefile.in, stamp-h.in, install-sh, mkinstalldirs
libtoolize:     -> config.guess, config.sub, ltmain.sh, ltconfig
#----------------------------------------------- 
Autotools FAQ

1 General questions

  1.1 What are the "Autotools"?

     * Autoconf helps create portable configure and testsuite scripts.
     * Automake helps create portable Makefiles supporting all the targets
       documented by the [61]GNU Coding Standards.
     * Libtool helps create and use shared libraries portably.
     * Gnulib is intended to be the canonical source for most of the
       important "portability" and/or common files for GNU projects.

   Together, they make up the [62]GNU Build System.

   Often, the following tools are used at the same time: gnulib-tool (from
   the gnulib package), gettextize and autopoint (from the gettext
   package).

   Under the hood, the autotools use a helper script named autom4te which
   itself calls out to GNU M4.

  1.6 What are the differences to other build systems?

   TODO: Compare with CMake, waf, scons, ...

  1.7 Why is everything so complicated?

   TODO

2 Getting started

  2.1 What tutorials exist?

   [131]Alexandre Duret-Lutz' Autotools Tutorial, a very long and detailed
   tutorial in presentation form, also has a long list of other online
   tutorials and online Autotools resources.

   The [132]Autotools Introduction chapter of the Automake manual is a
   shortened version of Alexandre's tutorial.

   [133]All you should really know about Autoconf and Automake, a very
   short and concise tutorial from Paolo Bonzini.

   [134]Autotools Mythbuster, a longer guide also explaining some newer
   features, from Diego E. "Flameeyes" Pettenò.

   [135]Autotools: a practitioner's guide to Autoconf Automake and Libtool
   is a book introducing Autotools, from John Calcote.

   The Goat Book or [136]Autobook, officially titled "GNU Autoconf,
   Automake, and Libtool", is a printed and online introduction into all
   three tools, from 2000, written by Gary V. Vaughan, Ben Elliston, Tom
   Tromey, and Ian Lance Taylor.

 131. http://www.lrde.epita.fr/~adl/autotools.html
 132. file:///Users/hzhou/packages/mpich-3.3b2/def/docs/automake.html#Autotools-Introduction
 133. http://smalltalk.gnu.org/blog/bonzinip/all-you-should-really-know-about-autoconf-and-automake
 134. http://www.flameeyes.eu/autotools-mythbuster/
 135. http://www.freesoftwaremagazine.com/books/autotools_a_guide_to_autoconf_automake_libtool
 136. http://sources.redhat.com/autobook/

  2.4 What does ./bootstrap or ./autogen.sh do?

   TODO

   usually: call autotools commands to copy and generate a number of
   files. Often just autoreconf -vi.

   gnulib provides a very elaborate bootstrap script, see [152]VCS Issues,
   see [153]Modified imports.

   The name bootstrap is preferred over `autogen.sh' as there also exists
   an independent software package named [154]AutoGen.
     __________________________________________________________________

  2.5 Which files are hand-written and which generated (and how)?

   TODO

   (Usually) hand-written:

   configure.ac
          Input file for Autoconf.

   Makefile.am
          Input file(s) for Automake.

   acinclude.m4
   m4/*.m4
          Additional files containing Autoconf macros. The m4/ directory
          name is a common convention, set by [158]ACLOCAL_AMFLAGS in the
          toplevel Makefile.am file, and [159]AC_CONFIG_MACRO_DIR in the
          configure.ac file.

   Generated on the developer system:

   aclocal.m4
          Usually generated by aclocal, contains additional Autoconf
          macros from Automake and third-party macro files. Some packages
          choose to not use aclocal and hand-write this file instead.

   configure
          Generated shell script that runs all the system tests and
          creates config.status.

   config.h.in
          Generated from autoheader, contains prototypes for C #defines,
          serves as template for the config.h file.

   Makefile.in
          Generated from automake (or hand-written in packages not using
          Automake).

   autom4te.cache
          Cache directory for autom4te, an internal helper script. This
          can safely be removed. see [160]Autom4te Cache.

   configure.scan
          Output file of autoscan, which can serve as a prototype
          configure.ac file.

   Installed from Autotools files:

   ltmain.sh
          Helper script from Libtool, installed by libtoolize.

   install-sh
   mkinstalldirs
   mdate-sh
   compile
   depcomp
   py-compile
   ylwrap
          Helper scripts from Automake, installed by automake
          --add-missing.

   Generated on the user system (the one running configure) in the build
   directory tree (the one where configure is run from):

   config.status

   config.log

   config.cache

   config.h

   Makefile

  2.6 How do I add a Makefile.am file to an existing project?

     What do I need to do when I want to add a sub/foo/Makefile.am
     file to an existing project (in a recursive Makefile setup)?

   In general, it takes three steps:
     * Write the sub/foo/Makefile.am file itself.
     * Edit the next higher-up Makefile.am and add the relative directory
       in its `SUBDIRS'; i.e., in this case, either add foo to the
       `SUBDIRS' variable in sub/Makefile.am:
          ## sub/Makefile.am
          SUBDIRS = ...

          SUBDIRS += foo

       or add sub/foo to the `SUBDIRS' variable in the toplevel
       Makefile.am if there is no intermediate sub/Makefile.am (see
       [167]Subdirectories).
     * Add the line AC_CONFIG_FILES([sub/foo/Makefile]) to the
       configure.ac file (see [168]Requirements).
       A few large package trees use more than one configure.ac file,
       i.e., they contain subpackages. In this case, all file names above
       are meant relative to the nearest higher-up configure.ac file (see
       [169]Subpackages).

   Then, rerunning make in the build directory should do the right thing
   unless you have rebuild rules disabled (see [170]maintainer-mode);
   alternatively, run autoreconf -v in the toplevel source directory. See
   [171]amhello Explained, for a small but complete example package.

   In a nonrecursive Makefile project, depending on local convention,
   instead of the above three steps you would probably write a fragment
   file to be included in the toplevel Makefile.am:
     ## toplevel Makefile.am
     ...
     include sub/foo/fragment.am

   Note that in this case you also need to use the relative subdirectory
   prefixes in file names used inside the fragment file (see
   [172]Alternative).
     __________________________________________________________________

  2.7 How do I communicate configure test results to a Makefile?

   TODO:

   AC_SUBST, see [176]Setting Output Variables, see [177]General
   Operation.

   AC_DEFINE, see [178]Defining Symbols.
     __________________________________________________________________

  2.8 How do I override Makefile macros set by automake?

   TODO:

   AC_SUBST

   setting in Makefile.am

   AUTOMAKE_OPTIONS = -Wno-override -Wno-syntax
     __________________________________________________________________

  2.9 How can I install software below my home directory?

     ./configure --prefix="$HOME/local"
     make
     make install
     __________________________________________________________________

  2.10 How do I add compiler or linker flags to the build system?

   As user of an autotooled package:
     ./configure CPPFLAGS="-I$somewhere/include" LDFLAGS="-L$somewhere/lib"

   As configure.ac author:

   TODO

  2.11 What does 'test "X$variable" = X' mean?

   Weird way of writing test -z "$variable" that does not confuse the test
   builtins from old shells when $variable is `=' or `)' (see
   [192]Limitations of Builtins).
     __________________________________________________________________

  2.12 How do I use brackets [] in configure.ac scripts?

   TODO

   either quote them by using more brackets, or use [195]Quadrigraphs
     __________________________________________________________________

3 Libtool-related questions

  3.1 What are these .la files for and can I safely remove them?

   portable encoding of static and shared library names and dependencies.

   removing usually only works OK if done in directories which the runtime
   linker searches by default anyway (otherwise you might need to set
   LD_LIBRARY_PATH or an equivalent variable) and only on systems where
   the runtime linker loads indirect library dependencies automatically
   (includes GNU/Linux, GNU, Solaris).
     __________________________________________________________________

4 Tips and Tricks

  4.1 How can I speed up configure?

   Use a cache file when developing: configure -C aka. configure
   --config-cache (see [234]Cache Files).

   Install a config.site file which presets common test results (see
   [235]Site Defaults).

   As developer:
     * Do not add any tests to configure.ac your code isn't prepared to
       deal with anyway.
     * Do not use obsolete or obsolescent tests like AC_C_CONST.
     __________________________________________________________________

  4.2 How can I speed up make?

   Build in parallel: make -jn, with n greater than 1.

   As a developer: ensure your project parallelizes well, e.g., by using
   [239]nonrecursive makefiles.
     __________________________________________________________________

  4.3 Does Automake support nonrecursive Makefiles?

   TODO: Yes.

  4.5 How do I enable cross compilation reliably?

   TODO

   pass both --host and --build to configure

  4.7 How do I save/modify the arguments to configure?

   TODO

   either: very early after AC_INIT (see [256]Initializing configure),

   or: ac_configure_args, but note quoting rules: the whole thing is
   evaluated by the shell later:
     eval configure "$ac_configure_args"
     __________________________________________________________________

  4.8 Why should config.h not be installed?

   Here's a detailed explanation: [260]Where to stick config.h.

   If you absolutely need to use #defines computed from configure in
   installed headers:
     * Use a hand-written config header template file with only those
       defines that you absolutely need. Pass it as second (or further)
       argument to AC_CONFIG_HEADERS. autoheader will only generate a
       header template for the first argument. see [261]Header Templates.
     * Use the AX_PREFIX_CONFIG_H macro from The Autoconf Macro Archive.
     __________________________________________________________________

