include: macros_mymake/dependency.def

subcode: compile_mpich
    # push @config_args, "--enable-izem=atomic --with-zm-prefix=yes"
    $if $opts{enable_izem}
        $call need_izem

    $(for:mpl,opa)
        $call copy_subdir_module, $1

    $call @preproc_bindings
    $call mpich_configure
    $call @post_mpich_configure

    $call add_rule_cpi
    $call @add_rule_dep

    $call need_mpich_preproc # cvar, errmsg, etc.
    $if -d "src/openpa"
        $call need_opa
    $(for:mpl,hwloc,yaksa)
        $call need_$1

    $call need_jsonc

    $if !$opts{disable_romio}
        $call need_romio

    $if $opts{device}=~/ch4:ucx/
        $call need_ucx
    $if $opts{device}=~/:ofi/
        $call need_ofi

    $if $ENV{EXTRA_LIB}
        $L_list .= " $ENV{EXTRA_LIB}"

    $call custom_make

    $ENV{CFLAGS}=$opts{CFLAGS}
    system "make $(Hmpl) $(Hopa)"

    # post filtering config defines
    $call @patch_sizeof_atomic
    $call patch_atomic_nolocal
    $call patch_ticketlock
    $if %defines
        $call define_config_h, mymake/mpl/include/mplconfig.h
        $call define_config_h, src/include/mpichconf.h

    # ---------------------------
    subcode: custom_programs
        $if $t=~/mpichversion/
            # mpichversion include mpiimpl.h
            # pgcc won't ignore static inline functions
            # causing undefined reference to `fi_strerror` etc.
            next
    # ---------------------------
    subcode: dump_variable_custom
        $call filter_var_hwloc
        $(if:key=CPPFLAGS)
            $call filter_var_mpl_etc
            $t .= $I_list

    subcode: set_libs_custom
        $(if:which=ltlibs)
            $if $add!~/mpi(fort|cxx)/
                $call filter_lib_romio
                $if $add=~/_libmpi_la_/ && $opts{have_weak}
                    $call filter_lib_mpl_etc
                    $call filter_lib_ucx
                    $call filter_lib_ofi
                    $t.= $L_list
                $elif $add=~/_libpmpi_la_/
                    # !$opts{have_weak}
                    $call filter_lib_mpl_etc
                    $call filter_lib_ucx
                    $call filter_lib_ofi
                    $t.= $L_list
    # ---------------------------
    subcode: post_mpich_configure
        &call open_r, src/include/mpichconf.h
            $if /^#define\s+HAVE_.*WEAK.* 1/
                $opts{have_weak}=1
        &call open_r, maint/version.m4
            $if /libmpi_so_version_m4.*\[([\d:]*)\]/
                $opts{so_version}=$1
        &call open_r, config.status
            $if /S\["WRAPPER_LIBS"\]="(.*)"/
                $opts{WRAPPER_LIBS}=$1
        &call open_r, mymake/Makefile.orig
            $if /^CFLAGS *= *(.*)/
                $opts{CFLAGS}=$1
                &call open_W, mymake/CFLAGS
                    $print $1

        $if !$opts{have_weak}
            $special_targets{lib_libmpi_la}="\x24(LTCC) -DMPICH_MPI_FROM_PMPI"

        # install mpicc etc.
        my $bin="\x24(PREFIX)/bin"
        $(for:p in mpicc,mpicxx,mpif77,mpifort)
            $if -f "src/env/$(p).bash"
                $call get_file_lines, src/env/$(p).bash
                my %tmp=(PREFIX=>$opts{prefix}, EXEC_PREFIX=>"$opts{prefix}/bin", SYSCONFDIR=>"$opts{prefix}/etc", INCLUDEDIR=>"$opts{prefix}/include", LIBDIR=>"$opts{prefix}/lib")
                &call open_w, mymake/$(p)
                    $foreach $l in @lines
                        $l=~s/__(\w+)_TO_BE_FILLED_AT_INSTALL_TIME__/$tmp{$1}/e
                        print Out $l
                $dst_hash{"mymake/$(p)"}=$bin
        $dst_hash{"LN_S-$bin/mpic++"}="$bin/mpicxx"
        $dst_hash{"LN_S-$bin/mpif90"}="$bin/mpifort"

    # --------------------
    subcode: add_rule_cpi
        push @extra_make_rules, "examples/cpi: lib/libmpi.la"
        push @extra_make_rules, "\t\x24(CC) -o examples/cpi examples/cpi.c lib/.libs/libmpi.a $opts{WRAPPER_LIBS}"
        push @extra_make_rules, ""
        
    subcode: add_rule_dep
        $if $opts{device} =~/ch4/
            $call add_ch4_dep
#---------------------------------------- 
macros:
    mpich_configure_deps:: subsys_include.m4
    mpich_configure_deps:: configure
    mpich_configure_deps:: Makefile
    mpich_configure_deps:: mymake/Makefile.*

subcode: mpich_configure
    $call @hack_MPI_OFFSET
    $if !-f "subsys_include.m4"
        $call stage, maint/gen_subcfg_m4
        system "perl maint/gen_subcfg_m4"
    $if !-f "configure"
        system "rm -f mymake/Makefile.orig"
        $call stage, Autoconf MPICH
        &call modify_frame, temporary
            $call modify_configure_ac
            system "autoreconf -ivf"
    $if !-f "mymake/Makefile.orig"
        $call stage, Configure MPICH
        system "rm -f Makefile"
        my $t = join ' ', @config_args
        system "./configure --with-pm=no $t" # we'll configure/build hydra separately
        system "mv Makefile mymake/Makefile.orig"
        &call modify_frame
            $call patch_libtool

    # -------------------
    subcode: hack_MPI_OFFSET
        my $t = `uname -m`
        $if $t=~/x86_64/
            $ENV{FORTRAN_MPI_OFFSET}="integer*8"
    # -------------------
    subcode: modify_configure_ac
        &call modify, configure.ac
            $if $l=~/AC_CONFIG_SUBDIRS/
                next
            $elif $l=~/^\s*HWLOC_/
                next
            $elif $l=~/^(\s*)(PAC_CONFIG_SUBDIR|PAC_CONFIG_ALL_SUBDIRS)/
                $l = "$1: \x23 $2\n"
            $elif $l=~/^(\s*PAC_SUBDIR_MPL)/
                $l = "$1([$(Dmpl)])"
            $elif $l=~/^(\s*PAC_SUBDIR_OPA)/
                $l = "$1([$(Dopa)])"
            $elif $l=~/^(\s*PAC_SUBDIR_HWLOC)/
                $l = "$1([$(Dhwloc)])"
        &call modify, Makefile.am
            $if $l=~/ACLOCAL_AMFLAGS/
                $l ="ACLOCAL_AMFLAGS = -I confdb\n"
        my $flag
        &call modify, src/mpid/ch3/subconfigure.m4
            $if $l=~/AC_MSG_CHECKING.*OpenPA/
                $flag=1
            $elif $flag and $l=~/AC_C_BIGENDIAN/
                $flag=0
            $elif $flag
                next
        $if $opts{device}=~/ucx/
            $call patch_configure_ucx
        $if $opts{device}=~/ofi/
            $call patch_configure_ofi

subcode: need_mpich_preproc
    $(set:errhan=src/mpi/errhan/$1)
    push @extra_make_rules, "$(errhan:errutil.lo): $(errhan:defmsg.h)"
    $call push_autogen_rule, errmsg, src/mpi/errhan/defmsg.h
    push @CONFIGS, "src/include/mpichconf.h"
    push @CONFIGS, "src/include/mpir_cvars.h"
    $call push_autogen_rule, cvars, src/include/mpir_cvars.h
    # $call push_autogen_rule, logs, src/include/mpiallstates.h
    $if -f "src/include/autogen.h.in"
        push @CONFIGS, "src/include/autogen.h"
        push @extra_make_rules, "src/include/autogen.h: src/include/autogen.h.in"
        push @extra_make_rules, "\tperl maint/gen_init.pl"
        push @extra_make_rules, ""


    &call add_subdir_rule_block, src/glue/romio, src/glue/romio/all_romio_symbols.c
        push @t, "perl all_romio_symbols ../../mpi/romio/include/mpio.h.in"

#---------------------------------------- 
subcode: patch_sizeof_atomic
    &call open_w, "mymake/t.c"
        $(set:print_to=Out)
        $print #include "mpl_atomic.h"
        $print #include <pthread.h>
        $print "pthread_mutex_t MPL_emulation_lock;"
        $print "int main() { return sizeof(MPL_atomic_ptr_t); }"

    system "$make_vars{CC} -Imymake/mpl/include mymake/t.c -o mymake/t"
    system "mymake/t"
    my $ret = $? >> 8;

    $config_defines{SIZEOF_MPL_ATOMIC_PTR_T} = $ret

subcode: patch_atomic_nolocal
    my $lock_based_atomics
    &call open_r, "mymake/mpl/include/mplconfig.h"
        $if /^#define MPL_USE_LOCK_BASED_PRIMITIVES/  
            $lock_based_atomics = 1
            last
    $if $lock_based_atomics
        $config_defines{ENABLE_NO_LOCAL} = 1

subcode: patch_ticketlock
    $if $opts{device}=~/ch4:/
        $config_defines{MPL_POSIX_MUTEX_NAME} = "MPL_POSIX_MUTEX_TICKETLOCK"
