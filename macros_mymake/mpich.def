include: macros_mymake/dependency.def

subcode: mpich_slow
    $(setmacro:makefile=mpich)
    $call set_general_make_rules
    $call mpich_make_setup

    my $ret=0
    $call mpich_configure

    $if $ret == 0
        $call @post_mpich_configure

    $if $ret == 0
        $call custom_make

    $if $ret == 0
        # configure MPL
        $call load_dump_CFLAGS
        $call patch_mpicc_etc

        $ENV{CFLAGS}=$opts{CFLAGS}
        my $t="mymake/$(Hmpl)"
        $if -d "src/openpa"
            $t.=" mymake/$(Hopa)"
        $t=~s/$pwd\///g

        $ret = system "make $t"

    $if $ret == 0
        # post filtering config_defines
        $call @patch_sizeof_atomic
        $call patch_atomic_nolocal
        $if %config_defines
            $call define_config_h, mymake/mpl/include/mplconfig.h
            $call define_config_h, src/include/mpichconf.h

    # ---------------------------
    subcode: custom_programs
        $if $t=~/mpichversion/
            # mpichversion include mpiimpl.h
            # pgcc won't ignore static inline functions
            # causing undefined reference to `fi_strerror` etc.
            next
        $elif $t=~/mpivars/
            # not working for clang asan yet
            next
    # ---------------------------
    subcode: post_mpich_configure
        &call open_r, src/include/mpichconf.h
            $if /^#define\s+HAVE_.*WEAK.* 1/
                $opts{have_weak}=1
        &call open_r, maint/version.m4
            $if /libmpi_so_version_m4.*\[([\d:]*)\]/
                $opts{so_version}=$1
        &call open_r, config.status
            $if /S\["WRAPPER_LIBS"\]="(.*)"/
                $opts{WRAPPER_LIBS}=$1

    subcode: load_dump_CFLAGS
        &call open_r, mymake/Makefile.custom
            $if /^CFLAGS *= *(.*)/
                $opts{CFLAGS}=$1
                &call open_W, mymake/CFLAGS
                    $print $1

    subcode: patch_mpicc_etc
        $(for:p in mpicc,mpicxx,mpif77,mpifort)
            $if -f "src/env/$(p).bash"
                $call get_file_lines, src/env/$(p).bash
                my %tmp=(PREFIX=>$opts{prefix}, EXEC_PREFIX=>"$opts{prefix}/bin", SYSCONFDIR=>"$opts{prefix}/etc", INCLUDEDIR=>"$opts{prefix}/include", LIBDIR=>"$opts{prefix}/lib")
                &call open_W, mymake/$(p)
                    $foreach $l in @lines
                        $if $l=~/_TO_BE_FILLED_AT_INSTALL_TIME__/
                            $l=~s/__(\w+)_TO_BE_FILLED_AT_INSTALL_TIME__/$tmp{$1}/e
                        $elif $l=~/^final_(c|cxx|f|fc)flags="(.*)"/ -> $c, $flags
                            $if $opts{CFLAGS}=~/-fsanitize=(address|undefined)/
                                $l = "final_${c}flags=\"$flags -fsanitize=$1\"\n"
                        print Out $l

    subcode: set_general_make_rules
        $call set_mymake_DO
        $call add_rule_pm
        # $call add_rule_testing

    subcode: set_mymake_DO
        $(for:stage,clean,errmsg,cvars,logs,hydra,testing,mpi_h)
            push @extra_make_rules, "DO_$1 = perl $opts{mymake}_$1.pl"
        push @extra_make_rules, ""
        push @extra_make_rules, ".PHONY: test cvars errmsg"
        $(for:testing,cvars,errmsg)
            $call push_autogen_rule, $1, $1
        push @extra_make_rules, "realclean: clean"
        push @extra_make_rules, "\t\x24(DO_clean)"

    subcode: add_rule_pm
        $if $opts{pm} eq "gforker"
            $call add_rule_gforker
        $elif $opts{pm} eq "remshell"
            $call add_rule_remshell
        $else
            $call add_rule_hydra, hydra
            $if $opts{pm} eq "hydra2"
                $call add_rule_hydra, hydra2

#---------------------------------------- 
subcode: set_make_rules_DO
    $(for:stage,clean,errmsg,cvars,logs,config,makefile)
        push @extra_make_rules, "DO_$1 = perl $opts{mymake}_$1.pl"
    push @extra_make_rules, ""
    push @extra_make_rules, ".PHONY: test cvars errmsg realclean"
    $(for:testing,cvars,errmsg)
        $call push_autogen_rule, $1, $1
    push @extra_make_rules, "realclean: clean"
    push @extra_make_rules, "\t\x24(DO_clean)"

#---------------------------------------- 
subcode: mpich_make_setup
    $(for:mpl,hwloc,yaksa,jsonc)
        $call need_$1
    $if $opts{enable_izem}
        $call need_izem
    $if -d "src/openpa"
        $call need_opa

    $if !$opts{disable_romio}
        $call need_romio
    $if $opts{device}=~/:ucx/ and (!$opts{"with-ucx"} or $opts{"with-ucx"} eq "embedded")
        $call need_ucx
    $elif $opts{device}=~/ch4:ofi/ and (!$opts{"with-libfabric"} or $opts{"with-libfabric"} eq "embedded")
        $call need_ofi
    $elif $opts{device}=~/ch3.*:ofi/ and (!$opts{"with-ofi"} or $opts{"with-ofi"} eq "embedded")
        $call need_ofi

    $call @preproc_bindings

    $call add_rule_cpi
    $call @add_rule_dep

    $call need_mpich_preproc # cvar, errmsg, etc.

    $if $ENV{EXTRA_LIB}
        $L_list .= " $ENV{EXTRA_LIB}"

    $if $opts{do_pmpi}
        $special_targets{lib_libmpi_la}="\x24(LTCC) -DMPICH_MPI_FROM_PMPI"

    # install mpicc etc.
    my $bin="\x24(PREFIX)/bin"
    $(for:p in mpicc,mpicxx,mpif77,mpifort)
            $dst_hash{"mymake/$(p)"}=$bin
    $dst_hash{"LN_S-$bin/mpic++"}="$bin/mpicxx"
    $dst_hash{"LN_S-$bin/mpif90"}="$bin/mpifort"


    subcode: need_mpich_preproc
        $(set:errhan=src/mpi/errhan/$1)
        push @extra_make_rules, "$(errhan:errutil.lo): $(errhan:defmsg.h)"
        $call push_autogen_rule, errmsg, src/mpi/errhan/defmsg.h
        push @CONFIGS, "src/include/mpichconf.h"
        push @CONFIGS, "src/include/mpir_cvars.h"
        $call push_autogen_rule, cvars, src/include/mpir_cvars.h
        # $call push_autogen_rule, logs, src/include/mpiallstates.h
        $if -f "src/include/autogen.h.in"
            push @CONFIGS, "src/include/autogen.h"
            push @extra_make_rules, "src/include/autogen.h: src/include/autogen.h.in"
            push @extra_make_rules, "\tperl maint/gen_init.pl"
            push @extra_make_rules, ""


        &call add_subdir_rule_block, src/glue/romio, src/glue/romio/all_romio_symbols.c
            push @t, "perl all_romio_symbols ../../mpi/romio/include/mpio.h.in"

    subcode: add_rule_cpi
        push @extra_make_rules, "cpi: "
        push @extra_make_rules, "\tmpicc -o cpi examples/cpi.c"
        push @extra_make_rules, ""
        
    subcode: add_rule_dep
        $if $opts{device} =~/ch4/
            $call add_ch4_dep

#---------------------------------------- 
subcode: mpich_configure
    $call @hack_MPI_OFFSET
    $if !-f "subsys_include.m4"
        $call stage, maint/gen_subcfg_m4
        system "perl maint/gen_subcfg_m4"
    $if !-f "configure"
        system "rm -f mymake/Makefile.orig"
        $call stage, Autoconf MPICH
        &call modify_frame, temporary
            $call modify_configure_ac
            system "autoreconf -ivf"
    $if !-f "mymake/Makefile.orig"
        $call stage, Configure MPICH
        system "rm -f Makefile"
        my $t = join ' ', @config_args
        $(if:0)
            $if $opts{device}=~/ofi/ and $t!~/with-libfabric/
                $t.= " --with-libfabric=embedded"
        $if !$ret
            $ret = system "./configure --with-pm=no $t" # we'll configure/build hydra separately
        $if !$ret
            $ret = system "mv Makefile mymake/Makefile.orig"
        $if !$ret
            $ret = system "mv libtool mymake/libtool.orig"
        $if !$ret
            $call patch_libtool, mymake/libtool.orig

    # -------------------
    subcode: hack_MPI_OFFSET
        my $t = `uname -m`
        $if $t=~/x86_64/
            $ENV{FORTRAN_MPI_OFFSET}="integer*8"
    # -------------------
    subcode: modify_configure_ac
        $call patch_confdb_subcfg
        &call modify, configure.ac
            $if $l=~/AC_CONFIG_SUBDIRS/
                next
            $elif $l=~/^\s*HWLOC_/
                next
        &call modify, Makefile.am
            $if $l=~/ACLOCAL_AMFLAGS/
                $l ="ACLOCAL_AMFLAGS = -I confdb\n"
        $if $opts{device}=~/ch3/
            $call patch_configure_ch3
        $else
            $if -f "src/mpid/ch4/shm/ipc/xpmem/subconfigure.m4"
                $call hack_configure_xpmem

    subcode: patch_confdb_subcfg
        my $flag
        &call modify, confdb/aclocal_subcfg.m4
            $if $l=~/^AC_DEFUN\(\[PAC_CONFIG_SUBDIR_ARGS/
                $flag=1
            $elif $flag and $l=~/^\]\)/
                $l = ":])" # NOOP
                $flag=0
            $elif $flag
                next

    subcode: patch_configure_ch3
        my $flag
        &call modify, src/mpid/ch3/subconfigure.m4
            $if $l=~/AC_MSG_CHECKING.*OpenPA/
                $flag=1
            $elif $flag and $l=~/AC_C_BIGENDIAN/
                $flag=0
            $elif $flag
                next

    subcode: hack_configure_xpmem
        my $skip_xpmem=1
        $foreach $a in @config_args
            $if $a=~/--with-xpmem/
                $skip_xpmem = 0
        $if $skip_xpmem
            &call modify, src/mpid/ch4/shm/ipc/xpmem/subconfigure.m4
                $if $l=~/AM_CONDITIONAL.*BUILD_SHM_IPC_XPMEM.*build_ch4_shm_ipc_xpmem/
                    $l=~s/test .* ".*"/false/

#---------------------------------------- 
subcode: patch_sizeof_atomic
    $if -f "src/mpl/include/mpl_atomic.h"
        &call open_w, "mymake/t.c"
            $(set:print_to=Out)
            $print #include "mpl_atomic.h"
            $print #include <pthread.h>
            $print "pthread_mutex_t MPL_emulation_lock;"
            $print "int main() { return sizeof(MPL_atomic_ptr_t); }"

        my $CC = get_make_var("CC")
        system "$CC -Imymake/mpl/include mymake/t.c -o mymake/t"
        system "mymake/t"
        my $ret = $? >> 8;

        $config_defines{SIZEOF_MPL_ATOMIC_PTR_T} = $ret
    $config_defines{SIZEOF_OPA_PTR_T} = 8  # hack

subcode: patch_atomic_nolocal
    my $lock_based_atomics
    &call open_r, "mymake/mpl/include/mplconfig.h"
        $if /^#define MPL_USE_LOCK_BASED_PRIMITIVES/  
            $lock_based_atomics = 1
            last
    $if $lock_based_atomics
        $config_defines{ENABLE_NO_LOCAL} = 1
