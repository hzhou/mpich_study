include: macros_mymake/mpif_h.def
subcode: config_init_mpich
    $config_in = "$mymake_dir/config_templates/mpichconf.h"
    $config_out = "src/include/mpichconf.h"

subcode: config_mpich
    my %make_conds
    $call ac_init, MPICH, $version, discuss@mpich.org, mpich, http://www.mpich.org/

    $call set_config_defines
    $call patch_mpicc_etc
    $call patch_mpi_h
    $call patch_mpir_ext_h
    $call patch_mpichinfo_h
    $if !$opts{disable_cxx}
        $call patch_mpicxx_h
    $if !$opts{disable_fortran}
        $call load_mpi_h, src/include/mpi.h
        my $dir="src/binding/fortran/mpif_h"
        $call write_mpif_h, $dir/mpif.h
        my $dir="src/binding/fortran/use_mpi"
        $call patch_mpif90model_h
        $call write_mpi_constants_f90, $dir/mpi_constants.f90
        my %confs
        $confs{WTIME_DOUBLE_TYPE} = "REAL*8"
        $confs{SIZEOF_FC_INTEGER} = $sizeof_hash{INTEGER}
        $confs{SIZEOF_FC_REAL} = $sizeof_hash{REAL}
        $confs{SIZEOF_FC_DOUBLE_PRECISION} = $sizeof_hash{DOUBLE_PRECISION}
        $confs{SIZEOF_FC_CHARACTER} = $sizeof_hash{CHARACTER}
        my $dir="src/binding/fortran/use_mpi_f08"
        $call write_f08_types, $dir/mpi_f08_types.f90
        $call write_f08_c_interface_types, $dir/mpi_c_interface_types.f90
        $call write_f08_constants, $dir/mpi_f08_compile_constants.f90
        $call write_f08_link_constants_f90, $dir/mpi_f08_link_constants.f90
    $if $opts{"enable-mpi-abi"}
        $make_conds{BUILD_ABI_LIB} = 1
    $call set_make_conds

    # if 64-bit
    $sizeof_hash{OPA_PTR_T} = 8

    subcode: set_config_defines
        $call AC_USE_SYSTEM_EXTENSIONS
        my %temp
        $call init_temp_defines
        $foreach %temp
            $if !exists $config_defines{$k}
                # $print set $k -> $v
                $config_defines{$k} = $v

    # ----------------------
    subcode: init_temp_defines
        $temp{HAVE_MPICHCONF}=1

        # features
        $(for:nem,recvq,rma,dims)
            $temp{uc("ENABLE_PVAR_$1")} = 0
        $temp{HAVE_TAG_ERROR_BITS} = 1
        $temp{USE_PMI_PORT} = 1
        $temp{HAVE_NAMEPUB_SERVICE} = 1
        $temp{HAVE_HWLOC} = 1

        $if $opts{"disable-error-checking"}
            NOOP
        $else
            $temp{HAVE_ERROR_CHECKING}='MPID_ERROR_LEVEL_RUNTIME'
        $temp{MPICH_ERROR_MSG_LEVEL} = 'MPICH_ERROR_MSG__ALL'
        $temp{MPICH_IS_THREADED} = 1
        $temp{MPICH_THREAD_LEVEL} = 'MPI_THREAD_MULTIPLE'

        # fortran
        $temp{TRUE} = 1
        $temp{FALSE} = 0
        $temp{F77_NAME_LOWER_USCORE} = 1
        $temp{HAVE_AINT_DIFFERENT_THAN_FINT} = 1

        # PMI
        $temp{ENABLE_PMI1} = 1
        $temp{ENABLE_PMI2} = 1

        $if $opts{device}=~/ch4/
            $temp{MPICH_THREAD_GRANULARITY} = 'MPICH_THREAD_GRANULARITY__VCI'
            $temp{MPICH_THREAD_REFCOUNT} = 'MPICH_REFCOUNT__LOCKFREE'
            $if $opts{"without-ch4-shmmods"}
                $temp{MPIDI_CH4_DIRECT_NETMOD} = 1
            $if $opts{"enable-ch4-am-only"}
                $temp{MPIDI_ENABLE_AM_ONLY} = 1
            $temp{MPIDI_BUILD_CH4_LOCALITY_INFO}=1
            $temp{MPIDI_CH4U_USE_PER_COMM_QUEUE}=1
            $temp{MPIDI_CH4_MAX_VCIS}=64
            # $temp{MPIDI_CH4_RESERVED_VCIS}=0
            $temp{MPIDI_CH4_USE_MT_DIRECT}=1
            $temp{MPIDI_CH4_VCI_METHOD}='MPICH_VCI__COMM'
            $temp{HAVE_CH4_SHM_EAGER_IQUEUE}=1
            $temp{ENABLE_LOCAL_SESSION_INIT}=1
            $temp{ENABLE_THREADCOMM}=1

            $if !$temp{MPIDI_CH4_DIRECT_NETMOD}
                $if $opts{"with-cuda"}
                    $temp{MPIDI_CH4_SHM_ENABLE_GPU}=1
                    $make_conds{BUILD_SHM_IPC_GPU} = 1
                $if $opts{"with-xpmem"}
                    $temp{MPIDI_CH4_SHM_ENABLE_XPMEM}=1
                    $make_conds{BUILD_SHM_IPC_XPMEM} = 1

            $if $opts{device}=~/ch4:ucx/
                $temp{HAVE_CH4_NETMOD_UCX}=1
                $temp{HAVE_LIBUCP} = 1
                $temp{HAVE_UCP_PUT_NB}=1
                $temp{HAVE_UCP_GET_NB}=1
                $temp{CH4_UCX_RANKBITS}=16
            $elif $opts{device}=~/ch4:ofi/
                $temp{HAVE_CH4_NETMOD_OFI}=1
                $temp{MPIDI_OFI_VNI_USE_DOMAIN}=1
                $temp{HAVE_LIBFABRIC_NIC}=1
                $if $opts{device}=~/ch4:ofi:(\w+)/ ->$set
                    $set = uc($set)
                    $temp{"MPIDI_CH4_OFI_USE_SET_$set"}=1
                $else
                    $temp{MPIDI_CH4_OFI_USE_SET_RUNTIME}=1
                $temp{ENABLE_PVAR_MULTINIC}=0 
        $elif $opts{device}=~/ch3/
            $temp{MPICH_THREAD_GRANULARITY} = 'MPICH_THREAD_GRANULARITY__GLOBAL'
            $temp{MPICH_THREAD_REFCOUNT} = 'MPICH_REFCOUNT__NONE'
            $temp{CH3_RANK_BITS} = 16
            $temp{PREFETCH_CELL}=1
            $temp{USE_FASTBOX}=1
            $if $opts{device}=~/ch3:sock/
            $else
                $temp{MPID_NEM_INLINE}=1
                $temp{MPID_NEM_LOCAL_LMT_IMPL}="MPID_NEM_LOCAL_LMT_SHM_COPY"

        $if $opts{"with-datatype-engine"} eq "dataloop"
            $temp{MPICH_DATATYPE_ENGINE} = 'MPICH_DATATYPE_ENGINE_DATALOOP'
        $elif $opts{"with-datatype-engine"} eq "yaksa"
            $temp{MPICH_DATATYPE_ENGINE} = 'MPICH_DATATYPE_ENGINE_YAKSA'
        $elif $opts{device}=~/ch3/
            $temp{MPICH_DATATYPE_ENGINE} = 'MPICH_DATATYPE_ENGINE_DATALOOP'
        $else
            $temp{MPICH_DATATYPE_ENGINE} = 'MPICH_DATATYPE_ENGINE_YAKSA'

        $if $opts{device} =~ /ch4/
            $if -f "src/mpid/ch4/shm/posix/posix_eager_array.c.in"
                # post-fbox
                $call patch_ch4_posix
            $if -f "src/mpid/ch4/include/coll_algo_params.h.in"
                # v3.3.2
                $call patch_coll_algo_params_h
            $call patch_ch4_netmod
        $elif $opts{device} =~ /ch3/ and $opts{device}!~/:sock/
            $call patch_ch3_nemesis

        $if !$opts{disable_fortran}
            $temp{HAVE_NO_FORTRAN_MPI_TYPES_IN_C} = 1
            $temp{HAVE_FORTRAN_BINDING} = 1
            $if $sizeof_hash{VOID_P} > $sizeof_hash{INT}
                $temp{HAVE_AINT_LARGER_THAN_FINT} = 1
            $temp{MPIR_FC_REAL_CTYPE} = "float"
            $temp{MPIR_FC_DOUBLE_CTYPE} = "double"
            $call patch_setbot_c
        $if 0 # cxx
            $temp{HAVE_NAMESPACES}=1
            $temp{HAVE_NAMESPACE_STD}=1

    subcode: set_make_conds
        $call set_conds_off
        $call set_conds_optional
        &call open_W, mymake/make_conds.mpich
            $foreach $k in sort keys %make_conds
                $print $k: $make_conds{$k}

        subcode: set_conds_off
            # cc_weak ref. mymake_config.def
            $if $opts{cc_weak} eq "no"
                $make_conds{BUILD_PROFILING_LIB} = 1
            $else
                $make_conds{BUILD_PROFILING_LIB} = 0
            $make_conds{BUILD_COVERAGE} = 0
            $make_conds{MAINTAINER_MODE} = 0
            $make_conds{BUILD_BASH_SCRIPTS} = 0
            $make_conds{INSTALL_MPIF77} = 0

            $make_conds{BUILD_NAMEPUB_FILE}=0
            $make_conds{BUILD_NAMEPUB_PMI}=0
            $(for:HYDRA,HYDRA2,GFORKER,REMSHELL,UTIL)
                $make_conds{BUILD_PM_$1}=0
            $(for:HYDRA,GFORKER,REMSHELL)
                $make_conds{PRIMARY_PM_$1}=0

        subcode: set_conds_optional
            $opts{enable_shm} = 1
            # $call set_conds_off
            $if $opts{device} =~ /ch3/
                $make_conds{BUILD_CH3} = 1
                $if $opts{device} =~/ch3:sock/
                    $make_conds{BUILD_CH3_SOCK}=1
                    $make_conds{BUILD_CH3_UTIL_SOCK}=1
                $else
                    $make_conds{BUILD_CH3_NEMESIS}=1
                    $if $opts{device}=~/ofi/
                        $make_conds{BUILD_NEMESIS_NETMOD_OFI}=1
                    $else
                        $make_conds{BUILD_NEMESIS_NETMOD_TCP}=1
            $else
                $make_conds{BUILD_CH4} = 1
                $if $opts{device} =~/ch4:ofi/
                    $make_conds{BUILD_CH4_NETMOD_OFI} = 1
                $else $opts{device} =~/ch4:ucx/
                    $make_conds{BUILD_CH4_NETMOD_UCX} = 1
                    $if 0
                        $make_conds{BUILD_HCOLL} = 1
                $if $opts{"without-ch4-shmmods"}
                    $call @check_enable_shm

                $if $opts{enable_shm}
                    $make_conds{BUILD_CH4_SHM} = 1
                    $make_conds{BUILD_SHM_POSIX} = 1
                    $if -f "src/mpid/ch4/shm/posix/eager/iqueue/iqueue_pre.h"
                        $make_conds{BUILD_CH4_SHM_POSIX_EAGER_IQUEUE} = 1
                    $else
                        $make_conds{BUILD_CH4_SHM_POSIX_EAGER_FBOX} = 1

                    $if 0
                        $make_conds{BUILD_SHM_IPC_XPMEM} = 1
                $if 0
                    $make_conds{BUILD_CH4_COLL_TUNING} = 1

            $if $temp{MPICH_DATATYPE_ENGINE} eq "MPICH_DATATYPE_ENGINE_DATALOOP"
                $make_conds{BUILD_DATALOOP_ENGINE} = 1
            $elif $temp{MPICH_DATATYPE_ENGINE} eq "MPICH_DATATYPE_ENGINE_YAKSA"
                $make_conds{BUILD_YAKSA_ENGINE} = 1

            $(for:SCHED,THREAD,SELF)
                $make_conds{BUILD_MPID_COMMON_$1} = 1
            $if $opts{device}=~/ch4/
                $(for:SHM,BC,GENQ,STREAM_WORKQ)
                    $make_conds{BUILD_MPID_COMMON_$1} = 1
            $elif $opts{device}=~/ch3:sock/
                # NOOP
            $else # ch3:tcp
                $(for:SHM)
                    $make_conds{BUILD_MPID_COMMON_$1} = 1

            $if !$opts{disable_romio}
                $make_conds{BUILD_ROMIO} = 1

            $if !$opts{disable_cxx}
                $make_conds{BUILD_CXX_BINDING} = 1

            $if !$opts{disable_fortran}
                $make_conds{BUILD_F77_BINDING} = 1
                $make_conds{BUILD_FC_BINDING} = 1
                $if $opts{f08}
                    $make_conds{BUILD_F08_BINDING} = 1
                    $config_defines{HAVE_F08_BINDING} = 1
                $else
                    $config_defines{HAVE_F08_BINDING} = 0
            $else
                $(for:mpif_h,use_mpi, use_mpi_f08)
                    system "touch src/binding/fortran/$1/Makefile.mk"

            $if 1
                $make_conds{BUILD_PMI_SIMPLE} = 1
            $else
                $make_conds{BUILD_PMI_PMI2_SIMPLE}=1
                $make_conds{BUILD_PMI_BGQ}=0
            $if 1
                $make_conds{BUILD_NAMEPUB_PMI}=1
        # ----
        subcode: check_enable_shm
            $opts{enable_shm} = 1
            &call open_r, src/mpid/ch4/subconfigure.m4
                # ref PR #3645
                $if /AM_CONDITIONAL.*BUILD_CH4_SHM/
                    $opts{enable_shm} = 0
                    last

#---------------------------------------- 
subcode: patch_mpi_h
    my %confs
    $call set_mpi_misc
    $call set_mpi_maxes
    $call set_mpi_aint
    $call set_mpi_datatypes
    autoconf_file("src/include/mpi.h", \%confs)
    my $mpi_h_confs = \%confs

    subcode: set_mpi_misc
        $confs{MPICH_VERSION} = $version
        my %ext_hash=(a=>0, b=>1, rc=>2, p=>3);
        $if $version=~/^(\d+)\.(\d+)\.(\d+)/ -> $major, $minor, $rev
            $confs{MPICH_NUMVERSION} = sprintf("%d%02d%02d%d%02d", $major, $minor, $rev, 0, 0)
        $elif $version=~/^(\d+)\.(\d+)([a-z]+)(\d*)/ -> $major, $minor, $ext, $patch
            $confs{MPICH_NUMVERSION} = sprintf("%d%02d%02d%d%02d", $major, $minor, 0, $ext_hash{$ext}, $patch)

        $confs{MPIU_DLL_SPEC_DEF}="#define MPIU_DLL_SPEC"

        $confs{DISABLE_TAG_SUPPORT}="#define NO_TAGS_WITH_MODIFIERS 1"

    subcode: set_mpi_maxes
        $(for:PROCESSOR_NAME,LIBRARY_VERSION_STRING,ERROR_STRING and 128,8192,512)
            $if $ENV{MPID_MAX_$1}
                $confs{MPI_MAX_$1}=$ENV{MPID_MAX_$1}
            $else
                $confs{MPI_MAX_$1}=$2

    subcode: set_mpi_aint
        $sizeof_hash{AINT} = $sizeof_hash{VOID_P}
        $sizeof_hash{OFFSET} = $sizeof_hash{VOID_P}

        $if $sizeof_hash{VOID_P}==$sizeof_hash{INT}
            $confs{MPI_AINT} = "int"
            $confs{MPI_AINT_FMT_DEC_SPEC}='%d'
            $confs{MPI_AINT_FMT_HEX_SPEC}='%x'
        $elif $sizeof_hash{VOID_P}==$sizeof_hash{LONG}
            $confs{MPI_AINT} = "long"
            $confs{MPI_AINT_FMT_DEC_SPEC}='%ld'
            $confs{MPI_AINT_FMT_HEX_SPEC}='%lx'
        $elif $sizeof_hash{VOID_P}==$sizeof_hash{LONG_LONG}
            $confs{MPI_AINT} = "long long"
            $confs{MPI_AINT_FMT_DEC_SPEC}='%lld'
            $confs{MPI_AINT_FMT_HEX_SPEC}='%llx'
        
        $confs{MPI_FINT} = "int"

        $if $sizeof_hash{LONG} == 8
            $sizeof_hash{COUNT} = $sizeof_hash{LONG}
            $confs{MPI_COUNT} = "long"
        $else
            $sizeof_hash{COUNT} = $sizeof_hash{LONG_LONG}
            $confs{MPI_COUNT} = "long long"

        $confs{MPI_OFFSET_TYPEDEF} = "typedef $confs{MPI_AINT} MPI_Offset;"

    subcode: set_mpi_datatypes
        $if !$opts{disable_cxx}
            $confs{INCLUDE_MPICXX_H} = "#include \"mpicxx.h\""
        $if !$opts{disable_romio}
            $confs{HAVE_ROMIO} = "#include \"mpio.h\""

        $confs{BSEND_OVERHEAD} = $sizeof_hash{MPII_BSEND_DATA_T}

        $sizeof_hash{SIGNED_CHAR} = $sizeof_hash{CHAR}
        $sizeof_hash{BYTE} = $sizeof_hash{CHAR}
        $sizeof_hash{PACKED} = $sizeof_hash{CHAR}
        $sizeof_hash{WCHAR} = $sizeof_hash{WCHAR_T}

        $(for:CHAR,SHORT,INT,LONG,LONG_LONG)
            $sizeof_hash{UNSIGNED_$1} = $sizeof_hash{$1}
        $sizeof_hash{"2INT"} = $sizeof_hash{INT} * 2

        $sizeof_hash{"C_BOOL"} = $sizeof_hash{"BOOL"}
        $sizeof_hash{"C_FLOAT16"} = 2
        $(for:FLOAT,DOUBLE,LONG_DOUBLE)
            $sizeof_hash{"C_$1_COMPLEX"} = $sizeof_hash{"$1__COMPLEX"}
        # fortran
        $sizeof_hash{CHARACTER} = $sizeof_hash{CHAR}
        $sizeof_hash{INTEGER} = $sizeof_hash{INT}
        $sizeof_hash{REAL} = $sizeof_hash{FLOAT}
        $sizeof_hash{DOUBLE_PRECISION} = $sizeof_hash{DOUBLE}

        $(for:$(DT_basic_range) and $(DT_basic_set))
            $call set_datatype, $2, $1

        $(for:$(DT_pair_range) and $(DT_pair_set))
            $call set_pairtype, $2, $1

        # -- FORTRAN --
        $if !$opts{disable_fortran}
            $(for:$(DT_fortran_range) and $(DT_fortran_set))
                $call set_datatype, $2, $1
            # MPIR_INTERGER#_CTYPE
            $foreach $n in 1,2,4,8
                $foreach $type in "char", "short", "int", "long", "long long"
                    my $a = get_config_name($type)
                    $if $sizeof_hash{$a} == $n
                        $config_defines{"MPIR_INTEGER${n}_CTYPE"} = $type
                        last
            $foreach $n in 4,8,16
                $foreach $type in "float", "double", "__float128"
                    my $a = get_config_name($type)
                    $if $sizeof_hash{$a} == $n
                        $config_defines{"MPIR_REAL${n}_CTYPE"} = $type
                        last
        $else
            $(for:$(DT_fortran_set))
                $call set_datatype_null, $1

        # -- CXX --
        $if !$opts{disable_cxx}
            $(for:$(DT_cxx_range) and $(DT_cxx_set))
                $call set_datatype_cxx, $2, $1
        $else
            $(for:$(DT_cxx_set))
                $call set_datatype_null_r, $1

        $(for:$(DT_extra_range) and $(DT_extra_set))
            $call set_datatype, $2, $1

        $(for:$(DT_aint_range) and $(DT_aint_set))
            $call set_datatype_aint, $2, $1

        $(for:$(DT_x_range) and $(DT_x_set))
            $call set_datatype_x, $2, $1

        # -- aliases --
        $call set_datatype_alias, MPI_UNSIGNED, MPI_UNSIGNED_INT
        $call set_datatype_alias, MPI_LONG_LONG_INT, MPI_LONG_LONG
        $call set_datatype_alias, MPIR_CXX_FLOAT_COMPLEX, MPIR_CXX_COMPLEX
        
    subcode: set_datatype(T, idx)
        $(if:T!=-)
            $(if:T~(INTEGER|REAL|COMPLEX)\d+)
                $confs{MPI_$(T)} = sprintf("0x4c00%02x$(idx)", $(T:regex:(\d+)))
            $(else)
                $confs{MPI_$(T)} = sprintf("0x4c00%02x$(idx)", $sizeof_hash{"$(T)"})
    subcode: set_pairtype(T, idx) 
        $(if:T!=-)
            $confs{MPI_$(T)} = "0x8c0000$(idx)"

    subcode: set_datatype_cxx(T, idx)
        $(if:T!=-)
            $confs{MPIR_$(T)} = sprintf("0x4c00%02x$(idx)", $sizeof_hash{"$(T)"})

    subcode: set_datatype_aint(T, idx)
        $(if:T!=-)
            $confs{MPI_$(T)_DATATYPE} = sprintf("0x4c00%02x$(idx)", $sizeof_hash{$(T)})

    subcode: set_datatype_x(T, idx)
        $(if:T!=-)
            $confs{MPIX_$(T)} = sprintf("0x4c00%02x$(idx)", $sizeof_hash{"$(T)"})

    subcode: set_datatype_null(T)
        $(if:T!=-)
            $confs{MPI_$(T)} = "MPI_DATATYPE_NULL"
    subcode: set_datatype_null_r(T)
        $(if:T!=-)
            $confs{MPIR_$(T)} = "MPI_DATATYPE_NULL"

    subcode: set_datatype_alias(a, b)
        $confs{$(a)} = $confs{$(b)}

#---------------------------------------- 
subcode: patch_mpir_ext_h
    my %confs
    $confs{HAVE_ERROR_CHECKING} = 1
    autoconf_file("src/include/mpir_ext.h", \%confs)

subcode: patch_mpichinfo_h
    my %confs
    $confs{CONFIGURE_ARGS_CLEAN}= $opts{config_args}
    $confs{MPICH_RELEASE_DATE} = "unreleased development copy"
    $confs{DEVICE} = $opts{device}
    $confs{CC} = $ENV{CC}
    $confs{CXX} = $ENV{CXX}
    $confs{F77} = $ENV{F77}
    $confs{FC} = $ENV{FC}
    $confs{CFLAGS} = ""
    $confs{MPICH_CUSTOM_STRING}=""
    $confs{MPICH_ABIVERSION} = "0:0:0"
    autoconf_file("src/include/mpichinfo.h", \%confs)

subcode: patch_mpicxx_h
    my %confs
    $confs{HAVE_CXX_EXCEPTIONS}=0
    $if !$opts{disable_fortran}
        $confs{FORTRAN_BINDING} = 1
    $else
        $confs{FORTRAN_BINDING} = 0

    $(for:33-36%x and $(cxx_set))
        $call set_datatype_cxx, $2, $1

    autoconf_file("src/binding/cxx/mpicxx.h", \%confs)

    macros:
        cxx_set: CXX_BOOL,CXX_COMPLEX,CXX_DOUBLE_COMPLEX,CXX_LONG_DOUBLE_COMPLEX

    subcode: set_datatype_cxx(T, idx)
        $confs{MPIR_$(T)} = sprintf("0x4c00%02x$(idx)", $sizeof_hash{"$(T)"})

subcode: patch_mpif_h

#---------------------------------------- 
subcode: patch_mpicc_etc
    my %confs
    $confs{BASH_SHELL} = "/bin/bash"
    $confs{LDFLAGS} = $ENV{LDFLAGS}
    $if $opts{"with-cuda"}
        my $p = $opts{"with-cuda"}
        $confs{LDFLAGS} .= "  -Wl,-rpath -Wl,$p/lib64"
    $confs{LIBS} = $ENV{LIBS}
    $confs{MPILIBNAME} = "mpi"
    $confs{PMPILIBNAME} = "pmpi"
    $confs{MPIABILIBNAME} = "mpi_abi"
    $if $opts{cc_weak} eq "no"
        $confs{LPMPILIBNAME} = "-lpmpi"
    $else
        $confs{LPMPILIBNAME} = ""
    $confs{MPICH_VERSION} = $version
    $confs{CC} = $opts{CC}
    $confs{CXX} = $opts{CXX}
    $confs{FC} = $opts{FC}
    $confs{FCINC} = "-I"
    $confs{with_wrapper_dl_type} = "runpath"
    $confs{INTERLIB_DEPS} = "yes"
    $confs{MPIFCLIBNAME} = "mpifort"

    $(for:C,CPP,LD)
        $confs{WRAPPER_$1FLAGS}=""
    $confs{WRAPPER_LIBS} = ""

    $if $opts{CFLAGS}=~/-fsanitize=(address|undefined)/
        $confs{WRAPPER_CFLAGS} .= " -fsanitize=$1"

    $call load_shlib_conf
    $confs{PREFIX}=$opts{prefix}
    $confs{EXEC_PREFIX}="$opts{prefix}/bin"
    $confs{SYSCONFDIR}="$opts{prefix}/etc"
    $confs{INCLUDEDIR}="$opts{prefix}/include"
    $confs{LIBDIR}="$opts{prefix}/lib"

    $foreach $p in "cc", "cc_abi", "cxx", "f77", "fort"
        my $P = uc($p)
        $(for:C,CPP,LD)
            $confs{"MPICH_MPI${P}_$1FLAGS"}=""
        $confs{"MPICH_MPI${P}_LIBS"}=""

        my $script = "src/env/mpi$p.bash.in"
        $if $opts{sh}
            $script = "src/env/mpi$p.sh.in"
        $if -f $script
            $call get_file_lines, $script
            &call open_W, mymake/mpi$p
                $foreach $l in @lines
                    $l=~s/\@(\w+)\@/$confs{$1}/g
                    $l=~s/__(\w+)_TO_BE_FILLED_AT_INSTALL_TIME__/$confs{$1}/
                    print Out $l

    subcode: load_shlib_conf
        my $tag="cc"
        &call open_r, libtool
            $if /^wl=/
                $confs{"${tag}_shlib_conf"} .= $_
            $if /^hardcode_libdir_flag_spec=/
                $confs{"${tag}_shlib_conf"} .= $_
                $call load_new_dtags, $confs{"${tag}_shlib_conf"}
            $elif /# ### BEGIN LIBTOOL TAG CONFIG: (\w+)/
                $tag = lc($1)

    subcode: load_new_dtags(a)
        $if $opts{uname}=~/Linux/i
            # TODO: check $LD --help
            my $dtags="enable_dtags_flag=\"\\\$wl--enable-new-dtags\"\n"
            $dtags  .="disable_dtags_flag=\"\\\$wl--disble-new-dtags\"\n"
            $(a) .= $dtags

subcode: patch_setbot_c
    my %confs
    $confs{MPI_STATUS_SIZE} = 5
    $confs{CMB_1INT_ALIGNMENT}='__attribute__((aligned(16)))'
    $confs{CMB_STATUS_ALIGNMENT}='__attribute__((aligned(32)))'
    autoconf_file("src/binding/fortran/mpif_h/setbot.c", \%confs)
    autoconf_file("src/binding/fortran/mpif_h/setbotf.f", \%confs)

#---------------------------------------- 
subcode: get_c_sizeof_mpich
    get_sizeof(["_Bool"], ["stdio.h"]);
    get_sizeof(["__float128"], ["stdio.h"]);
    get_sizeof(["_Float16"], ["stdio.h"]);
    get_sizeof(["wchar_t"], ["stdio.h", "stddef.h"]);
    $config_defines{SIZEOF__FLOAT16}=0
    $config_defines{SIZEOF___FLOAT128}=0
    $config_defines{SIZEOF_WCHAR_T}=0

    $if $sizeof_hash{VOID_P}==$sizeof_hash{INT}
        # 32-bit
        $config_defines{MAX_ALIGNMENT} = 4
    $else
        # 64-bit
        $config_defines{MAX_ALIGNMENT} = 16

    $config_defines{MPIR_Ufint} = "unsigned int"
    my $MPI_AINT
    $if $sizeof_hash{VOID_P}==$sizeof_hash{INT}
        $MPI_AINT = "int"
        $config_defines{MPIR_AINT_MAX} = 'INT_MAX'
    $elif $sizeof_hash{VOID_P}==$sizeof_hash{LONG}
        $MPI_AINT = "long"
        $config_defines{MPIR_AINT_MAX} = 'LONG_MAX'
    $elif $sizeof_hash{VOID_P}==$sizeof_hash{LONG_LONG}
        $MPI_AINT = "long long"
        $config_defines{MPIR_AINT_MAX} = 'LONG_LONG_MAX'

    $if $sizeof_hash{LONG} == $sizeof_hash{LONG_LONG}
        $config_defines{MPIR_COUNT_MAX} = 'LONG_MAX'
        $config_defines{MPIR_OFFSET_MAX} = 'LONG_MAX'
        $config_defines{MPIR_Ucount} = "unsigned long"
    $else
        $config_defines{MPIR_COUNT_MAX} = 'LONG_LONG_MAX'
        $config_defines{MPIR_OFFSET_MAX} = 'LONG_LONG_MAX'
        $config_defines{MPIR_Ucount} = "unsigned long long"
    # $config_defines{HAVE_LONG_LONG} = 1
    $config_defines{HAVE_LONG_LONG_INT} = 1

    $sizeof_hash{MPII_BSEND_DATA_T} = 96

#---------------------------------------- 
subcode: make_mpich
    $make_vars{DEFAULT_INCLUDES} = ("-I. -I./src/include")  # path to config.h
    $if $opts{"with-cuda"}
        my $p = $opts{"with-cuda"}
        $make_vars{LDFLAGS} .= "  -Wl,-rpath -Wl,$p/lib64"

    $call set_mymake_DO
    $call add_rule_pm

    $opts{so_version}="0:0:0"
    $call mpich_make_setup

    $autoconf_vars{MPILIBNAME} = "mpi"
    $autoconf_vars{PMPILIBNAME} = "pmpi"
    $autoconf_vars{MPIABILIBNAME} = "mpi_abi"
    $autoconf_vars{MPIFCLIBNAME} = "mpifort"
    $autoconf_vars{MPICXXLIBNAME} = "mpicxx"

    $if $opts{cc_weak} ne "no"
        $autoconf_vars{VISIBILITY_CFLAGS} = "-fvisibility=hidden"

    $if !$opts{"disable-ch4-netmod-inline"}
        $if $opts{device} =~/ch4:ofi/
            $make_vars{CPPFLAGS} = "-DNETMOD_INLINE=__netmod_inline_ofi__ "
        $elif $opts{device} =~/ch4:ucx/
            $make_vars{CPPFLAGS} = "-DNETMOD_INLINE=__netmod_inline_ucx__ "

    $make_vars{CPPFLAGS}.="-D_REENTRANT "
    # $make_vars{CPPFLAGS}.="-I$(Impl) -I$(Ihwloc) -I$(Iyaksa) -I$(Ijsonc)"
    # $make_vars{CPPFLAGS} .= $I_list

    $call load_mpich_conds
    load_automake("Makefile.am", \%conds)

    $if !$opts{disable_cxx}
        $call config_cxx
    $if !$opts{disable_fortran}
        $call config_fortran
        my $U="src/binding/fortran"
        # ----
        $make_vars{AM_FCFLAGS} = "-I$U/use_mpi"
        my @mods
        $(for:mpi,mpi_sizeofs,mpi_constants,mpi_base)
            push @mods, "$U/use_mpi/$1.mod"
        $if $opts{f08}
            $(for:pmpi_f08,mpi_f08)
                push @mods, "$U/use_mpi/$1.mod"
            $(for:callbacks,compile_constants,link_constants,types)
                push @mods, "$U/use_mpi/mpi_f08_$1.mod"
            $(for:cdesc,glue,nobuf,types)
                push @mods, "$U/use_mpi/mpi_c_interface_$1.mod"
        $make_vars{modinc_HEADERS} = join(' ', @mods)

    $if 1 # linux
        $make_vars{lib_libmpi_la_LIBADD} .= " $L_list"

    $if $opts{"with-xpmem"}
        my $p = $opts{"with-xpmem"}
        $if $p=~/\w+\//
            $make_vars{CPPFLAGS} .= " -I$p/include"
            $make_vars{LDFLAGS} .= " -L$p/lib64"
        $make_vars{LIBS} .= " -lxpmem"

    dump_makefile("Makefile", "mymake")

    # ------------------------
    subcode: load_mpich_conds
        my %conds
        &call open_r, mymake/make_conds.mpich
            $if /^(\w+):\s*([01])/
                $conds{$1} = $2

    subcode: set_mymake_DO
        $(for:stage,clean,errmsg,cvars,logs,config,makefile)
            push @extra_make_rules, "DO_$1 = perl $opts{mymake}_$1.pl"
        push @extra_make_rules, ""
        push @extra_make_rules, ".PHONY: test cvars errmsg realclean"
        $(for:cvars,errmsg)
            $call push_autogen_rule, $1, $1
        push @extra_make_rules, "test:"
        push @extra_make_rules, "\t\x24(DO_config) dtpools && \x24(DO_makefile) dtpools && \x24(DO_config) test && \x24(DO_makefile) test"
        push @extra_make_rules, ""

        push @extra_make_rules, "realclean: clean"
        push @extra_make_rules, "\t\x24(DO_clean)"
        push @extra_make_rules, ""

    subcode: add_rule_pm
        # $call add_rule_gforker
        # $call add_rule_remshell
        $call add_rule_hydra, hydra
        # $call add_rule_hydra, hydra2

    subcode: add_rule_hydra(name)
        my $add="$(Lmpl) \x24(MODDIR)/$(Lhwloc) src/pm/hydra/Makefile"
        push @extra_make_rules, ".PHONY: $(name) $(name)-install"
        push @extra_make_rules, ""
        push @extra_make_rules, "src/pm/hydra/Makefile:"
        push @extra_make_rules, "\t\x24(DO_config) hydra && \x24(DO_makefile) hydra"
        push @extra_make_rules, ""
        push @extra_make_rules, "$(name): $add"
        push @extra_make_rules, "\t(cd src/pm/$(name) && \x24(MAKE) )"
        push @extra_make_rules, ""
        push @extra_make_rules, "$(name)-install: $add"
        push @extra_make_rules, "\t(cd src/pm/$(name) && \x24(MAKE) install )"
        push @extra_make_rules, ""

#---- misc autoconf files ------------------------------------ 
subcode: patch_ch4_posix
    my $eager_modules
    $if -f "src/mpid/ch4/shm/posix/eager/iqueue/iqueue_pre.h"
        $eager_modules="iqueue"
    $else
        $eager_modules="fbox"
    $if $opts{"with-ch4-posix-eager-modules"}
        $eager_modules = $opts{"with-ch4-posix-eager-modules"}
    my @eager_list = split /\s+/, $eager_modules
    
    my %confs
    $confs{ch4_posix_eager_array_sz} = @eager_list
    # only 1
    my $a = $eager_list[0]
    $confs{ch4_posix_eager_func_array} = "\&MPIDI_POSIX_eager_${a}_funcs"
    $confs{ch4_posix_eager_strings} = "\"${a}\""
    $confs{ch4_posix_eager_func_decl} = "MPIDI_POSIX_eager_${a}_funcs"

    $confs{ch4_posix_eager_pre_include} = "#include \"../${a}/${a}_pre.h\""
    $confs{ch4_posix_eager_recv_transaction_decl} = "MPIDI_POSIX_eager_${a}_recv_transaction_t ${a};"

    autoconf_file("src/mpid/ch4/shm/posix/posix_eager_array.c", \%confs)
    autoconf_file("src/mpid/ch4/shm/posix/eager/include/posix_eager_pre.h", \%confs)

subcode: patch_ch4_netmod
    my @net_list
    $if $opts{device}=~/ch4:ofi/
        push @net_list, "ofi"
    $elif $opts{device} =~/ch4:ucx/
        push @net_list, "ucx"

    $if @net_list
        my %confs
        $confs{ch4_nets_array_sz} = @net_list
        # only 1
        my $a = $net_list[0]
        my $A = uc($a)
        $confs{ch4_nets_func_array} = "\&MPIDI_NM_${a}_funcs"
        $confs{ch4_nets_native_func_array} = "\&MPIDI_NM_native_${a}_funcs"
        $confs{ch4_nets_strings} = "\"${a}\""
        $confs{ch4_nets_func_decl} = "MPIDI_NM_${a}_funcs"
        $confs{ch4_nets_native_func_decl} = "MPIDI_NM_native_${a}_funcs"

        $confs{ch4_netmod_pre_include} = "#include \"../netmod/${a}/${a}_pre.h\""
        $confs{ch4_netmod_amrequest_decl} = "MPIDI_${A}_am_request_t $a;"
        $(for:request,comm,dt,win,addr,op)
            $confs{ch4_netmod_$1_decl} = "MPIDI_${A}_$1_t $a;"

        autoconf_file("src/mpid/ch4/src/mpid_ch4_net_array.c", \%confs)
        autoconf_file("src/mpid/ch4/include/netmodpre.h", \%confs)

subcode: patch_ch3_nemesis
    my %confs
    my $a = "tcp"
    $if $opts{device} =~/ch3:.*:ofi/
        $a = "ofi"
    $confs{nemesis_nets_array_sz} = 1
    $confs{nemesis_nets_func_decl} = "MPIDI_nem_${a}_funcs"
    $confs{nemesis_nets_func_array} = "\&MPIDI_nem_${a}_funcs"
    $confs{nemesis_nets_strings} = "\"$a\""

    my $A=uc($a)
    $confs{nemesis_nets_macro_defs} = "#define MPIDI_NEM_${A} 0"

    autoconf_file("src/mpid/ch3/channels/nemesis/src/mpid_nem_net_array.c", \%confs)
    autoconf_file("src/mpid/ch3/channels/nemesis/include/mpid_nem_net_module_defs.h", \%confs)

subcode: patch_coll_algo_params_h
    my $net
    $if $opts{device}=~/ch4:ofi/
        $net="ofi"
    $elif $opts{device}=~/ch4:ucx/
        $net="ucx"
    my $NET=uc($net)

    my %confs
    $confs{ch4_netmod_coll_globals_default}="#include \"../netmod/${net}/${net}_coll_globals_default.c\""
    $confs{ch4_netmod_coll_params_include} ="#include \"../netmod/${net}/${net}_coll_params.h\""
    &call open_r, src/mpid/ch4/include/coll_algo_params.h.in
        $if /\@ch4_netmod_(\w+)_params_decl\@/
            my $COLL=uc($1)
            my $key = "ch4_netmod_".$1."_params_decl"
            $confs{$key} = "MPIDI_${NET}_${COLL}_PARAMS_DECL;"

    autoconf_file("src/mpid/ch4/include/coll_algo_params.h", \%confs)
    autoconf_file("src/mpid/ch4/src/ch4_coll_globals_default.c", \%confs)

#---- list of contants ----
macros:
    status_fields: count_lo, count_hi_and_cancelled, MPI_SOURCE, MPI_TAG, MPI_ERROR

    HANDLE_LIST: Comm, Win, File, Group, Op, Datatype, Request, Info, Errhandler, Message, Session
    OP_SET: MAX, MIN, SUM, PROD, LAND, BAND, LOR, BOR, LXOR, BXOR, MINLOC, MAXLOC, REPLACE, NO_OP

macros:
    DT_basic_range: 01-19%02x
    DT_basic_set: CHAR, UNSIGNED_CHAR, SHORT, UNSIGNED_SHORT, INT, UNSIGNED_INT, LONG, UNSIGNED_LONG, LONG_LONG, FLOAT, DOUBLE, LONG_DOUBLE, BYTE, WCHAR, PACKED, LB, UB, -,-,-,-, 2INT, -, SIGNED_CHAR, UNSIGNED_LONG_LONG
    # DT_alias: UNSIGNED, LONG_LONG_INT

    DT_fortran_range: 1a-32%02x
    DT_fortran_set: CHARACTER, INTEGER, REAL, LOGICAL, COMPLEX, DOUBLE_PRECISION, 2INTEGER, 2REAL, DOUBLE_COMPLEX, 2DOUBLE_PRECISION, 2COMPLEX, 2DOUBLE_COMPLEX, -, REAL4,COMPLEX8,REAL8,COMPLEX16,REAL16,COMPLEX32,INTEGER1,-,INTEGER2,INTEGER4,INTEGER8,INTEGER16

    DT_cxx_range: 33-36%02x
    DT_cxx_set: CXX_BOOL,CXX_COMPLEX,CXX_DOUBLE_COMPLEX,CXX_LONG_DOUBLE_COMPLEX

    DT_extra_range: 37-42%02x
    DT_extra_set: INT8_T,INT16_T,INT32_T,INT64_T,UINT8_T,UINT16_T,UINT32_T,UINT64_T,C_BOOL,C_FLOAT_COMPLEX,C_DOUBLE_COMPLEX,C_LONG_DOUBLE_COMPLEX

    DT_aint_range: 43-45%02x
    DT_aint_set: AINT,OFFSET,COUNT

    DT_x_range: 46
    DT_x_set: C_FLOAT16

    DT_pair_range: 00-04%02x
    DT_pair_set: FLOAT_INT, DOUBLE_INT, LONG_INT, SHORT_INT, LONG_DOUBLE_INT

    DT_ALL_SET: $(DT_basic_set), $(DT_fortran_set), $(DT_cxx_set), $(DT_extra_set), $(DT_aint_set), $(DT_x_set), $(DT_pair_set)
