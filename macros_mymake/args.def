subcode: _autoload
    $use Cwd
    my $pwd=getcwd()

#- findout mymake directory
subcode: set_mymake
    $if $0=~/^(\/.*)\//
        $opts{mymake} = $1
    $elif $0=~/^(.*)\//
        $opts{mymake} .= "$pwd/$1"
    $opts{mymake} .="/mymake"

#- cmdline, sort out options 
subcode: parse_args
    $global %opts, %defines
    $global @config_args
    $call @set_opts_default
    $call @filter_ARGV
    $call @load_last_ARGV
    $call parse_ARGV
    $call filter_define_args
    $map opt_set, srcdir, moddir, prefix
    $call set_prefix
    $call set_moddir
    $call probe_srcdir

    subcode: set_moddir
        my $mod_tarball
        $if $ENV{MODTARBALL}
            $mod_tarball = $ENV{MODTARBALL}
        $elif -e "modules.tar.gz"
            $mod_tarball = "modules.tar.gz"
        $elif -e "mymake/modules.tar.gz"
            $mod_tarball = "mymake/modules.tar.gz"
        # --------------
        $if $ENV{MODDIR}
            $opts{moddir} = $ENV{MODDIR}
        $elif -d "mymake/hwloc"
            $opts{moddir} = "$pwd/mymake"
        $elif -e $mod_tarball
            $opts{moddir} = "$pwd/mymake"
            $call do_cmd, mkdir -p $opts{moddir}
            $call do_cmd, tar -C $opts{moddir} -xf $mod_tarball
        $else
            die "moddir not set\n"

    subcode: probe_srcdir
        NOOP
        $(for:.,..,../..,../../..)
            $case -f "$1/maint/version.m4"
                $srcdir = "$1"
        $if !$srcdir
            die "srcdir not set\n"

    subcode: set_prefix
        $if !$opts{prefix}
            $opts{prefix}="$pwd/_inst"
            system "mkdir -p $opts{prefix}"

    subcode: opt_set(name)
        $global $$(name)
        $if $opts{$(name)}
            $$(name) = $opts{$(name)}

    subcode: set_opts_default
        $opts{V}=0
        $opts{ucx}="embedded"
        $opts{libfabric}="embedded"

    subcode: parse_ARGV
        $foreach $a in @ARGV
            $if $a=~/^--(prefix)=(.*)/
                $opts{$1}=$2
            $elif $a=~/^(\w+)=(.*)/
                $opts{$1}=$2
            $elif $a=~/^--/
                $if $a=~/^--with-device=(.*)/
                    $opts{device}=$1
                    push @config_args, $a
                $elif $a=~/^--with-pm=(.*)/
                    $opts{pm}=$1
                    # push @config_args, $a
                $elif $a=~/--disable-(romio|cxx|fortran)/
                    $opts{"disable_$1"}=1
                    $opts{"enable_$1"}=0
                    push @config_args, $a
                $elif $a=~/--enable-fortran=(\w+)/
                    $opts{disable_fortran}=0
                    $opts{enable_fortran}=$1
                    push @config_args, $a
                $elif $a=~/--with-atomic-primitives=(.*)/
                    $opts{openpa_primitives} = $1
                $elif $a=~/--enable-strict/
                    $opts{enable_strict} = 1
                    push @config_args, $a
                $elif $a=~/--enable-izem-queue/
                    $opts{enable_izem}=1
                    push @config_args, $a
                $elif $a=~/--with-(ucx|libfabric|argobots)=(.*)/
                    $opts{$1}=$2
                    push @config_args, $a
                $call @filter_defines
                $else
                    push @config_args, $a

        $(for:CC,CXX,F77,FC)
            $if $opts{$1}
                $ENV{$1}=$opts{$1}

#----------------------
subcode: filter_ARGV
    my $cnt_else = 0
    $foreach $a in @ARGV
        $if $a=~/V=1/
            $opts{V} = 1
        $call @filter_config_defines
        $else
            $cnt_else++

    $if !$cnt_else
        @ARGV = ()

#----------------------
subcode: load_last_ARGV
    my $need_save_args
    $if !@ARGV && -f "mymake/args"
        $call get_file_in_t, mymake/args
        chomp $t
        @ARGV = split /\s+/, $t
        $print loading last ARGV: @ARGV
    $elif @ARGV
        # has to wait until mymake folder is made
        $need_save_args = 1

subcode: save_last_ARGV
    $if $need_save_args
        my $t = join(' ', @ARGV)
        &call open_w, mymake/args
            print Out $t, "\n"
        # TODO: only if non-trivial args
        system "rm -f mymake/Makefile.orig"
        system "rm -f $(Hmpl) $(Hopa)"

        $call save_opts

subcode: save_opts
    &call open_w, mymake/opts
        $foreach $k in sort keys %opts
            print Out "$k: $opts{$k}\n"

subcode: load_opts
    $global %opts
    &call open_r, mymake/opts
        if /^(\w+): (.*)/
            $opts{$1} = $2

