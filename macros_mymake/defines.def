subcode: init_config_defines
    $global %config_defines, %config_cflags, %config_ldflags
    $global %hash_defines, %hash_define_vals
    $call init_opt, disable-ch4-ofi-ipv6, MPIDI_CH4_OFI_SKIP_IPV6
    $call init_opt, enable-legacy-ofi,    MPIDI_ENABLE_LEGACY_OFI
    $call init_opt, enable-ch4-am-only,   MPIDI_ENABLE_AM_ONLY
    $call init_opt, with-ch4-max-vcis,    MPIDI_CH4_MAX_VCIS
    $call init_opt, with-ch4-rank-bits,   CH4_RANK_BITS
    $call init_opt, enable-nolocal,       ENABLE_NO_LOCAL
    $call init_opt, enable-izem-queue,    ENABLE_IZEM_QUEUE

    $call init_opt_both, enable, ofi-domain, MPIDI_OFI_VNI_USE_DOMAIN, 1, undef

    &call init_opt_vals, enable-thread-cs, MPICH_THREAD_GRANULARITY
        "default" => "MPICH_THREAD_GRANULARITY__GLOBAL",
        "global" => "MPICH_THREAD_GRANULARITY__GLOBAL",
        "per-vci" => "MPICH_THREAD_GRANULARITY__VCI",
        "per-object" => "MPICH_THREAD_GRANULARITY__POBJ",

    &call init_opt_vals, with-posix-mutex, MPL_POSIX_MUTEX_NAME
        "default" => "MPL_POSIX_MUTEX_NATIVE",
        "ticketlock" => "MPL_POSIX_MUTEX_TICKETLOCK",

    &call init_opt_vals, enable-ch4-mt,  MPIDI_CH4_USE_MT_{DIRECT,HANDOFF,RUNTIME}
        "default" => "DIRECT",
        "direct"  => "DIRECT",
        "handoff" => "HANDOFF",
        "runtime" => "RUNTIME",

    &call init_opt_vals, enable-ch4-vci-method, MPIDI_CH4_VCI_METHOD
        "default" => "MPICH_VCI__ZERO",
        "zero" =>    "MPICH_VCI__ZERO",
        "communicator" => "MPICH_VCI__COMM",
        "tag" => "MPICH_VCI__TAG",
        "implicit" => "MPICH_VCI__IMPLICIT",
        "explicit" => "MPICH_VCI__EXPLICIT",

    subcode: init_opt(opt, name)
        $hash_defines{"$(opt)"} = "$(name)"

    subcode: init_opt_vals(opt, name)
        $hash_defines{"$(opt)"} = "$(name)"
        $hash_define_vals{"$(name)"} = {
            BLOCK
        };

    subcode: init_opt_both(enable, what, name, yes, no)
        $(if:enable=enable)
            $hash_defines{"enable-$(what)"} = "$(name)"
            $hash_defines{"disable-$(what)"} = "$(name)"
            $hash_define_vals{$(name)} = { enable => $(yes), disable => $(no) };
        $(else)
            $hash_defines{"with-$(what)"} = "$(name)"
            $hash_defines{"without-$(what)"} = "$(name)"
            $hash_define_vals{$(name)} = { with => $(yes), without => $(no) };


subcode: post_config_defines
    $if $config_defines{MPIDI_CH4_MAX_VCIS} > 1 and !$config_defines{MPIDI_CH4_VCI_METHOD}
        $config_defines{MPIDI_CH4_VCI_METHOD} = "MPICH_VCI__COMM"
    $if $config_defines{MPICH_THREAD_GRANULARITY} =~/VCI|POBJ/
        $config_defines{MPICH_THREAD_REFCOUNT} = "MPICH_REFCOUNT__LOCKFREE"
        $if !$config_defines{MPIDI_CH4_MAX_VCIS}
            $config_defines{MPIDI_CH4_MAX_VCIS} = 64
        $if !$config_defines{MPIDI_CH4_VCI_METHOD}
            $config_defines{MPIDI_CH4_VCI_METHOD} = "MPICH_VCI__COMM"
    $else
        $config_defines{MPICH_THREAD_REFCOUNT} = "MPICH_REFCOUNT__NONE"

subcode: filter_config_defines
    $elif $a=~/--((with|enable)-.*)=(.*)/ && $hash_defines{$1}
        my $name = $hash_defines{$1}
        my $val = $3
        $if $hash_define_vals{$name}
            $call get_hash_define_vals
        $else
            $config_defines{$name} = $val
    $elif $a=~/--((disable|enable|with|without)-.*)/ && $hash_defines{$1}
        my $name = $hash_defines{$1}
        my $val = 1
        $if $hash_define_vals{$name}
            $val = $hash_define_vals{$name}->{$2}
        $config_defines{$name} = $val

    # ------------------------------------------------------------
    $elif $a=~/--enable-g=(\S+)/ -> $g
        $if $1 eq "most"
            $g="dbg,log,mem,meminit,mutex,handle,handlealloc"
        $elif $1 eq "all"
            $g="dbg,log,mem,meminit,mutex,handle,handlealloc,memarena"
        $foreach $t in split /,/, $g
            $if $t eq "dbg" || $t eq "debug"
                $config_cflags{"-g"} = 1
            $elif $t eq "log"
                $config_defines{MPL_USE_DBG_LOGGING} = 1
            $elif $t eq "mem" or $t eq "memarena"
                $config_defines{MPL_USE_MEMORY_TRACING} = 1
                $config_defines{USE_MEMORY_TRACING} = 1
                $if $t eq "memarena"
                    $config_defines{MPICH_DEBUG_MEMARENA} = 1
            $elif $t eq "meminit"
                $config_defines{MPICH_DEBUG_MEMINIT} = 1
            $elif $t eq "mutex"
                $config_defines{MPICH_DEBUG_MUTEX} = 1
            $elif $t eq "handle"
                $config_defines{MPICH_DEBUG_HANDLES} = 1
            $elif $t eq "handlealloc"
                $config_defines{MPICH_DEBUG_HANDLEALLOC} = 1
            $elif $t eq "asan"
                $config_cflags{O}=1
                $(for:-g, -fsanitize=address, -fno-omit-frame-pointer)
                    $config_cflags{"$1"} = 1
                $config_ldflags{"-fsanitize=address"} = 1
            $elif $t eq "usan" or $t eq "ubsan"
                $(for:-fsanitize=undefined)
                    $config_cflags{"$1"} = 1
                $config_ldflags{"-fsanitize=undefined"} = 1
    # ------------------------------------------------------------
    $elif $a=~/--enable-fast=(\S+)/ -> $g
        $if $g =~ /O(\S)/
            $config_cflags{O} = $1
        $if $g=~/ndebug/
            $config_cflags{-DNDEBUG} = 1
        $elif $g=~/all|yes/
            $config_cflags{-DNDEBUG} = 1
            $config_cflags{O} = 2
        $elif $g=~/no|none/
            $config_cflags{O} = 0
        $elif $g=~/alwaysinline/
            $config_defines{MPL_ENABLE_ALWAYS_INLINE} = 1
        $elif $g=~/avx/
            $config_cflags{-mavx} = 1
            $config_defines{HAVE_MM256_STREAM_SI256} = 1
    # ------------------------------------------------------------
    $elif $a=~/--enable-strict/
        $(set:F=-Wall, -Wextra, -Wmissing-prototypes, -DGCC_WALL, -Wshadow, -Wmissing-declarations, -Wundef, -Wpointer-arith, -Wbad-function-cast, -Wwrite-strings, -Wnested-externs, -Winvalid-pch, -Wvariadic-macros, -Wtype-limits, -Werror-implicit-function-declaration, -Wstack-usage=262144)
        # $(set:F.=, -Wstrict-prototypes, -Wold-style-definition)
        $(set:F.=, -Wno-missing-field-initializers, -Wno-unused-parameter, -Wno-long-long, -Wno-endif-labels, -Wno-sign-compare, -Wno-multichar, -Wno-deprecated-declarations, -Wno-pointer-sign)
        $(for:$(F))
            $config_cflags{"$1"} = 1

    # -----------------------------
    subcode: get_hash_define_vals
        my $V = $hash_define_vals{$name}->{$val}
        $if !$V
            $V = $hash_define_vals{$name}->{default}

        $if $name=~/(\w+)_\{(.*)\}$/ -> $name_, $val_list
            $call set_config_defines_val_list
        $else
            $config_defines{$name} = $V

        subcode: set_config_defines_val_list
            # value in macro names
            $foreach $a in split /,\s*/, $val_list
                $if $a eq $V
                    $config_defines{"${name_}_$a"} = 1
                $else
                    $config_defines{"${name_}_$a"} = undef

#---------------------------------------- 
subcode: define_config_h(config_h)
    $(if:_pagename=mymake)
        $global %config_defines
        my (@lines, $cnt)
        &call open_r, $(config_h)
            $if /^\/\* #undef (\w+)/ && exists $config_defines{$1}
                $call define_it
            $elif /^#define (\w+) (.*)/ && exists $config_defines{$1}
                $call define_it
            $else
                push @lines, $_

    $if $cnt>0
        &call open_w, $(config_h)
            $foreach $l in @lines
                print Out $l

    subcode: define_it
        $if defined $config_defines{$1}
            $print "  -- define $1 $config_defines{$1}"
            push @lines, "#define $1 $config_defines{$1}\n"
        $else
            $print "  -- undef $1"
            push @lines, "\x2f* #undef $1 */\n"
        $cnt++

#---------------------------------------- 
# ref. macros_mymake/makefile.def
subcode:: dump_make_var_custom
    $(if:key=CFLAGS)
        $call modify_cflags, $t
    $(if:key=LDFLAGS)
        $call modify_ldflags, $t

subcode: modify_cflags(t)
    $global %config_cflags, %config_ldflags
    $if %config_cflags
        my @tlist = split /\s+/, $(t)
        $foreach $a in @tlist
            $if $a=~/-O(\d+)/
                $if !defined $config_cflags{O}
                    $config_cflags{O} = $1
            $elif !$config_cflags{$a}
                $config_cflags{$a} = 1
        my @tlist
        $foreach $a in keys %config_cflags
            $if $a eq "O"
                push @tlist, "-O$config_cflags{O}"
            $else
                push @tlist, $a
        $(t) = join(' ', sort @tlist)
        print(STDOUT "  -->  CFLAGS = $(t)\n");

subcode: modify_ldflags(t)
    $if %config_ldflags
        my @tlist = split /\s+/, $(t)
        $foreach $a in @tlist
            $if !$config_ldflags{$a}
                $config_ldflags{$a} = 1
        $(t) = join ' ', sort keys %config_ldflags
        print(STDOUT "  -->  LDFLAGS = $(t)\n");

