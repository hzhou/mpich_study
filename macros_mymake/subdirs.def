macros:
    Dmpl: src/mpl
    Impl: src/mpl/include
    Lmpl: src/mpl/libmpl.la
    Hmpl: $(Impl)/mplconfig.h

    Dopa: src/openpa
    Iopa: src/openpa/src
    Lopa: src/openpa/src/libopa.la
    Hopa: $(Iopa)/opa_config.h

    Dhwloc: $moddir/hwloc
    Ihwloc: $moddir/hwloc/include
    Lhwloc: $moddir/hwloc/hwloc/libhwloc_embedded.la
    Hhwloc: $(Ihwloc)/hwloc/autogen/config.h

    Dizem: $moddir/izem
    Iizem: $moddir/izem/src/include
    Lizem: $moddir/izem/src/libzm.la
    Hizem: $(Iizem)/izem/src/include/zm_config.h

    Ducx: $moddir/ucx
    Iucx: $(Ducx)/src
    Lucx: $(Ducx)/src/ucp/libucp.la
    Hucx: $(Ducx)/config.h

    Dofi: $moddir/libfabric
    Iofi: $(Dofi)/include
    Lofi: $(Dofi)/src/libfabric.la
    Hofi: $(Dofi)/config.h

#---------------------------------------- 
subcode: need_mpl
    $I_list .= " -I$(Impl)"
    $L_list .= " $(Lmpl)"
    push @CONFIGS, "$(Hmpl)"
    &call add_subdir_rule_block, $(Dmpl), $(Hmpl)
        push @t, "\x24(DO_stage) Configure MPL"
        push @t, "rsync -r ../../confdb/ confdb/" 
        push @t, "autoreconf -ivf"
        push @t, "./configure --disable-versioning --enable-embedded"
    $call add_subdir_make, $(Dmpl), $(Lmpl)

#---------------------------------------- 
subcode: need_opa
    $I_list .= " -I$(Iopa)"
    $L_list .= " $(Lopa)"
    push @CONFIGS, "$(Hopa)"
    &call add_subdir_rule_block, $(Dopa), $(Hopa)
        push @t, "\x24(DO_stage) Configure OpenPA"
        push @t, "rsync -r ../../confdb/ confdb/" 
        push @t, "autoreconf -ivf"
        # check --with-atomic-primitives [auto_allow_emulation]
        push @t, "./configure --disable-versioning --enable-embedded"
    $call add_subdir_make, $(Dopa), $(Lopa)

subcode: filter_var_mpl_etc
    $t=~s/-I.*\/(mpl|openpa)\/\S+\s*//g

subcode: filter_lib_mpl_etc
    $t=~s/\bsrc\/(mpl|openpa)\/\S+\s*//g

#---------------------------------------- 
subcode: need_hwloc
    $I_list .= " -I$(Ihwloc)"
    $L_list .= " $(Lhwloc)"
    push @CONFIGS, "$(Hhwloc)"
    &call add_subdir_rule_block, $(Dhwloc), $(Hhwloc)
        push @t, "\x24(DO_stage) Configure HWLOC"
        push @t, "sh autogen.sh"
        push @t, "./configure --enable-embedded-mode --enable-visibility"
    $call add_subdir_make, $(Dhwloc), $(Lhwloc)

subcode: filter_var_hwloc
    $(if:key=AM_CPPFLAGS)
        $t=~s/\@HWLOC_\S+\@\s*//
    $(elif:key=AM_CFLAGS)
        $t=~s/\@HWLOC_\S+\@\s*//

#---------------------------------------- 
subcode: need_izem
    $I_list .= " -I$(Iizem)"
    $L_list .= " $(Lizem)"
    push @CONFIGS, "$(Hizem)"
    &call add_subdir_rule_block, $(Dizem), $(Hizem)
        push @t, "\x24(DO_stage) Configure IZEM"
        push @t, "sh autogen.sh"
        push @t, "./configure --enable-embedded"
    $call add_subdir_make, $(Dizem), $(Lizem)

#---------------------------------------- 
subcode: need_ucx
    $I_list .= " -I$(Iucx)"
    $L_list .= " $(Lucx)"
    push @CONFIGS, "$(Hucx)"
    &call add_subdir_rule_block, $(Ducx), $(Hucx)
        push @t, "\x24(DO_stage) Configure UCX"
        push @t, "sh autogen.sh"
        push @t, "./configure --disable-static --enable-embedded --with-prefix=$prefix"
    $call add_subdir_make, $(Ducx), $(Lucx)

subcode: patch_configure_ucx
    my $flag
    &call modify, src/mpid/ch4/netmod/ucx/subconfigure.m4
        $if $l=~/^AM_COND_IF\(\[BUILD_CH4_NETMOD_UCX\]/
            $flag = 1
            next
        $elif $flag
            $if $l=~/^\]\)/
                $flag = 0
                next
            $elif $l=~/AC_DEFINE\(HAVE_UCP_\w+_NB,1/
                NOOP
            $else
                next

subcode: filter_var_ucx
subcode: filter_lib_ucx
    $t=~s/\@ucxlib\@\s*//g

#---------------------------------------- 
subcode: need_ofi
    $I_list .= " -I$(Iofi)"
    $L_list .= " $(Lofi)"
    push @CONFIGS, "$(Hofi)"
    &call add_subdir_rule_block, $(Dofi), $(Hofi)
        push @t, "\x24(DO_stage) Configure UCX"
        push @t, "sh autogen.sh"
        push @t, "./configure --enable-embedded --with-prefix=$prefix"
    $call add_subdir_make, $(Dofi), $(Lofi)

#---- common --------------------------- 
subcode: chdir_subdir(dir)
    my $pwd = `pwd`
    chomp $pwd
    chdir "$(dir)" or die "can't chdir $(dir)\n"
    BLOCK
    chdir $pwd

subcode: add_subdir_rule_block(subdir, target)
    my @t = ("cd $(subdir)")
    BLOCK
    push @extra_make_rules, "$(target):"
    push @extra_make_rules, "\t(".join(' && ', @t).")"
    push @extra_make_rules, ""

subcode: add_subdir_make(subdir, target)
    &call add_subdir_rule_block, $(subdir), $(target)
        push @t, "\x24(MAKE)"
