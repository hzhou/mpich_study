macros:
    subdir_list: mpl, opa, hwloc, izem, ucx, ofi, romio, jsonc

    embed_mpl: src/mpl
    Dmpl: $moddir/mpl
    Impl: $(Dmpl)/include
    Lmpl: $(Dmpl)/libmpl.la
    Hmpl: $(Impl)/mplconfig.h

    embed_opa: src/openpa
    Dopa: $moddir/openpa
    Iopa: $(Dopa)/src
    Lopa: $(Dopa)/src/libopa.la
    Hopa: $(Iopa)/opa_config.h

    embed_hwloc: src/hwloc
    Dhwloc: $moddir/hwloc
    Ihwloc: $moddir/hwloc/include
    Lhwloc: $moddir/hwloc/hwloc/libhwloc_embedded.la
    Hhwloc: $(Ihwloc)/hwloc/autogen/config.h

    embed_izem: src/izem
    Dizem: $moddir/izem
    Iizem: $moddir/izem/src/include
    Lizem: $moddir/izem/src/libzm.la
    Hizem: $(Iizem)/zm_config.h

    embed_ucx: src/mpid/ch4/netmod/ucx/ucx
    Ducx: $moddir/ucx
    Iucx: $(Ducx)/src
    Lucp: $(Ducx)/src/ucp/libucp.la
    Luct: $(Ducx)/src/uct/libuct.la
    Lucs: $(Ducx)/src/ucs/libucs.la
    Lucm: $(Ducx)/src/ucm/libucm.la
    Hucx: $(Ducx)/config.h

    embed_ofi: src/mpid/ch4/netmod/ofi/libfabric
    Dofi: $moddir/libfabric
    Iofi: $(Dofi)/include
    Lofi: $(Dofi)/src/libfabric.la
    Hofi: $(Dofi)/config.h

    embed_romio: src/mpi/romio
    Dromio: src/mpi/romio
    Iromio: $(Dromio)/include
    Lromio: $(Dromio)/libromio.la
    Hromio: $(Dromio)/adio/include/romioconf.h

    embed_jsonc: modules/jsonc
    Djsonc: modules/jsonc
    Ijsonc: $(Djsonc)
    Ljsonc: $(Djsonc)/libjson-c.la
    Hjsonc: 

subcode: copy_subdir_module(dir)
    $(if:embed_$(dir))
        $if !-d "$(D$(dir))"
            $call do_cmd, cp -r $(embed_$(dir)) $(D$(dir))
            $(if:dir=mpl or dir=opa)
                $call do_cmd, cp -r confdb $(D$(dir))/

#---------------------------------------- 
subcode: need_mpl
    # $call copy_subdir_module, mpl 
    $I_list .= " -I$(Impl)"
    $L_list .= " $(Lmpl)"
    push @CONFIGS, "$(Hmpl)"
    $call set_config_args
    &call add_subdir_rule_block, $(Dmpl), $(Hmpl)
        push @t, "\x24(DO_stage) Configure MPL"
        push @t, "autoreconf -ivf"
        push @t, "./configure $config_args"
        push @t, "cp $pwd/libtool ."
    $call add_subdir_make, $(Dmpl), $(Lmpl), $(Hmpl)

    subcode: set_config_args
        my $config_args = "--disable-versioning --enable-embedded"
        $foreach $t in @config_args
            $if $t=~/--enable-(g|strict)/
                $config_args.=" $t"

#---------------------------------------- 
subcode: need_opa
    # $call copy_subdir_module, opa
    $I_list .= " -I$(Iopa)"
    $L_list .= " $(Lopa)"
    push @CONFIGS, "$(Hopa)"
    &call add_subdir_rule_block, $(Dopa), $(Hopa)
        push @t, "\x24(DO_stage) Configure OpenPA"
        push @t, "autoreconf -ivf"
        push @t, "./configure --disable-versioning --enable-embedded"
        $if $opts{openpa_primitives}
            $t[-1] .= " --with-atomic-primitives=$opts{openpa_primitives}"
        push @t, "cp $pwd/libtool ."
    $call add_subdir_make, $(Dopa), $(Lopa), $(Hopa)

subcode: filter_var_mpl_etc
    $t=~s/-I\S+\/(mpl|openpa|romio|izem|hwloc)\/\S+\s*//g

subcode: filter_lib_mpl_etc
    $t=~s/\S+\/(mpl|openpa|romio|izem|hwloc)\/\S+\.la\s*//g
    $(if:0)
        $t=~s/\bsrc\/(mpl|openpa)\/\S+\s*//g
        $t=~s/\bsrc\/mpi\/romio\/\S+\s*//g
        $t=~s/\bsrc\/izem\/\S+\s*//g

#---------------------------------------- 
subcode: need_romio
    system "rsync -r confdb/ $(Dromio)/confdb/" 
    system "cp maint/version.m4 $(Dromio)/"
    my @t_env 
    push @t_env, "FROM_MPICH=yes"
    push @t_env, "master_top_srcdir=$pwd"
    push @t_env, "master_top_builddir=$pwd"
    push @t_env, "CPPFLAGS='-I$(Impl)'"
    # # mpl
    # &call modify, configure.ac

    $I_list .= " -I$(Iromio)"
    $L_list .= " $(Lromio)"
    push @CONFIGS, "$(Hromio)"
    &call add_subdir_rule_block, $(Dromio), $(Hromio)
        push @t, "\x24(DO_stage) Configure ROMIO"
        # push @t, "sh autogen.sh"
        push @t, "autoreconf -ivf"
        push @t, "@t_env ./configure"
    $call add_subdir_make, $(Dromio), $(Lromio), $(Hromio)

    $dst_hash{"$(Dromio)/include/mpio.h"} = "$prefix/include"
    $dst_hash{"$(Dromio)/include/mpiof.h"} = "$prefix/include"

#---------------------------------------- 
subcode: need_hwloc
    $call copy_subdir_module, hwloc
    $I_list .= " -I$(Ihwloc)"
    $L_list .= " $(Lhwloc)"
    push @CONFIGS, "$(Hhwloc)"
    &call add_subdir_rule_block, $(Dhwloc), $(Hhwloc)
        push @t, "\x24(DO_stage) Configure HWLOC"
        push @t, "sh autogen.sh"
        push @t, "./configure --enable-embedded-mode --enable-visibility"
    $call add_subdir_make, $(Dhwloc), $(Lhwloc), $(Hhwloc)

subcode: filter_var_hwloc
    $(if:key=AM_CPPFLAGS)
        $t=~s/\@HWLOC_\S+\@\s*//
    $(elif:key=AM_CFLAGS)
        $t=~s/\@HWLOC_\S+\@\s*//

#---------------------------------------- 
subcode: need_izem
    $call copy_subdir_module, izem
    $I_list .= " -I$(Iizem)"
    $L_list .= " $(Lizem)"
    push @CONFIGS, "$(Hizem)"
    &call add_subdir_rule_block, $(Dizem), $(Hizem)
        push @t, "\x24(DO_stage) Configure IZEM"
        push @t, "sh autogen.sh"
        push @t, "./configure --enable-embedded"
    $call add_subdir_make, $(Dizem), $(Lizem), $(Hizem)

#---------------------------------------- 
subcode: need_ucx
    $if -e "$moddir/ucx/need_sed"
        $print Patch $moddir/ucx ...
        system "find $moddir/ucx -name '*.la' | xargs sed -i \"s,MODDIR,$moddir/ucx,g\""
        system "find $moddir/ucx -name '*.la*' | xargs sed -i \"s,/MODPREFIX,$prefix,g\""
        system "mkdir -p $prefix/lib/ucx"
        $foreach $m in "ucm", "ucs", "uct", "ucp"
            system "$moddir/ucx/libtool --mode=install --quiet install $moddir/ucx/src/$m/lib$m.la $prefix/lib"
        my @tlist = glob("$moddir/ucx/modules/*.la")
        $foreach $m in @tlist
            system "$moddir/ucx/libtool --mode=install --quiet install $m $prefix/lib/ucx"
        unlink "$moddir/ucx/need_sed"

    $if $opts{ucx} eq "embedded"
        $I_list .= " -I$(Iucx)"
        $L_list .= " $prefix/lib/libucp.la"
        # $L_list .= " $(Lucp)"
        # $L_list .= " $(Lucp) $(Luct) $(Lucs) $(Lucm)"
        $call @need_ucx_embedded
    $else
        # until: -I, -L path added by configure
        $I_list .= " -I$opts{ucx}/include"
        $L_list .= " -L$opts{ucx}/lib"
        $L_list .= " -lucp -lucs"

subcode: need_ucx_embedded
    $call copy_subdir_module, ucx
    $call patch_ucx_for_pgi

    push @CONFIGS, "$(Hucx)"
    &call add_subdir_rule_block, $(Ducx), $(Hucx)
        push @t, "\x24(DO_stage) Configure UCX"
        # push @t, "sh autogen.sh"
        push @t, "mkdir -p config/m4 config/aux"
        push @t, "autoreconf -iv"
        # push @t, "./configure --prefix=\x24(PREFIX) --disable-static --enable-embedded"
        push @t, "./configure --prefix=\x24(PREFIX) --disable-static"
    $call add_subdir_make, $(Ducx), $(Lucp), $(Hucx)

    subcode: patch_ucx_for_pgi
        $if $ENV{compiler} =~ /pgi|sun/
            &call just_modify, $(Ducx)/src/ucs/type/status.h
                s/UCS_S_PACKED\s*ucs_status_t/ucs_status_t/

subcode: patch_configure_ucx
    my $flag
    &call modify, src/mpid/ch4/netmod/ucx/subconfigure.m4
        $if $l=~/^AM_COND_IF\(\[BUILD_CH4_NETMOD_UCX\]/
            $flag = 1
            next
        $elif $flag
            $if $l=~/^\]\)/
                $flag = 0
                next
            $elif $l=~/AC_DEFINE\(HAVE_UCP_\w+_NB,1/
                NOOP
            $else
                next

subcode: filter_var_ucx
subcode: filter_lib_ucx
    $t=~s/\@ucxlib\@\s*//g

#------------------------
subcode: patch_install_ucx
#---------------------------------------- 
subcode: need_ofi
    $if $opts{libfabric} eq "embedded"
        $I_list .= " -I$(Iofi)"
        $L_list .= " $(Lofi)"
        $call @need_ofi_embedded
    $else
        # until: -I, -L path added by configure
        $I_list .= " -I$opts{libfabric}/include"
        $L_list .= " -L$opts{libfabric}/lib"
        $L_list .= " -lfabric"

subcode: need_ofi_embedded
    $call copy_subdir_module, ofi
    push @CONFIGS, "$(Hofi)"
    &call add_subdir_rule_block, $(Dofi), $(Hofi)
        push @t, "\x24(DO_stage) Configure libfabric"
        push @t, "sh autogen.sh"
        $(set:C=$(join:--enable-$1=no: :psm,psm2,verbs,usnic,mlx,gni,ugni,rxm,mrail,rxd,bgq,rstream,udp,perf))
        push @t, "./configure --enable-embedded --enable-sockets=yes $(C)"
    $call add_subdir_make, $(Dofi), $(Lofi), $(Hofi)

# assuming using sockets provider
subcode: patch_configure_ofi
    my $flag
    &call modify, src/mpid/ch4/netmod/ofi/subconfigure.m4
        $if $l=~/^AM_COND_IF\(\[BUILD_CH4_NETMOD_OFI\]/
            $flag = 1
            next
        $elif $flag
            $if $l=~/^\]\).*AM_COND_IF\(BUILD_CH4_NETMOD_OFI/
                $flag = 0
                $call @print_Out_defines
                next
            $elif $l=~/AC_ARG_ENABLE/
                $flag=2
            $elif $flag==2
                # pass thru
            $else
                next

    subcode: print_Out_defines
        $(if:1)
            print Out "    AC_DEFINE([MPIDI_CH4_OFI_USE_SET_RUNTIME], [1], [Define to use runtime capability set])\n"
        $(else)
            print Out "    AC_DEFINE([MPIDI_CH4_OFI_USE_SET_SOCKETS], [1], [Define to use sockets capability set])\n"

subcode: filter_var_ofi
subcode: filter_lib_ofi
    $t=~s/\@ofilib\@\s*//g

#---- common --------------------------- 
subcode: chdir_subdir(dir)
    chdir "$(dir)" or die "can't chdir $(dir)\n"
    BLOCK
    chdir $pwd

subcode: add_subdir_rule_block(subdir, target, @dep)
    my @t = ("cd $(subdir)")
    BLOCK
    push @extra_make_rules, "$(target): $(dep)"
    push @extra_make_rules, "\t(".join(' && ', @t).")"
    push @extra_make_rules, ""

subcode: add_subdir_make(subdir, target, @dep)
    &call add_subdir_rule_block, $(subdir), $(target), $(dep)
        push @t, "\x24(MAKE)"

