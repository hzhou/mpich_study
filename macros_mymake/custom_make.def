include: macros_mymake/makefile.def
include: macros_mymake/hydra.def
include: macros_mymake/gforker.def

subcode: custom_make
    # FIXME
    $if $opts{argobots}
        $I_list .= " -I$opts{argobots}/include"
    $call parse_Makefile, mymake/Makefile.orig
    $objects{MODS}="-"
    $objects{MODDIR}="-"
    $objects{PREFIX}="-"

    $call collect_programs_libs
    # $call collect_mpi_fc_modules

    $call custom_programs_libs
    dump_makefile("mymake/Makefile.custom")

    system "rm -f Makefile"
    system "ln -s mymake/Makefile.custom Makefile"

    # ----------------------------
    subcode: collect_programs_libs
        my $tlist = get_list("lib_LTLIBRARIES")
        $foreach $t in @$tlist
            $dst_hash{$t} = "\x24(PREFIX)/lib"
        my $tlist = get_list("bin_PROGRAMS")
        $foreach $t in @$tlist
            $call @custom_programs
            $dst_hash{$t} = "\x24(PREFIX)/bin"
        # -------------------
        $global @programs
        my $tlist = get_list("PROGRAMS")
        $foreach $t in @$tlist
            $call @custom_programs
            push @programs, $t
    
        $global @ltlibs
        my $tlist = get_list("LTLIBRARIES")
        $foreach $t in @$tlist
            $call @custom_ltlibs
            push @ltlibs, $t

    subcode: custom_programs_libs
        $(for:which in ltlibs, programs)
            $foreach $p in @$(which)
                my $a = $p
                $a=~s/[\.\/]/_/g
                $(if:which=programs)
                    my $add = $a."_LDADD"
                $(elif:which=ltlibs)
                    my $add = $a."_LIBADD"
                my $t = get_make_var($add)
                $call @set_libs_custom
                $objects{$add} = $t

        subcode:: set_libs_custom
            # print "$add: $t...\n"
            $(if:makefile=hydra)
                $t=~s/\s*\S*\/libmpl.la//g
                $t=~s/-lhydra/libhydra.la/g
                $t=~s/-lpm/libpm.la/g
            $(elif:makefile=mpich)
                $call filter_lib_romio
                $call filter_lib_mpl_etc
                $call filter_lib_ucx
                $call filter_lib_ofi

            $(if:makefile=mpich and which=ltlibs)
                $if ($add=~/libmpi_la_/ && $opts{have_weak}) or ($add=~/libpmpi_la_/)
                    $t.= $L_list
            $(elif:makefile=hydra and which=ltlibs)
                $if $add=~/libhydra.*_la/
                    $t.= $L_list

            subcode: filter_lib_mpl_etc
                $t=~s/\S+\/(mpl|openpa|izem|hwloc|yaksa|json-c|libfabric)\/\S+\.la\s*//g
                $(if:0)
                    $t=~s/\bsrc\/(mpl|openpa)\/\S+\s*//g
                    $t=~s/\bsrc\/mpi\/romio\/\S+\s*//g
                    $t=~s/\bsrc\/izem\/\S+\s*//g

            subcode: filter_lib_ucx
                $t=~s/\@ucxlib\@\s*//g

            subcode: filter_lib_ofi
                $t=~s/\@ofilib\@\s*//g
#---------------------------------------- 
subcode: modify_frame(@is_temp)
    my @mod_list
    BLOCK
    $(if:is_temp=temporary)
        $foreach $m in @mod_list
            system "cp $m->[1] $m->[0]"

    subcode: modify(f)
        my $f = "$(f)"
        my $f_ = $f
        $f_=~s/[\.\/]/_/g
        my @m =($f, "mymake/$f_.orig", "mymake/$f_.mod")
        $(if:!skip_mod_list)
            push @mod_list, \@m

        system "mv $m[0] $m[1]"
        $call get_file_lines, $m[1]
        my $flag_skip=0
        &call open_W, $m[2]
            $foreach $l in @lines
                BLOCK
                $if $flag_skip
                    next
                print Out $l
        system "cp -v $m[2] $m[0]"

    subcode: patch_libtool
        $(set:skip_mod_list=1)
        my %need_patch
        &call modify, libtool
            $if $l=~/^AR_FLAGS=/
                $l = "AR_FLAGS=\"cr\"\n"
            # --------------------------
            $elif $l=~/^CC="(.*)"/ -> $CC
                $call set_need_patch
            $elif $l=~/^(pic_flag|wl|link_static_flag)=/
                $if $need_patch{$1}
                    $l = "$1='$need_patch{$1}'\n"
            $elif $l=~/^(archive_cmds=|\s*\\\$CC\s+-shared )/
                $if $need_patch{shared}
                    $l=~s/-shared /$need_patch{shared} /
            # --------------------------
        system "chmod a+x libtool"

        subcode: set_need_patch
            $if $CC =~ /^sun(f77|f9.|fortran)/
                $need_patch{pic_flag}=" -KPIC"
                $need_patch{wl}="-Qoption ld "
                $need_patch{link_static_flag}=" -Bstatic"
                $need_patch{shared}="-G"
            $else
                %need_patch=()

#---------------------------------------- 
subcode: parse_Makefile(makefile)
    $global %objects 
    %objects=()
    my $tlist
    &call open_r, $(makefile)
        $if /^(\w+)\s*=\s*(.*)/ -> $a, $b
            $tlist=[]
            $objects{$a} = $tlist

            $call add_b_to_tlist
        $elif $tlist
            $if /\s*(.*)/ -> $b
                $call add_b_to_tlist
    $call @overwrite_makefile_vars

    subcode: add_b_to_tlist
        my $done=1
        $if $b=~/\\$/
            $done = 0
            $b=~s/\s*\\$//

        $if $b
            push @$tlist, split /\s+/, $b
        $if $done
            undef $tlist

#---- utils --------------------------- 
fncode: get_list($key)
    my @t
    my $tlist = $objects{$key}
    # $call @debug_get_list
    $foreach $t in @{$objects{$key}}
        $if $t=~/^\$\((\w+)\)$/
            my $L = get_list($1)
            push @t, @$L
        $else
            $t=~s/\$\((\w+)\)/get_make_var($1)/ge
            push @t, $t
    return \@t

    subcode: debug_get_list
        $(if:1)
            $print $key: $tlist
        $(else)
            $if $tlist
                $print $key: @$tlist
            $else
                $print $key undefined

fncode: get_make_var($name)
    my $t = $objects{$name}
    $if $t eq "-"
        return "\x24($name)"
    $if defined $t
        $if ref($t) eq "ARRAY"
            $t = join(' ', @$t)
        $t=~s/\$\((\w+)\)/get_make_var($1)/ge
        $t=~s/\s+/ /g

        $t=~s/$opts{moddir}/\x24(MODS)/g
        return $t
    $elif $name=~/^am__v_\w+/
        return ""
    $else
        return ""

fncode: get_make_objects($a)
    my $tlist = get_list("${a}_OBJECTS")
    my @tlist = sort @$tlist
    $foreach $t in @tlist
        $t=~s/$a-//g
    return \@tlist

