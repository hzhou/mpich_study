subcode: custom_make
    $global $I_list, $L_list # ref: dump_variable_custom, set_libs_custom
    my $lt_opt
    $if $opts{V}==0
        $lt_opt = "--quiet"

    $call parse_Makefile, mymake/Makefile.orig
    &call open_W, mymake/Makefile.custom
        $print "export MODDIR=$moddir"
        $print "PREFIX=$prefix"
        $print
        $call dump_custom_make
    system "rm -f Makefile"
    system "ln -s mymake/Makefile.custom Makefile"

#---------------------------------------- 
macros: 
    LT: /bin/sh ./libtool --mode=$1 $lt_opt

#---------------------------------------- 
subcode: temporary_modify
    my @mod_list
    BLOCK
    $foreach $m in @mod_list
        system "cp $m->[1] $m->[0]"

    subcode: modify(f)
        my $f = "$(f)"
        my $f_ = $f
        $f_=~s/[\.\/]/_/g
        my @m =($f, "mymake/$f_.orig", "mymake/$f_.mod")
        $(if:!skip_mod_list)
            push @mod_list, \@m

        system "mv $m[0] $m[1]"
        $call get_file_lines, $m[1]
        my $flag_skip=0
        &call open_W, $m[2]
            $foreach $l in @lines
                BLOCK
                $if $flag_skip
                    next
                print Out $l
        system "cp -v $m[2] $m[0]"

    subcode: patch_libtool
        $(set:skip_mod_list=1)
        &call modify, libtool
            $if $l=~/^AR_FLAGS=/
                $l = "AR_FLAGS=\"cr\"\n"
        system "chmod a+x libtool"

#---------------------------------------- 
subcode: parse_Makefile(makefile)
    $global %objects 
    %objects=()
    my $tlist
    &call open_r, $(makefile)
        $if /^(\w+)\s*=\s*(.*)/ -> $a, $b
            $tlist=[]
            $objects{$a} = $tlist

            $call add_b_to_tlist
        $elif $tlist
            $if /\s*(.*)/ -> $b
                $call add_b_to_tlist
    $call @overwrite_makefile_vars

    subcode: add_b_to_tlist
        my $done=1
        $if $b=~/\\$/
            $done = 0
            $b=~s/\s*\\$//

        $if $b
            push @$tlist, split /\s+/, $b
        $if $done
            undef $tlist

#---------------------------------------- 
subcode: dump_custom_make
    $if @CONFIGS
        $global @CONFIGS
        $call P, "CONFIGS = @CONFIGS"
        $print
    $map dump_variable, DEFS, DEFAULT_INCLUDES, INCLUDES, AM_CPPFLAGS, CPPFLAGS, AM_CFLAGS, CFLAGS, AM_LDFLAGS, LDFLAGS, LIBS
    $print

    my $cc = get_object("CC")
    my $ccld = get_object("CCLD")
    my $LD="\x24(LINK)"

    $print "COMPILE = $cc \x24(DEFS) \x24(DEFAULT_INCLUDES) \x24(INCLUDES) \x24(AM_CPPFLAGS) \x24(CPPFLAGS) \x24(AM_CFLAGS) \x24(CFLAGS)"
    $print "LINK = $ccld \x24(AM_LDFLAGS) \x24(LDFLAGS)"
    $print "LTCC = $(LT:compile) \x24(COMPILE)"
    $print "LTLD = $(LT:link) \x24(LINK)"
    $print

    $call collect_programs_libs

    $print "all: @ltlibs @programs"
    $print

    $call dump_rules, ltlibs
    $call dump_rules, programs

    $print "\x23 --------------------\n"
    $call @custom_make_extra
    $global @extra_make_rules
    $foreach $l in @extra_make_rules
        $call P, $l
    $print "\x23 --------------------\n"
    $print "%.o: %.c"
    $call quiet_rule, CC, \x24(COMPILE) -c -o \$\@ \$<
    $print
    $print "%.lo: %.c"
    $call quiet_rule, LTCC, \x24(LTCC) -c -o \$\@ \$<
    $print
    $foreach %special_targets
        $print "%.$k.lo: %.c"
        $call quiet_rule, LTCC, $v -c -o \$\@ \$<
        $print

    # ----------------------
    my (%dirs, @install_list, @install_deps, @lns_list)
    $foreach %dst_hash
        $if $k=~/^LN_S-(.*)/
            push @lns_list, "rm -f $1 && ln -s $v $1"
        $elif $v
            $if !$dirs{$v}
                $dirs{$v} = 1
            $if $v=~/\/lib$/
                push @install_list, "$(LT:install) install $k $v"
                push @install_deps, $k
            $elif $v=~/\/bin$/
                push @install_list, "$(LT:install) install $k $v"
                push @install_deps, $k

    my $t1 = get_list("include_HEADERS")
    my $t2 = get_list("nodist_include_HEADERS")
    $if @$t1 or @$t2
        $dirs{"$prefix/include"} = 1
        my $t = join(' ', @$t1, @$t2)
        push @install_list, "cp $t $prefix/include"

    my @install_list = sort @install_list
    $foreach $d in keys %dirs
        unshift @install_list, "mkdir -p $d"
    push @install_list, sort @lns_list

    $if @install_list
        $print "\x23 --------------------\n"
        $print ".PHONY: install"
        $print "install: @install_deps"
        $foreach $l in @install_list
            $print "\t$l"
        $print
    # --------------------
    $print "\x23 --------------------\n"
    $print ".PHONY: clean realclean realrealclean"
    $print "clean:"
    $print "\t(find . $(join:-name '*.$1': -o :o,lo,a,la) |xargs rm -f)"
    $print
    $print "realclean: clean"
    $print "\t\x24(DO_clean)"
    $print

    # ----------------------------
    subcode: quiet_rule(cmd, @rule)
        $if $opts{V}==0
            $print \t\@echo $(cmd) \$\@ && $(rule)
        $else
            $print \t$(rule)


    # ----------------------------
    subcode: P(@line)
        $(if:line!=$l)
            my $l = $(line)
        $l=~s/$moddir/\x24(MODDIR)/g
        $print $l

    subcode: dump_variable(key)
        my $t = get_object("$(key)")
        $call @dump_variable_custom
        $call P, "$(key) = $t"

    subcode: dump_object(key, tlist)
        $print "$(key) = \\"
        my $last_item = pop $(tlist)
        $foreach $t in $(tlist)
            $call P, "    $t \\"
        $call P, "    $last_item"

        $if @CONFIGS and "$(key)"=~/_OBJECTS$/
            $print "\x24($(key)): \x24(CONFIGS)"

    subcode: collect_programs_libs
        $global %dst_hash
        my $tlist = get_list("lib_LTLIBRARIES")
        $foreach $t in @$tlist
            $dst_hash{$t} = "\x24(PREFIX)/lib"
        my $tlist = get_list("bin_PROGRAMS")
        $foreach $t in @$tlist
            $dst_hash{$t} = "\x24(PREFIX)/bin"
        # -------------------
        $global @programs
        my $tlist = get_list("PROGRAMS")
        $foreach $t in @$tlist
            $call @custom_programs
            push @programs, $t
    
        $global @ltlibs
        my $tlist = get_list("LTLIBRARIES")
        $foreach $t in @$tlist
            $call @custom_ltlibs
            push @ltlibs, $t

    subcode: dump_rules(which)
        my $cmd = "\x24(LTLD)"
        $if $opts{V}==0
            $cmd = "\@echo LTLD \$\@ && $cmd"
        $foreach $p in @$(which)
            my $a = $p
            $a=~s/[\.\/]/_/g

            my ($deps, $objs)
            $call set_objects
            $call set_add
            $call set_ldflags

            $objs = "$deps $objs \x24(LIBS)"

            # ref: subcode: collect_programs_libs
            $if $dst_hash{$p}=~/\/lib$/
                my $opt="-rpath $dst_hash{$p}"
                $if $opts{so_version}
                    $opt.=" -version-info $opts{so_version}"
                $objs = "$opt $objs"

            $print $p: $deps
            $print \t$cmd -o \$\@ $objs
            $print

        subcode: set_objects
            my $o= "${a}_OBJECTS"
            my $tlist = get_list($o)
            my @tlist = sort @$tlist
            $global %special_targets
            $if $special_targets{$a}
                $foreach $t in @tlist
                    $t=~s/([^\/]+)-(\w+)/$2.$1/
            $else
                $foreach $t in @tlist
                    $t=~s/[^\/]+-//

            $call attach_to_deps, $o, tlist

        subcode: set_add
            $(if:which=programs)
                my $add = $a."_LDADD"
            $(elif:which=ltlibs)
                my $add = $a."_LIBADD"

            $if $objects{$add}
                my $t = get_object($add)
                $call @set_libs_custom
                $t=~s/^\s+//
                my @tlist = split /\s+/, $t
                $call attach_to_deps, $add, tlist

        subcode: set_ldflags
            $(if:which=programs)
                $(for:CFLAGS,LDFLAGS)
                    $if $objects{"${a}_$1"}
                        $cmd.= ' '. get_object("${a}_$1")
                        $cmd .= " \x24($1)"

        # --------------------
        subcode: attach_to_deps(o, tlist)
            my @t
            $foreach $t in @$(tlist)
                $if $t=~/^-l\w+/
                    $objs.=" $t"
                $else
                    push @t, $t

            $call dump_object, $(o), @t
            $deps .= " \x24($(o))"

#---- utils --------------------------- 
fncode: get_list($key)
    my @t
    my $tlist = $objects{$key}
    # $call @debug_get_list
    $foreach $t in @{$objects{$key}}
        $if $t=~/^\$\((\w+)\)$/
            my $L = get_list($1)
            push @t, @$L
        $else
            $t=~s/\$\((\w+)\)/get_object($1)/ge
            push @t, $t
    return \@t

    subcode: debug_get_list
        $(if:1)
            $print $key: $tlist
        $(else)
            $if $tlist
                $print $key: @$tlist
            $else
                $print $key undefined

fncode: get_object($key)
    my $arr = $objects{$key}
    $if defined $arr
        my $t
        $if ref($arr) eq "ARRAY"
            $t = join(' ', @$arr)
        $else
            $t = $arr
        $t=~s/\$\(am__v_[\w]+\)//g
        $t=~s/\$\((\w+)\)/get_object($1)/ge
        $t=~s/\s+/ /g
        return $t
    $else
        return ""

