subcode: test_mymake_config
    $global @mpich_config, @testmpi_config
    $call parse_config
    $call parse_configOption
    $call parse_trigger_phrase
    $call parse_param
    $call filter_config
    $call @set_missing_default
    $call @set_custom_testlist

    # -- used in warnings tests with "config" axis
    subcode: parse_config
        $if $ENV{config}
            my $config = $ENV{config}
            $print parsing config: [$config]...
            $config=~s/[\/-]/:/g
            $if $config=~/^(default|ch3:tcp)/
                $config = "ch3:nemesis"
                push @mpich_config, "--with-device=$config"
            $elif $config=~/^ch[34]/
                push @mpich_config, "--with-device=$config"

    # -- used in job scripts
    subcode: parse_configOption
        $if $ENV{configOption}
            push @mpich_config, split(/\s+/, $ENV{configOption})

    # -- used with commandline trigger
    subcode: parse_param
        $if $ENV{param}
            $ENV{test_script}="test_quick"
            my @plist = split /\s+/, $ENV{param}
            $foreach $t in @plist
                $if $t=~/(--(enable|disable|with|without)-\S+)/g
                    push @mpich_config, $1
                $elif $t=~/^(\w+)=(.+)/
                    $ENV{$1}=$2
                $elif $t=~/^testlist:(.+)/g
                    push @testlist, $1

    # -- used in ghprb PR comment
    subcode: parse_trigger_phrase
        $if $ENV{ghprbCommentBody}
            my $trigger_phrase = $ENV{ghprbCommentBody}
            $trigger_phrase=~s/\\r\\n/\n/g
            $trigger_phrase=~s/\n\s*:/ /g

            $call check_test_script
            $call check_mpich_config

            $while $trigger_phrase=~/^\s*(compiler|skip_test|out_of_tree|default)\s*[:=]\s*([\w\-\.]+)/mg -> $key, $val
                $if $val=~/(yes|1)/
                    $val = "true"
                $ENV{$key}=$val

            $if $ENV{default} eq "true"
                @mpich_config = grep !/--enable-strict/, @mpich_config

            $while $trigger_phrase=~/^env:\s*(\w+)\s*=\s*(.*?)\s*$/mg
                $ENV{$1}=$2

            $if !$ENV{skip_test}
                $call check_custom_testlist

        # ------------------------
        subcode: check_test_script
            my %h_script = ("quick"=>"test_quick", "mpich"=>"test_build")
            $if $trigger_phrase=~/^test_script\s*[:=]\s*(\w+)/m && $h_script{$1}
                $ENV{test_script}=$h_script{$1}

        subcode: check_mpich_config
            my $t = $ENV{configOption}."\n".$trigger_phrase
            $print parsing trigger phrase: \n   [$t]...
            $while $t=~/(--(enable|disable|with|without)-\S+)/g -> $a
                $a=~s/\x24(\w+)/$ENV{$1}/g
                push @mpich_config, $a

        subcode: check_custom_testlist
            $while $trigger_phrase=~/^testlist:\s*(.+)/mg
                $print testlist [$1]
                push @testlist, $1

    #---------------------------------------- 
    subcode: set_custom_testlist
        $global @testlist
        $if @testlist
            &call open_W, test/mpi/testlist.custom
                $foreach $l in @testlist
                    $l=~s/#/ /g
                    $print $l
            $ENV{skip_test}="custom"

    #---------------------------------------- 
    subcode: set_missing_default
        my $test_script = $ENV{test_script}
        $if !$test_script
            $(if:0)
                $test_script = "test_quick"
            $(else)
                $test_script = "test_build"

        $if !$ENV{compiler}
            $ENV{compiler}='gnu'

    #---------------------------------------- 
    subcode: filter_config
        $global %config_hash
        $if @mpich_config
            $foreach $t in @mpich_config
                $call filter_config_hash # remove duplicate
                $call filter_test_config

        $call check_mpich_device
        $call @post_filters

        $if @mpich_config
            $ENV{mpich_config}= join(' ', @mpich_config)
        $if @testmpi_config
            $ENV{testmpi_config} = join(' ', @testmpi_config)

        # ----------------------
        subcode: filter_config_hash
            my $k=$t
            $k=~s/=.*$//
            $k=~s/^--(disable|enable|with|without)-//
            $if $config_hash{$k}
                $t=''
                next
            $if $t=~/=(.+)/
                $config_hash{$k}=$1
            $else
                $config_hash{$k}=1

        subcode: filter_test_config
            $if $t=~/--(disable|enable)-(.*-tests)/
                push @testmpi_config, $t
                $t=''
                next
            $elif $t=~/--disable-(romio|fortran|cxx)/
                push @testmpi_config, $t

        subcode: check_mpich_device
            $if $config_hash{device}=~/^(ch\d:\w+)/
                $ENV{mpich_device}=$1

            $if !$ENV{mpich_device}
                $ENV{mpich_device} = "ch4:ofi"
                push @mpich_config, "--with-device=ch4:ofi"

        subcode: post_filters
            push @testmpi_config, "--disable-perftest"

            $if $config_hash{pmix} or $config_hash{device}=~/ucx/ or $config_hash{pmi}=~/pmi2/
                push @testmpi_config, "--disable-spawn"

            $if $config_hash{device}!~/ch3:tcp/
                push @testmpi_config, "--disable-ft-tests"

            $if $config_hash{device}=~/ch3:sock/
                push @testmpi_config, "--disable-comm-overlap-tests"

            $if $config_hash{pm} eq "gforker"
                $if !$config_hash{namepublisher}
                    push @mpich_config, "--with-namepublisher=file"
                $else
                    $config_hash{conflict} = "Conflicting config option: --with-pm=gforker and --with-namepublisher=$config_hash{namepublisher}"

