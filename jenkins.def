include: macros_mymake/jenkins_old.def
include: macros_mymake/jenkins_new.def
include: macros_mymake/test_frame.def
include: macros_mymake/test_config.def
include: macros_mymake/test_makelog.def
include: macros_mymake/test_random.def
output_dir: ./mymake

macros: 
    # test_worker: sh mymake/test-worker.sh
    test_worker: perl mymake/test_mymake.pl

#---------------------------------------- 
page: test_mymake
    module: perl

    $global $compiler

    $call set_mymake_dir
    # my $config = $ENV{config}
    $call @test_mymake_config
    $if $config_hash{conflict}
        $call dump_skip_log
        exit 0

    $call set_N_MAKE_JOBS

    $call @dump_config
    $compiler = $ENV{compiler}

    $print Running $mymake_dir/$test_script.sh...
    my $time_start=time()
    my $ret = system "bash -xe $mymake_dir/$test_script.sh"
    my $time_finish=time()
    $if $ret
        $ret = $?>>8
    $else
        $call report_make_log

    exit $ret
    
    subcode: dump_config
        $print test_mymake.pl:
        $(for:jenkins,mymake_dir,compiler,config,queue,mpich_device,mpich_config,testmpi_config,N_MAKE_JOBS,out_of_tree)
            $print "    $1: $ENV{$1}"
        $(for:test_script)
            $print "    $1: $$1"

    subcode: set_N_MAKE_JOBS
        $if $ENV{N_MAKE_JOBS} > 0
            # user knows the best
        $else
            my $n = 16
            my $cpu_count = `grep -c -P '^processor\\s+:' /proc/cpuinfo`
            $if $cpu_count=~/^(\d+)/
                $n= $1
            $ENV{N_MAKE_JOBS}=$n

    subcode: dump_skip_log
        &call open_W, summary.junit.xml
            $print <testsuites>
            $print <testsuite failures="0" errors="0" skipped="1" tests="1" name="skip">
            $print <testcase name="1 - skip">
            $print <skipped type="conflict" message="$config_hash{conflict}" />
            $print </testcase>
            $print </testsuite>
            $print </testsuites>

page: test_build.sh
    module: general

    &call test_frame
        git submodule update --init --recursive
        sh autogen.sh
        if test x$out_of_tree = xtrue ; then
            mkdir build
            cd build
            ../configure --prefix=$PREFIX $mpich_config $testmpi_config
        else
            ./configure --prefix=$PREFIX $mpich_config $testmpi_config
        fi
        $call run_make
        make install
        $MPIEXEC -n 2 examples/cpi

        &call test_testing
            cd test/mpi
            $call run_make_testing

    subcode: run_make_testing
        if test x$skip_test = xcustom ; then
            $call copy_custom_testlist
            make V=1 testing
        else
            $call apply_xfail
            make testing
        fi

        subcode: copy_custom_testlist
            # cp -v testlist testlist.orig
            if test x$out_of_tree = xtrue ; then
                cp -v ../../../test/mpi/testlist.custom testlist
            else
                cp -v testlist.custom testlist
            fi

        subcode: apply_xfail
            perl $mymake_dir/apply_xfail.pl conf=maint/jenkins/xfail.conf netmod=$mpich_device queue=ib64 compiler=gnu config=default


page: test_quick.sh
    module: general

    export LD=ld.gold
    &call test_frame
        perl $mymake_dir/mymake.pl --prefix=$PREFIX $mpich_config
        ls -lt
        $call run_make
        make install
        $call run_make, hydra
        make hydra-install

        &call test_testing
            cp -r confdb/ test/mpi/confdb/
            cp maint/version.m4 test/mpi/
            cd test/mpi
            sh autogen.sh
            autoreconf -ivf
            ./configure $testmpi_config --disable-romio # disable io until they can run parallel
            $call run_make_testing

    subcode: run_make_testing
        if test x$skip_test = xcustom ; then
            perl $mymake_dir/runtests.pl -tests=testlist.custom -junitfile=summary.junit.xml
        else
            perl $mymake_dir/runtests.pl -tests=testlist,testlist.dtp -junitfile=summary.junit.xml
        fi

page: build_modules.sh
    module: general

    uname -a

    git clone https://github.com/pmodels/hwloc
    git clone https://github.com/pmodels/izem
    git clone https://github.com/pmodels/ucx
    # git clone https://github.com/ofiwg/libfabric
    git clone https://github.com/pmodels/libfabric
    git clone https://github.com/json-c/json-c jsonc

    $call config, hwloc, --enable-embedded-mode --enable-visibility
    $call config, izem, --enable-embedded
    $call config, ucx, --disable-shared --with-pic
    $call config, libfabric, --enable-embedded --disable-verbs
    $call config, jsonc 

    rm -rf */.git
    find . -name '*.o' |xargs rm -f
    tar czf modules.tar.gz hwloc izem ucx libfabric

    subcode: config(dir, @option)
        cd $(dir)
        $call @pre_$(dir)
        # ucx will need pkg-config macro: ~share/aclocal/pkg.m4
        sh autogen.sh
        ./configure $(option)
        make -j 16
        $call @post_$(dir)
        cd ..

    subcode: pre_libfabric
        git checkout -b mpich origin/v1.7.1-mpich
        git log --oneline -n 5

    subcode: post_ucx
        find . -name '*.la' |xargs --verbose sed -i "s,$PWD,MODDIR,g"

#---------------------------------------- 
page: apply_xfail
    module: perl
    my %opt
    $foreach $a in @ARGV
        $if $a=~/(\w+)=(\S+)/
            $opt{$1}=$2

    $if !$opt{netmod}
        $opt{netmod}="ch3:tcp"

    $if !$opt{job}
        $if $opt{netmod}=~/(ch\d)/
            $opt{job}=$1

    $if !-f $opt{conf}
        $print No config file exist, exit.
        exit 0

    my @C=($opt{job}, $opt{compiler}, $opt{config}, $opt{netmod}, $opt{queue})
    &call open_r, $opt{conf}
        $if /^\s*([^# ].*\S)\s*(sed .*)/
            my $cmd = $2
            my @cond=split /\s+/, $1
            my $mismatch
            $for $i=0:5
                $if $cond[$i] ne '*' && $cond[$i] ne $C[$i]
                    $mismatch=1
                    last
            $if !$mismatch
                $cmd=~s/ test\/mpi\// /
                $print " $cmd"
                system $cmd

#---------------------------------------- 
subcode: set_mymake_dir
    my $mymake_dir = $ENV{mymake_dir}
    $if ! $mymake_dir
        $if $0=~/^(\/.*)\//
            $mymake_dir = $1
        $elif $0=~/^(.*)\//
            my $pwd=`pwd`
            chomp $pwd
            $mymake_dir .= "$pwd/$1"
        $ENV{mymake_dir}=$mymake_dir

#---------------------------------------- 
page: jenkins.sh
    module: general

    $call @jenkins_old

page: slurm_job.sh
    module: general
    $call @slurm_job_old

