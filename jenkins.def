# include: macros_mymake/jenkins_old.def
include: macros_mymake/jenkins_new.def
output_dir: ./mymake

macros: 
    # test_worker: sh mymake/test-worker.sh
    test_worker: perl mymake/test_mymake.pl
    slurm_job:   sh mymake/slurm_job.sh

page: jenkins.sh
    module: general

    $(if:has_code:jenkins_old)
        $call jenkins_old
    $(else)
        $(test_worker)

page: slurm_job.sh
    module: general
    $call @slurm_job_old

#---------------------------------------- 
# For manual run from a scratch disk
page: run_pr
    module: perl

    $call set_mymake_dir
    $call checkout_pr
    $ENV{compiler}="gnu"
    $ENV{test_script}="test_quick"
    $ENV{skip_test}=1
    $ENV{config}="default"
    $if !$ENV{configOption}
        $ENV{configOption}="--enable-strict --disable-romio --disable-fortran"
    $ENV{SLURM_SUBMIT_HOST}=""
    $ENV{SLURM_SUBMIT_DIR}=""
    system "perl $mymake_dir/test_mymake.pl"

    subcode: checkout_pr
        my $pr=$ARGV[0]
        $if ! $pr > 0
            die "Usage: $0 pr-number\n"
        $call get_pr_info
        $if !$author
            die "Failed to fetch PR information\n"

        $if !-d "mpich-$pr"
            $call run, git clone https://github.com/pmodels/mpich mpich-$pr
            chdir "mpich-$pr" or die "Can't chdir mpich-$pr\n"
            $call run, git checkout -b $branch master
            $call run, git pull https://github.com/$author/mpich.git $branch
        $else
            chdir "mpich-$pr" or die "Can't chdir mpich-$pr\n"

    subcode: run(cmd)
        system("$(cmd)") == 0 or die "Error: $(cmd)\n"

    subcode: get_pr_info
        my ($author, $branch)
        &call open_r, curl https://api.github.com/repos/pmodels/mpich/pulls/$pr |
            $if /^\s*"label":\s*"(\w+):(\S+)",/
                $if $1 ne "pmodels"
                    $author = $1
                    $branch = $2
                    last
#---------------------------------------- 
page: test_mymake
    module: perl

    $call set_mymake_dir
    $global @mpich_config, @testmpi_config
    # my $compiler = $ENV{compiler}
    # my $queue = $ENV{queue}
    # my $config = $ENV{config}
    $call parse_config
    $call parse_trigger_phrase
    $call filter_config
    $call set_N_MAKE_JOBS

    $call @dump_config

    my $time_start=time()
    my $ret
    $if $ENV{test_script} eq "test_quick"
        $ret = system "bash $mymake_dir/test_quick.sh"
    $else
        $ret = system "bash $mymake_dir/test_build.sh"
    my $time_finish=time()
    $if $ret
        $ret = $?>>8
    $else
        $call report_make_log

    $if $ENV{SLURM_SUBMIT_HOST}
        $call CollectResults

    exit $ret
    
    subcode: dump_config
        $print test_mymake.pl:
        $(for:mymake_dir,compiler,config,queue,mpich_config,testmpi_config,N_MAKE_JOBS,test_script,SLURM_SUBMIT_HOST,SLURM_SUBMIT_DIR)
            $print "    $1: $ENV{$1}"

    subcode: parse_config
        my $config = $ENV{config}
        $if $config=~/^(default|ch3:tcp)/
            NOOP
        $elif $config=~/^ch[34]/
            push @mpich_config, "--with-device=$config"
        $elif $config eq "stricterror"
            push @mpich_config, "--enable-strict=error"

    subcode: parse_trigger_phrase
        my $trigger_phrase = $ENV{ghprbCommentBody} . ' ' . $ENV{configOption}
        $while $trigger_phrase =~/(--(enable|disable|with|without)-\S+)/g
            push @mpich_config, $1


    subcode: report_make_log
        my @make_log
        $call parse_make_log
        my $n_fails = @make_log
        my $n_tests = $n_fails+1
        &call open_W, summary.junit.xml
            $print <testsuites>
            $print <testsuite failures="$n_fails" errors="0" skipped="0" tests="$n_tests" name="build">
            my $dur = $time_finish-$time_start
            $print <testcase name="1 - build" time="$dur"></testcase>
            my $i = 1
            $foreach $t in @make_log
                $i++
                $print <testcase name="$i">
                $print <failure message="$t"></failure>
                $print </testcase>
            $print </testsuite>
            $print </testsuites>

        subcode: parse_make_log
            &call open_r, make.log
                $if /^(\S+:\d+:\s*(error|warning):\s*.*)/
                    push @make_log, $1

    subcode: CollectResults
        my @files=qw(apply-xfail.sh config.log make.log Makefile.custom summary.junit.xml)
        my $t = "find . \\( "
        $foreach $f in @files
            $t .= "-name \"$f\" -o "
        $t=~s/ -o $/ \\)/

        system "$t -exec ssh $ENV{SLURM_SUBMIT_HOST} \"mkdir -p $ENV{SLURM_SUBMIT_DIR}/\\\x24(dirname {})\" \\;"
        system "$t -exec scp {} $ENV{SLURM_SUBMIT_HOST}:$ENV{SLURM_SUBMIT_DIR}/{} \\;"

    subcode: RandomConfig
        my @enable_array=(
            'error-checking;no;runtime;all',
            'error-messages;all;generic;class;none',
            'timer-type;linux86_cycle;clock_gettime;gettimeofday',
            'timing;none;all;runtime;log;log_detailed',
            'g;none;all;handle;dbg;log;meminit;handlealloc;instr;mem;mutex;mutexnesting',
            'fast;O0;O1;O2;O3;ndebug;all;yes;none',
            'fortran',
            'cxx',
            'romio',
            'check-compiler-flags',
            'strict;c99;posix',
            'debuginfo',
            'weak-symbols;no;yes',
            'threads;single;multiple;runtime',
            'thread-cs;global',
            'refcount;lock-free;none',
            'mutex-timing',
            'handle-allocation;tls;mutex',
            'multi-aliases',
            'predefined-refcount',
            'alloca',
            'yield;sched_yield;select',
            'runtimevalues',
        )
        my @with_array=(
            'logging;none',
            'pmi;simple',
            'pm;gforker',
            'namepublisher;no;file',
            'device;ch3;ch3:sock',
            'shared-memory;sysv',
        )
        $call rand_array, enable_array, enable, disable
        $call rand_array, with_array, with, without

        subcode: rand_array(array, opt, neg)
            $foreach $o in @$(array)
                $if rand(10)>5
                    next
                my @parts=split /;/, $o
                my $n=@parts
                $if $n==1
                    $if rand(10)>5
                        push @mpich_config, "--$opt-$o"
                    $else
                        push @mpich_config, "--$neg-$o"
                $else
                    my $i = int(rand($n)-1)+1
                    push @mpich_config, "--$opt-$parts[0]=$parts[$i]"

    subcode: filter_config
        $if @mpich_config
            my (%config_hash)
            $foreach $t in @mpich_config
                my $k=$t
                $k=~s/=.*$//
                $k=~s/^--(disable|enable|with|without)-//
                $if $config_hash{$k}
                    $t=''
                    next
                $config_hash{$k}=1
                
                $if $t=~/--(disable|enable)-(.*-tests)/
                    push @testmpi_config, $t
                    $t=''
                    next
                $if $t=~/ch3:sock/
                    push @testmpi_config, "--disable-ft-tests"
                    push @testmpi_config, "--disable-comm-overlap-tests"
                    next

            my $t = join(' ', @mpich_config)
            $if $t=~/gforker/ 
                $if $t!~/--with-namepublisher/
                    $t .= " --with-namepublisher=file"
                $else
                    $t=~s/--with-pm=gforker//
            $ENV{mpich_config}=$t

        $if @testmpi_config
            my $t=join ' ', @testmpi_config
            $ENV{testmpi_config} = $t

        $if $ENV{queue} eq "ubuntu32" and $ENV{compiler} eq "solstudio"
            $ENV{CFLAGS}="-O1"

    subcode: set_N_MAKE_JOBS
        my $n = 8
        my $cpu_count = `grep -c -P '^processor\\s+:' /proc/cpuinfo`
        $if $cpu_count=~/^(\d+)/
            $n= $1
        $ENV{N_MAKE_JOBS}=$n

page: test_build.sh
    module: general

    &call test_frame
        git submodule update --init --recursive
        $call run, sh autogen.sh
        $call run, ./configure --prefix=$PREFIX $mpich_config
        $call run_make
        $call run, make install
        $call run, $MPIEXEC -n 2 examples/cpi

        &call test_testing
            cd test/mpi
            $call run, sh autogen.sh
            $call run, ./configure $testmpi_config
            make testing

page: test_quick.sh
    module: general

    export MODDIR=$PWD/modules
    mkdir -p $MODDIR
    pushd $MODDIR
    tar xf $mymake_dir/modules.tar.gz
    popd
    &call test_frame
        $call run, perl $mymake_dir/mymake.pl --prefix=$PREFIX $mpich_config
        $call run_make
        $call run, make install
        $call run_make, hydra
        $call run, make hydra-install

        &call test_testing
            $call run, make test

page: build_modules.sh
    module: general

    git clone https://github.com/pmodels/hwloc
    git clone https://github.com/pmodels/izem
    git clone https://github.com/pmodels/ucx
    git clone https://github.com/ofiwg/libfabric

    $call config, hwloc, --enable-embedded-mode --enable-visibility
    $call config, izem, --enable-embedded
    $call config, ucx, --disable-shared
    $call config, libfabric, --enable-embedded

    tar czf modules.tar.gz hwloc izem ucx libfabric

    subcode: config(dir, option)
        cd $(dir)
        sh autogen.sh
        ./configure $(option)
        make -j 16
        cd ..

#---------------------------------------- 
subcode: test_frame
    $call test_prepare
    set -o pipefail
    BLOCK

    subcode: run(cmd)
        $(cmd) 2>&1 || exit 1

    subcode: run_make(@target)
        make -j$N_MAKE_JOBS $(target) 2>&1 | tee -a make.log
        if test "$?" != "0"; then
            exit $?
        fi

    subcode: test_prepare
        $call pre_check
        $call PrepareEnv
        if test -d $HOME/software/autotools/bin; then
            export PATH=$HOME/software/autotools/bin:$PATH
        fi

        $call SetCompiler
        $(for:autoconf,automake,libtool)
            which $1
            $1 --version
        $(for:CC,CXX,F77,FC)
            export $1
            which $$1
            $$1 --version
        WORKSPACE=$PWD
        SRC=$PWD
        # $call prepare_from_tarball
        PREFIX=$WORKSPACE/_inst
        MPIEXEC=$PREFIX/bin/mpiexec

        subcode: pre_check
            set -x
            set -e
            hostname
            date
            uptime
            pgrep mpiexec | wc -l

    subcode: test_testing
        if test x$skip_test = x1 ; then 
            exit 0
        else
            export PATH=$PREFIX/bin:$PATH
            export CPATH=$PREFIX/include:$CPATH
            export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH
            BLOCK
        fi

template: SetCompiler
    case "$compiler" in
        "gnu")
            case "$queue" in
                "osx")
                    CC=gcc-7
                    CXX=g++-7
                    F77=gfortran-7
                    FC=gfortran-7
                    ;;
                *)
                    CC=gcc
                    CXX=g++
                    F77=gfortran
                    FC=gfortran
                    ;;
            esac
            ;;
        "clang")
            CC=clang
            CXX=clang++
            F77=gfortran
            FC=gfortran
            ;;
        "intel")
            if test -e /etc/redhat-release ; then
                module load intel-parallel-studio
            fi
            CC=icc
            CXX=icpc
            F77=ifort
            FC=ifort
            ;;
        "pgi")
            if test -e /etc/redhat-release ; then
                module load pgi
            else
                soft add +pgi
            fi
            CC=pgcc
            CXX=pgc++
            F77=pgf77
            FC=pgfortran
            ;;
        "absoft")
            if test -e /etc/redhat-release ; then
                module load absoft
            else
                soft add +absoft
            fi
            CC=gcc
            CXX=g++
            F77=af77
            FC=af90
            ;;
        "nag")
            if test -e /etc/redhat-release ; then
                module load nag
            else
                soft add +nagfor
            fi
            CC=gcc
            CXX=g++
            F77=nagfor
            FC=nagfor
            FFLAGS="-mismatch"
            FCFLAGS="-mismatch"
            export FFLAGS
            export FCFLAGS
            ;;
        "solstudio")
            case "$queue" in
                "ubuntu32" | "ib64" )
                    soft add +solarisstudio-12.4
                    ;;
                "solaris")
                    export PATH=/opt/developerstudio12.5/bin:$PATH
                    ;;
            esac
            if test -e /etc/redhat-release ; then
                module load solarisstudio
            fi
            CC=suncc
            CXX=sunCC
            F77=sunf77
            FC=sunf90
            ;;
        *)
            echo "Unknown compiler suite"
            exit 1
    esac

#---------------------------------------- 
subcode: set_mymake_dir
    my $mymake_dir = $ENV{mymake_dir}
    $if ! $mymake_dir
        $if $0=~/^(\/.*)\//
            $mymake_dir = $1
        $elif $0=~/^(.*)\//
            my $pwd=`pwd`
            chomp $pwd
            $mymake_dir .= "$pwd/$1"
        $ENV{mymake_dir}=$mymake_dir

