subcode: _autoload
    $(set:intra_algo=MPIR_I$(coll)_sched_intra_$1($(args_$(coll)), s))
    $(set:inter_algo=MPIR_I$(coll)_sched_inter_$1($(args_$(coll)), s))

macros:
    is_intracomm: comm_ptr->comm_kind == MPIR_COMM_KIND__INTRACOMM
    is_smpcomm: comm_ptr->hierarchy_kind == MPIR_COMM_HIERARCHY_KIND__PARENT
    do_smp: MPIR_CVAR_ENABLE_SMP_COLLECTIVE && !MPIR_CVAR_ENABLE_SMP_BCAST
    do_device: MPIR_CVAR_IBCAST_DEVICE_COLLECTIVE && MPIR_CVAR_DEVICE_COLLECTIVE

fncode: MPI_Ibcast(..., MPI_Comm comm, MPI_Request * request)
    MPIR_Comm_get_ptr(comm, comm_ptr)
    $fcall MPIR_Ibcast($(args_bcast), &request_ptr)
    $if !request_ptr
        request_ptr = MPIR_Request_create_complete(MPIR_REQUEST_KIND__COLL)
        *request = request_ptr->handle

fncode: MPIR_Ibcast(PARAMS_BCAST, MPIR_Request **request)
    $if $(do_device)
        return MPID_Ibcast($(args_bcast), request)
    $else
        return MPIR_Ibcast_impl($(args_bcast), request)

fncode: MPIR_Ibcast_impl
    $if $(is_intracomm)
        $call switch_algo, gentran_tree, gentran_scatter_recexch_allgather, gentran_ring

    $fcall MPIR_Sched_next_tag(comm_ptr, &tag)
    $fcall MPIR_Sched_create(&s)
    $fcall MPIR_Ibcast_sched($(args_bcast), s)
    $fcall MPIR_Sched_start(&s, comm_ptr, tag, request)

fncode: MPIR_Ibcast_sched(PARAMS_BCAST, MPIR_Sched_t s)
    $if $(do_device)
        return MPID_Ibcast_sched($(args_bcast), s)
    $else
        return MPIR_Ibcast_sched_impl($(args_bcast), s)

fncode: MPIR_Ibcast_sched_impl(PARAMS_BCAST, MPIR_Sched_t s)
    $if $(is_intracomm)
        $if $(is_smpcomm) && $(do_smp)
            return $(intra_algo:smp)
        $else
            $switch MPIR_Ibcast_intra_algo_choice
                $(for:t in binomial, scatter_recursive_doubling_allgather, scatter_ring_allgather)
                    $of MPIR_IBCAST_INTRA_ALGO_$(t:uc)
                        return $(intra_algo:$(t))
                $of others
                    return $(intra_algo:auto)
    $else
        $call switch_inter, flat

fncode: MPIR_Ibcast_sched_intra_auto(PARAMS_BCAST, MPIR_Sched_t s)
    comm_size = comm_ptr->local_size
    MPIR_Datatype_get_size_macro(datatype, type_size)
    nbytes = type_size*count

    $(set:cvar=MPIR_CVAR_BCAST)
    $if nbytes < $(cvar)_SHORT_MSG_SIZE || comm_size < $(cvar)_MIN_PROCS
        $fcall $(intra_algo:binomial)
    $else
        $fcall $(intra_algo:scatter_ring_allgather)

fncode: MPIR_Ibcast_sched_inter_auto(PARAMS_BCAST, MPIR_Sched_t s)
    return $(intra_algo:flat)

