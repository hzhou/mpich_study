include: coll_common.def

# run: t

page: coll_impl.h, from templates/coll_impl.h
    module: general
    subcode: decl_algo_enum_types
        #- 84 = ((15+5)*2+2) *2
        $call map_each_coll, decl_algo_enum
        #- 2
        $(for:bcast,reduce)
            extern MPIR_Tree_type_t MPIR_I$1_tree_type;
    subcode: decl_algo_enum(coll)
        $(if:coll~.*scan)
            $(set:intra_list=intra)
        $(else)
            $(set:intra_list=intra,inter)
        $(for:intra in $(intra_list))
            $(set:C=MPIR_$(coll:ucfirst)_$(intra)_algo)
            typedef enum $(C)_t {
                $(C:uc)_AUTO,
                $(for:t in $(algos_$(coll)_$(intra)))
                    $(C:uc)_$(t:uc),
            } $(C)_t;
            extern $(C)_t $(C)_choice;
            NEWLINE

page: coll_impl.c, from templates/coll_impl.c
    module: c
    subcode: global_coll_algo_vars
        #- 84 = ((15+5)*2+2) *2
        $call map_each_coll, add_algo_choice
        #- 2
        $(for:bcast,reduce,allreduce)
            MPIR_Tree_type_t MPIR_I$1_tree_type = MPIR_TREE_TYPE_KARY;

        subcode: add_algo_choice(coll)
            $(set:C=MPIR_$(coll:ucfirst)_intra_algo)
            enum coll_algo $(C)_choice;
        subcode: add_algo_choice_old(coll)
            $(set:C=MPIR_$(coll:ucfirst)_intra_algo)
            $(C)_t $(C)_choice = 0;
            $(if:coll!~.*scan)
                $(set:C=MPIR_$(coll:ucfirst)_inter_algo)
                $(C)_t $(C)_choice = 0;

    subcode: check_cvar_algo_choices
        #- 84 = ((15+5)*2+2) *2
        $call map_each_coll, get_algo_choice
        $(for:bcast,reduce)
            $call get_tree_type, i$1

        subcode: get_algo_choice(coll)
            $(if:coll~.*scan)
                $(set:intra_list=intra)
            $(else)
                $(set:intra_list=intra,inter)
            # ----
            $(for:intra in $(intra_list))
                $:: \x2f* $(coll:ucfirst) $(intra) */
                $(set:v=MPIR_$(coll:ucfirst)_$(intra)_algo)
                $(set:cvar=MPIR_CVAR_$(coll:uc)_$(intra:uc)_ALGORITHM)
                # -----
                $(for:t in $(algos_$(coll)_$(intra)))
                    $call set_str, $(t)
                    $case 0 == strcmp($(cvar), "$(str)")
                        $(v)_choice = $(v:uc)_$(t:uc);
                $else
                    $(v)_choice = $(v:uc)_AUTO;
                NEWLINE
            subcode: set_str(t)
                $(if:t~gentran_)
                    $(if:coll~iallgather and t~gentran_(ring|brucks))
                        $(set:str=$(t))
                    $(else)
                        $(set:str=$(t:8:))
                $(else)
                    $(set:str=$(t))
                $(export:str)


        subcode: get_tree_type(coll)
            $(set:v=MPIR_$(coll:ucfirst)_tree_type)
            $(set:cvar=MPIR_CVAR_$(coll:uc)_TREE_TYPE)
            $(for:t in kary, knomial_1, knomial_2)
                $case 0 == strcmp($(cvar), "$(t)")
                    $(v) = MPIR_TREE_TYPE_$(t:uc);
            $else
                $(v) = MPIR_TREE_TYPE_KARY;

#---------------------------------------- 
fncode: MPII_Coll_init
    $call @get_choices
    $fcall MPID_Progress_register_hook(MPIDU_Sched_progress, & MPIR_Nbc_progress_hook_id)
    $fcall MPII_Stubtran_init
    $fcall MPII_Gentran_init
    $fcall MPII_Stubalgo_init
    $fcall MPII_Treealgo_init
    $fcall MPII_Recexchalgo_init

fncode: MPII_Coll_finalize
    $fcall MPID_Progress_deregister_hook(MPIR_Nbc_progress_hook_id)
    $fcall MPII_Gentran_finalize
    $fcall MPII_Stubalgo_finalize

fncode: MPIR_Coll_safe_to_block
    return MPII_Gentran_scheds_are_pending() == false

fncode: MPIR_Coll_comm_init(MPIR_Comm *comm)
    $fcall MPII_Stubalgo_comm_init(comm)
    $fcall MPII_Treealgo_comm_init(comm)
    $fcall MPII_Stubtran_comm_init(comm)
    $fcall MPII_Gentran_comm_init(comm)

#---------------------------------------- 
page: t
    module: perl
    run: perl out/t.pl > /tmp/t.h

    my $src="$ENV{HOME}/work/mpich-github"
    my (%names, %others)
    &call open_r, $src/src/mpi/coll/include/coll_impl.h
        $if /MPIR_\w+_ALGO_(\w+)/
            $if $1 ne "AUTO"
                $names{lc($1)}++
        $elif /^\s*(MPIR_\w+)/
            $others{$1}++

    $call cmp_sub
    my @t = sort cmp_sub keys %names
    $print "enum coll_algo {"
    $print "    COLL_ALGO_auto = 0,"
    $foreach $t in @t
        $print "    COLL_ALGO_$t,"
    $print "};"

    $foreach $k in sort keys %others
        $print -- $k

    subcode: cmp_sub
        $sub cmp_sub
            return $a cmp $b

