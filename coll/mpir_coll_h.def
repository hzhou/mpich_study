include: coll_common.def

# run: t

page: mpir_coll.h, from templates/mpir_coll.h
    module: general

subcode: decl_mpir_colls
    $:: /* temporary macros just to make this file reads better */
    #define _err   MPIR_Errflag_t *errflag
    #define _req   MPIR_Request **request
    #define _sched MPIR_Sched_t s
    NEWLINE
    $map decl, $(coll_list)
    $map decl_neighbor, $(neighbor_list)

    $:: /* undef temporary macros */
    $(for:_err,_req,_sched)
        #undef $1

    subcode: decl(coll)
        $:: /********** $(coll:ucfirst) **********/
        #define PARAMS_$(coll:uc) \
            $call param_$(coll)
            MPIR_Comm *comm_ptr
        $call _decl, $(coll), PARAMS_$(coll:uc), _err

        $call decl_i, $(coll)

    subcode: decl_i(coll)
        $:: /********** I$(coll) **********/
        $call _decl, i$(coll), PARAMS_$(coll:uc), _req
        $call _decl, i$(coll)_sched, PARAMS_$(coll:uc), _sched

    subcode: decl_neighbor(coll)
        $:: /********** Neighbor_$(coll) **********/
        $(if:coll=alltoallw)
            $(set:decl_neighbor=1)
            $(set:P=PARAMS_NEIGHBOR_ALLTOALLW)
            #define $(P) \
                $call param_alltoallw
                MPIR_Comm *comm_ptr
        $(else)
            $(set:P=PARAMS_$(coll:uc))

        $call _decl, neighbor_$(coll), $(P)
        $call _decl, ineighbor_$(coll), $(P), _req
        $call _decl, ineighbor_$(coll)_sched, $(P), _sched

    # -----
    subcode: _decl(name, @params)
        int MPIR_$(name:ucfirst)($(params));
        $(set:algos=impl)
        $(for:t in intra,inter,allcomm)
            $(for:a in $(decl_$(name)_$(t)))
                $(set-2:algos=$(algos), $(t)_$(a))
        $(for:a in $(algos))
            int MPIR_$(name:ucfirst)_$(a)($(params));
        NEWLINE

#---------------------------------------- 
page: t
    module: perl
    run: perl out/t.pl > macros/algos_mpir_coll_h.def
    # generate algos macros

    my $src="$ENV{HOME}/work/mpich-github"
    my @func_list
    &call open_r, $src/src/include/mpir_coll.h
        $if /^int\s+MPIR_(\w+)\(/
            push @func_list, $1

    my %algos
    $foreach $f in @func_list
        # $print $f
        $if $f=~/(\w+)_(intra|inter|allcomm)_(\w+)/i
            my $k = "algos_".lc($1)."_".lc($2)
            $algos{$k}.=" $3"

    $print "macros:"
    $(set:nhb=)
    $(for:c in $(neighbor_list))
        $(set-1:nhb=$(nhb), neighbor_$(c))
    $(for:c in $(coll_list)$(nhb))
        $(for:t in intra,inter,allcomm)
            $call dump_algos, $(c), $(t)
        $(for:t in intra,inter,allcomm)
            $call dump_algos, i$(c), $(t)
        $(for:t in intra,inter,allcomm)
            $call dump_algos, i$(c)_sched, $(t)
        $print

    subcode: dump_algos(c, t)
        my $k = "algos_$(c)_$(t)"
        $if $algos{$k}
            my @t
            $while $algos{$k}=~/(\w+)/g
                push @t, "$1"
            my $t = join(', ', @t)
            $print "    decl_$(c)_$(t): $t"
        $else
            $print "    decl_$(c)_$(t):"

    subcode: dump_algos_old(c, t)
        my $k = "algos_$(c)_$(t)"
        $if $algos{$k}
            my @t
            $while $algos{$k}=~/(\w+)/g
                push @t, "$(t)_$1"
            my $t = join(', ', @t)
            $print "    algos_$(c):: $t"
