subcode:: mpi_init_0
    #ifdef HAVE_ERROR_CHECKING
    MPID_BEGIN_ERROR_CHECKS;
    $if mpi_errno
        goto fn_fail;
    MPID_END_ERROR_CHECKS;
    #endif

#-- inside mpir_init_1 -> understand and simplify
subcode: set_do_error_checks_1
    #ifdef HAVE_ERROR_CHECKING
    MPIR_Process.do_error_checks = 1;
    #else
    MPIR_Process.do_error_checks = 0;
    #endif

subcode: set_do_error_checks_2
    #if defined(HAVE_ERROR_CHECKING) && (HAVE_ERROR_CHECKING == MPID_ERROR_LEVEL_RUNTIME)
    MPIR_Process.do_error_checks = MPIR_CVAR_ERROR_CHECKING;
    #endif

#----------------------------------------------- 
/* Validate parameters if error checking is enabled */
subcode: error_check_recv
    &call error_checking,
        MPIR_Comm_valid_ptr(comm_ptr, mpi_errno, FALSE);
        $if mpi_errno
            goto fn_fail;

        MPIR_ERRTEST_COUNT(count, mpi_errno);
        MPIR_ERRTEST_RECV_RANK(comm_ptr, source, mpi_errno);
        MPIR_ERRTEST_RECV_TAG(tag, mpi_errno);

        $call errtest_datatype
        /* Validate buffer */
        MPIR_ERRTEST_USERBUFFER(buf, count, datatype, mpi_errno);

subcode: error_check_send
    &call error_checking
        MPIR_Comm_valid_ptr(comm_ptr, mpi_errno, FALSE);
        if (mpi_errno)
            goto fn_fail;

        MPIR_ERRTEST_COUNT(count, mpi_errno);
        MPIR_ERRTEST_SEND_RANK(comm_ptr, dest, mpi_errno);
        MPIR_ERRTEST_SEND_TAG(tag, mpi_errno);

        $call errtest_datatype
        /* Validate buffer */
            MPIR_ERRTEST_USERBUFFER(buf, count, datatype, mpi_errno);

#----------------------------------------------- 
subcode: error_check_comm
    &call error_checking
        MPIR_ERRTEST_COMM(comm, mpi_errno);
        $(if:FunctionName=MPI_Recv)
            /* NOTE: MPI_STATUS_IGNORE != NULL */
            MPIR_ERRTEST_ARGNULL(status, "status", mpi_errno);

subcode: errtest_datatype
    /* Validate datatype handle */
    MPIR_ERRTEST_DATATYPE(datatype, "datatype", mpi_errno);

    /* Validate datatype object */
    $if HANDLE_GET_KIND(datatype) != HANDLE_KIND_BUILTIN
        MPIR_Datatype *datatype_ptr = NULL;

        MPIR_Datatype_get_ptr(datatype, datatype_ptr);
        MPIR_Datatype_valid_ptr(datatype_ptr, mpi_errno);
        $if mpi_errno
            goto fn_fail;
        MPIR_Datatype_committed_ptr(datatype_ptr, mpi_errno);
        $if mpi_errno
            goto fn_fail;

