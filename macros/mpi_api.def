#---- MPI -----------------------------------
subcode: _autoload
    $register_name(buf) void *
    $register_name(count) MPI_Aint
    $register_name(datatype) MPI_Datatype
    $register_name(comm) MPI_Comm
    $register_name(source,dest,tag) int

macros:
    # MPI interface uses specific names with specific types
    sendbuf: const void *buf
    recvbuf: void *buf
    count: int count
    status: MPI_Status *status

subcode: _autoload
    $fntype int (*MPI_Send)($(sendbuf),$(count),datatype,dest,tag,comm)
    $fntype int (*MPI_Recv)($(recvbuf),$(count),datetype,source,tag,comm, $(status))

#---- on_fail --------------------------------
subcode: on_fail_MPI_Send
    $call set_error, "**mpi_send", "**mpi_send %p %d %D %i %t %C", buf, count, datatype, dest, tag, comm

macros:
    LOG_MPI_Send: TERSE,PT2PT,FRONT

subcode: error_check_MPI_Send

#---- MPIR ------------------------------------ 
subcode: _autoload
    $register_name(count) MPI_Aint
    $register_name(comm_ptr) MPIR_Comm *
    $register_name(status) MPI_Status *
    $register_name(context_offset) int

#---- MPID ------------------------------------ 
macros:
    si_int: MPL_STATIC_INLINE_PREFIX int
    Cnt: MPI_Aint count
    av_addr: MPIDI_av_entry_t *addr
    pp_req: MPIR_Request **request

subcode: _autoload
    $fntype $(si_int) (*MPIDI_UCX_send)($(sendbuf),$(Cnt),datatype,rank,tag,comm_ptr,context_offset, $(av_addr), $(pp_req), int have_request, int is_sync
