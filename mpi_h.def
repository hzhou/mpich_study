#---- OPAQUE HANDLES ----
subcode: _autoload
    # bit 30-31
    $enum(MPII_Handle_kind) HANDLE_KIND_INVALID, HANDLE_KIND_BUILTIN, HANDLE_KIND_DIRECT, HANDLE_KIND_INDIRECT
    # bit 26-29
    $enum(MPII_Object_kind) MPIR_COMM=1, MPIR_GROUP, MPIR_DATATYPE, MPIR_FILE, MPIR_ERRHANDLER, MPIR_OP, MPIR_INFO, MPIR_WIN, MPIR_KEYVAL, MPIR_ATTR, MPIR_REQUEST, MPIR_PROCGROUP, MPIR_VCONN, MPIR_GREQ_CLASS

subcode: _autoload
    $call MPI_Comm
    $call MPI_Datatype
    $call MPI_Op

#------
subcode: MPI_Comm # KIND = 1
    $typedef(MPI_Comm) int
    $(set:T=MPI_Comm)
    $call def, COMM_NULL,  0x04000000
    $call def, COMM_WORLD, 0x44000000
    $call def, COMM_SELF,  0x44000001

subcode: MPI_Datatype # KIND = 3
    $typedef(MPI_Datatype) int
    $(set:T=MPI_Datatype)
    $call def, DATATYPE_NULL,   0x0c000000
    $call def, CHAR,            0x4c000101
    $call def, UNSIGNED_CHAR,   0x4c000102
    $call def, SHORT,           0x4c000203
    $call def, UNSIGNED_SHORT,  0x4c000204
    $call def, INT,             0x4c000405
    $call def, UNSIGNED,        0x4c000406
    $call def, LONG,            0x4c000807
    $call def, UNSIGNED_LONG,   0x4c000808
    $call def, LONG_LONG_INT,   0x4c000809
    $call def, FLOAT,           0x4c00040a
    $call def, DOUBLE,          0x4c00080b
    $call def, LONG_DOUBLE,     0x4c00100c
    $call def, BYTE,            0x4c00010d
    $call def, WCHAR,           0x4c00040e
    $call def, PACKED,          0x4c00010f
    $call def, LB,              0x4c000010
    $call def, UB,              0x4c000011
    $call def, 2INT,            0x8c000816
    $call def, SIGNED_CHAR,     0x4c000118
    $call def, UNSIGNED_LONG_LONG, 0x4c000819
    # struct types
    $call def, FLOAT_INT,       0x8c000000
    $call def, DOUBLE_INT,      0x8c000001
    $call def, LONG_INT,        0x8c000002
    $call def, SHORT_INT,       0x8c000003
    $call def, LONG_DOUBLE_INT, 0x8c000004
    # Fortran types
    $call def, CHARACTER,       0x4c00011a
    $call def, INTEGER,         0x4c00041b
    $call def, REAL,            0x4c00041c
    $call def, LOGICAL,         0x4c00041d
    $call def, COMPLEX,         0x4c00081e
    $call def, DOUBLE_PRECISION,0x4c00081f
    $call def, 2INTERGER,       0x4c000820
    $call def, 2REAL,           0x4c000821
    $call def, DOUBLE_COMPLEX,  0x4c001022
    $call def, 2DOUBLE_PRECISION, 0x4c001023
    $(if:0)
        $call def, 2COMPLEX,        0x4c001024
        $call def, 2DOUBLE_COMPLEX, 0x4c002025
    # Size-specific
    $call def, REAL4,           0x4c000427
    $call def, REAL8,           0x4c000829
    $call def, REAL16,          0x4c00102b
    $call def, COMPLEX8,                0x4c000828
    $call def, COMPLEX16,               0x4c00102a
    $call def, COMPLEX32,               0x4c00202c
    $call def, INTEGER1,                0x4c00012d
    $call def, INTEGER2,                0x4c00022f
    $call def, INTEGER4,                0x4c000430
    $call def, INTEGER8,                0x4c000831
    # $call def, INTEGER16,               0x4c001032
    $call def, CXX_BOOL,        0x4c000133
    $call def, CXX_FLOAT_COMPLEX,0x4c000834
    $call def, CXX_DOUBLE_COMPLEX,0x4c001035
    $call def, CXX_LONG_DOUBLE_COMPLEX,0x4c002036

    $call def, INT8_T,          0x4c000137
    $call def, INT16_T,         0x4c000238
    $call def, INT32_T,         0x4c000439
    $call def, INT64_T,         0x4c00083a
    $call def, UINT8_T,         0x4c00013b
    $call def, UINT16_T,        0x4c00023c
    $call def, UINT32_T,        0x4c00043d
    $call def, UINT64_T,        0x4c00083e
    $call def, C_BOOL,          0x4c00013f
    $call def, C_FLOAT_COMPLEX, 0x4c000840
    $call def, C_DOUBLE_COMPLEX,0x4c001041
    $call def, C_LONG_DOUBLE_COMPLEX,0x4c002042
    # address/offset
    $call def, AINT,            0x4c000843
    $call def, OFFSET,          0x4c000844
    $call def, COUNT,           0x4c000845
    # extension
    $call def, C_FLOAT16,       0x4c000243

    $define(MPI_LONG_LONG) MPI_LONG_LONG_INT
    $define(MPI_C_COMPLEX) MPI_C_FLOAT_COMPLEX

#------
subcode: MPI_Op # KIND = 6
    $typedef(MPI_Op) int
    $(set:T=MPI_Op)
    $call def, MAX,     0x58000001
    $call def, MIN,     0x58000002
    $call def, SUM,     0x58000003
    $call def, PROD,    0x58000004
    $call def, LAND,    0x58000005
    $call def, BAND,    0x58000006
    $call def, LOR,     0x58000007
    $call def, BOR,     0x58000008
    $call def, LXOR,    0x58000009
    $call def, BXOR,    0x5800000a
    $call def, MINLOC,  0x5800000b
    $call def, MAXLOC,  0x5800000c
    $call def, REPLACE, 0x5800000d
    $call def, NO_OP,   0x5800000e

#-----------------------
subcode: def(name, val)
    $define(MPI_$(name)) (($(T))$(val))

#---- MPIR Objects -----------------------------
macros: 
    MPI_KIND: ((($1)>>26)&0xf)
    OBJ_KIND: ((($1)>>30)&0x3)
    # INDIRECT: bit 12-25 BLOCK, bit 0-11 INDEX
    #   DIRECT: bit 0-25 INDEX

subcode: set_MPI_KIND(a, kind)
    $(a) |= $(kind)<<26
subcode: set_OBJ_KIND(a, kind)
    $(a) |= $(kind)<<30

#----------------------------------------
subcode: MPIR_Comm_get_ptr(h, ptr)
    $call MPIR_Getb_ptr, $(h), $(ptr)

subcode: MPIR_Getb_ptr(h, ptr, T, bmsk)
    $switch $(OBJ_KIND:$(h))
        $of HANDLE_KIND_BUILTIN
            $(ptr)=MPIR_$(T)_builtin+($(h)&$(bmsk))
        $of HANDLE_KIND_DIRECT
            $(ptr)=MPIR_$(T)_direct+($(h)&0x3ffffff)
        $of HANDLE_KIND_INDIRECT
            $(ptr)=(MPIR_$(T)*)MPIR_Handle_get_ptr_indirect($(h), &MPIR_$(T)_mem)
        $of others
            $(ptr)=0

fncode: MPIR_Handle_indirect_init(void** pp, int* pi, n_blocks, int cnt, n_obj_size, int kind)
    $(mset:blks=*pp, i=*pi)
    $if !$(blks)
        $(blks) = malloc(n_blocks*sizeof(void*))
        $if !$(blks)
            return 0
        $(i) = 0
    $if $(i)>=n_blocks
        # out of space
        return 0
    # --------------
    $local void * p
    p = malloc(cnt * n_obj_size)
    $if !p
        return 0
    $my pc = (char*) p
    $my MPIR_Handle_common * ph
    $for i=0:cnt
        ph = (MPIR_Handle_common*)(void*)pc
        pc += n_obj_size
        ph->next = pc
        ph->handle = ((unsigned)0x11<<30)|(kind<<26)|($(n)<<12|i
    ph->next = 0
    # --------------
    ($(blks))[$(i)] = p
    $(i) += 1
    return p

fncode: MPIR_Handle_free(void** pp, n_size)
    $for i=0:n_size
        free(pp[i])
    free(pp)

subcode: _autoload
    $register_name(mpir_obj) MPIR_Object_alloc_t*

fncode: MPIR_Handle_obj_alloc(mpir_obj)

fncode: MPIR_Handle_get_ptr_indirect(int h, mpir_obj)
