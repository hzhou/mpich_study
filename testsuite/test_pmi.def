subcode: _autoload
    $uselib src/util/pmi/mpir_pmi.c src/pmi/simple/simple_pmi.c src/pmi/simple/simple_pmiutil.c

    $include mpichconf.h
    $global struct MPIR_Process_t MPIR_Process

    $declare int MPIR_pmi_init(void)
    $declare int MPIR_pmi_finalize(void)
    $declare int MPIR_pmi_barrier(void)
    $declare int MPIR_pmi_get_universe_size(int *)

    $define PMI_DOMAIN_ALL 0
    $define PMI_DOMAIN_NODE_ROOTS 1
    $declare int MPIR_pmi_bcast(void *buf, int size, int domain)
    $declare int MPIR_pmi_allgather(const void *sendbuf, int size, void *recvbuf, int domain)

page: test_pmi, basic_frame
    module: c
    CFLAGS: -Iout -Isrc/include -Isrc/mpl/include -Isrc/pmi/include -Isrc/util/nodemap
    exe: mpirun -n 5 out/test_pmi

    $print Hello World

    tn_ret = MPIR_pmi_init()
    $print "%d / %d, has_parent: %d, appnum: %d", MPIR_Process.rank, MPIR_Process.size, MPIR_Process.has_parent, MPIR_Process.appnum

    $if MPIR_Process.rank == 0
        int universe_size = 777;
        tn_ret = MPIR_pmi_get_universe_size(&universe_size)
        $print "universe_size(%d): %d\n", tn_ret, universe_size

    $if 1
        char testbuf[10] = "----";
        testbuf[0] = '0' + MPIR_Process.rank;
        tn_ret = MPIR_pmi_bcast(testbuf, 5, PMI_DOMAIN_ALL)
        $print "test MPIR_pmi_bcast [%d]: %s", MPIR_Process.rank, testbuf

    $if 1
        char sendbuf[10] ="----";
        char *recvbuf = calloc(4 , MPIR_Process.size + 1);
        sendbuf[0] = '0' + MPIR_Process.rank;
        tn_ret = MPIR_pmi_allgather(sendbuf, 4, recvbuf, PMI_DOMAIN_ALL)
        $print "test MPIR_pmi_allgather [%d]: %s", MPIR_Process.rank, recvbuf

    MPIR_pmi_barrier();
    $if MPIR_Process.rank == 1
        $print "num_nodes = %d", MPIR_Process.num_nodes
        $print "node_map: -"
        $for i=0:MPIR_Process.size
            $print "$i: %d, -", MPIR_Process.node_map[i]
        $print
    MPIR_pmi_barrier();

    $if 1
        char testbuf2[10] = "----";
        testbuf2[0] = '0' + MPIR_Process.rank;
        tn_ret = MPIR_pmi_bcast(testbuf2, 5, PMI_DOMAIN_NODE_ROOTS)
        $print "test MPIR_pmi_bcast [%d]: %s", MPIR_Process.rank, testbuf2

    $if 1
        char sendbuf2[10] ="----";
        char *recvbuf2 = calloc(4 , MPIR_Process.num_nodes + 1);
        sendbuf2[0] = '0' + MPIR_Process.rank;
        tn_ret = MPIR_pmi_allgather(sendbuf2, 4, recvbuf2, PMI_DOMAIN_NODE_ROOTS)
        $print "test MPIR_pmi_allgather [%d]: %s", MPIR_Process.rank, recvbuf2

    MPIR_pmi_finalize()
