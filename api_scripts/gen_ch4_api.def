# filter: perl_to_python
macros:
    OUTDIR: .
    output: output

page: gen_ch4_api
    module: perl

    $(if:do_sync)
        $(set:mpich=.)
        $(set:netmod_inc=src/mpid/ch4/netmod/include)
        $(set:shmmod_inc=src/mpid/ch4/shm/include)
        $(set:netmod_dir=src/mpid/ch4/netmod)
    $(else)
        $(set:mpich=/home/hzhou/work/mpich-github)
        $(set:netmod_inc=$(output))
        $(set:shmmod_inc=$(output))
        $(set:netmod_dir=$(output))

    load_ch4_api("$(mpich)/src/mpid/ch4/ch4_api.txt")

    system "mkdir -p $(shmmod_inc)"
    dump_netmod_h("$(netmod_inc)/netmod.h")
    dump_shm_h("$(shmmod_inc)/shm.h")
    dump_netmod_impl_h("$(netmod_inc)/netmod_impl.h")

    $foreach $m in "ofi", "ucx", "stubnm"
        $(if:do_sync)
            dump_func_table_c("$(netmod_dir)/$m/func_table.c", $m)
        $(else)
            dump_func_table_c("$(netmod_dir)/${m}_func_table.c", $m)

    $foreach $m in "ofi", "ucx", "stubnm"
        $(if:do_sync)
            dump_noinline_h("$(netmod_dir)/$m/${m}_noinline.h", $m)
        $(else)
            dump_noinline_h("$(netmod_dir)/${m}_noinline.h", $m)


#---------------------------------------- 
fncode: dump_netmod_h($h_file)
    &call dump_h, $h_file
        $print "#include <mpidimpl.h>"
        $print
        $call dump_netmod_h_misc
        # ----
        &call each_netmod_api
            $call dump_typedef_t
        $print
        # ----
        $print "typedef struct MPIDI_NM_funcs {"
        &call each_netmod_api
            $if !$a->{native}
                $call dump_nm_funcs_t
        $print "} MPIDI_NM_funcs_t;"
        $print
        # ----
        $print "typedef struct MPIDI_NM_native_funcs {"
        &call each_netmod_api
            $if $a->{native}
                $call dump_nm_funcs_t
        $print "} MPIDI_NM_native_funcs_t;"
        $print
        $print "extern MPIDI_NM_funcs_t *MPIDI_NM_funcs[];"
        $print "extern MPIDI_NM_funcs_t *MPIDI_NM_func;"
        $print "extern MPIDI_NM_native_funcs_t *MPIDI_NM_native_funcs[];"
        $print "extern MPIDI_NM_native_funcs_t *MPIDI_NM_native_func;"
        $print "extern int MPIDI_num_netmods;"
        $print "extern char MPIDI_NM_strings[][MPIDI_MAX_NETMOD_STRING_LEN];"
        $print
        &call each_netmod_api
            $call dump_API

    # --------------------------
    subcode: dump_netmod_h_misc
        # also in mpidch4.h
        $print "#define MPIDI_MAX_NETMOD_STRING_LEN 64"
        $print
        # not really needed
        $print "typedef union {"
        $(for:a in ofi,ucx)
            $print "#ifdef HAVE_CH4_NETMOD_$(a:uc)"
            $print "    MPIDI_$(a:uc)_Global_t $(a);"
            $print "#endif"
        $print "} MPIDI_NM_Global_t;"
        $print

fncode: dump_shm_h($h_file)
    &call dump_h, $h_file
        $print "#include <mpidimpl.h>"
        $print
        &call each_shm_api
            $call dump_API

fncode: dump_netmod_impl_h($h_file)
    &call dump_h, $h_file
        $print "#ifndef NETMOD_INLINE"
        $print "#ifndef NETMOD_DISABLE_INLINES"
        # ----
        &call each_netmod_api
            $if !$a->{'$(nm)_inline'}
                next
            $call dump_api_impl
        # ----
        $print "#endif /* NETMOD_DISABLE_INLINES */"
        $print
        $print "#else"
        $(for:stubnm,ofi,ucx and 0,1,2)
            $print "#define __netmod_inline_$1__   $2"
        $print
        $(for:a,if in stubnm,ofi,ucx and if,elif,elif)
            $print "#$(if) NETMOD_INLINE==__netmod_inline_$(a)__"
            $print "#include \"../$(a)/netmod_inline.h\""
        $print "#else"
        $print "#error \"No direct netmod included\""
        $print "#endif"
        $print "#endif /* NETMOD_INLINE */"

fncode: dump_func_table_c($c_file, $mod)
    my $MOD=uc($mod)
    &call dump_c, $c_file
        $print "#include \"mpl.h\""
        $print
        $print "MPL_SUPPRESS_OSX_HAS_NO_SYMBOLS_WARNING;"
        $print
        $print "#ifndef NETMOD_INLINE"
        $print "#define NETMOD_DISABLE_INLINES"
        $print "#include <mpidimpl.h>"
        $print "#include \"netmod_inline.h\""
        $print "MPIDI_NM_funcs_t MPIDI_NM_${mod}_funcs = {"
        &call each_netmod_api
            $if !$a->{native}
                $call dump_func_table_entry
        $print "};"
        $print
        $print "MPIDI_NM_native_funcs_t MPIDI_NM_native_${mod}_funcs = {"
        &call each_netmod_api
            $if $a->{native}
                $call dump_func_table_entry
        $print "};"
        $print "#endif"

    subcode: dump_func_table_entry
        $if $a->{'nm_inline'}
            $print "    .$a->{func_name} = MPIDI_NM_$a->{name},"
        $else
            $print "    .$a->{func_name} = MPIDI_${MOD}_$a->{name},"

fncode: dump_noinline_h($h_file, $mod)
    my $MOD=uc($mod)
    &call dump_h, $h_file
        $print "#include \"${mod}_impl.h\""
        $print
        &call each_netmod_api
            $if !$a->{'$(nm)_inline'}
                my $s
                $call append_ret
                $s.="MPIDI_${MOD}_$a->{name}("
                my $tail = ");"
                dump_s_param_tail($Out, $s, $a->{'$(nm)_params'}, $tail)
        $print
        $print "#ifdef NETMOD_INLINE"
        &call each_netmod_api
            $if !$a->{'$(nm)_inline'}
                $print "#define MPIDI_NM_$a->{name} MPIDI_${MOD}_$a->{name}"
        $print "#endif /* NETMOD_INLINE */"

#---------------------------------------- 
subcode: open_Out(file)
    $(set:Out=$Out)
    &call open_W, $(file)
        dump_copyright($Out)
        BLOCK
        

subcode: dump_h(h_file)
    &call open_Out, $(h_file)
        my $INC = get_include_guard($(h_file))
        $print "#ifndef $INC"
        $print "#define $INC"
        $print
        BLOCK
        $print
        $print "#endif /* $INC */"

subcode: dump_c(c_file)
    &call open_Out, $(c_file)
        BLOCK

fncode: dump_copyright($out)
    $(set:print_to=$out)
    $print "/*"
    $print " * Copyright (C) by Argonne National Laboratory"
    $print " *     See COPYRIGHT in top-level directory"
    $print " */"
    $print

#---------------------------------------- 
fncode: parse_api($a)
    my $param
    $if $a->{param}
        $a->{param}=~s/\)\s*(MPL_STATIC_INLINE_SUFFIX)?;\s*$//
        $a->{param}=~s/\s+/ /g
        $param = $a->{param}
    $if $a->{shm_param}
        $a->{shm_param}=~s/\)\s*(MPL_STATIC_INLINE_SUFFIX)?;\s*$//
        $a->{shm_param}=~s/\s+/ /g

    $if $a->{param}
        $a->{params} = get_param_list($a->{param})
    $if $a->{shm_param}
        $a->{shm_params} = get_param_list($a->{shm_param})

fncode: get_param_list($param)
    my @tlist
    $foreach $t in split(/,\s*/, $param)
        $if $t=~/(.*?)\s*(\w+)(\[\])?$/ -> $type, $name, $array
            $if $array
                $type .= $array
            $global %name_types
            $if !$name_types{$name}
                $name_types{$name} = $type
            $elif $name_types{$name} eq $type
                NOOP
            $else
                $name = get_param_unique_name($name, $type)
            push @tlist, $name
        $elif $t eq "void"
            push @tlist, "void"
        $else
            die "Error parsing [$t] - $a->{param}\n"
    return \@tlist

fncode: get_param_unique_name($name, $type)
    my $i = 2
    $while $name_types{"$name-$i"} && $name_types{"$name-$i"} ne $type
        $i++
    $if !$name_types{"$name-$i"}
        $name_types{"$name-$i"} = $type
    return "$name-$i"

fncode: get_param_phrase($name, $is_arg)
    my $p = $name
    $p=~s/-\d+$//
    $if $is_arg
        $if $name eq "void"
            return ""
        $else
            return $p

    my $t = $name_types{$name}
    $if $t=~/(.*)\[\]/ -> $t*
        $p .= '[]'

    $if $name eq "void"
        return "void"
    $else
        return $t.get_space_after_type($t).$p

fncode: get_param_name($name)
    my $p = $name
    $p=~s/-\d+$//
    return $p

fncode: get_include_guard($h_file)
    $h_file=~s/.*\///
    $h_file=~s/\./_/g
    return uc($h_file)."_INCLUDED"

fncode: get_space_after_type($type)
    $if $type=~/\b(void|char|int|short|long|float|double) \*+$/ or $type=~/^struct .* \*+$/
        return ''
    $else
        return ' '

fncode: dump_s_param_tail($out, $s, $params, $tail, $is_arg=0)
    my $count = @$params
    my $n_lead = length($s)
    my $n = $n_lead
    my $space=""

    $(set:print_to=$out)
    $if $count == 1
        my $t = get_param_phrase($params->[0], $is_arg)
        $if $n+ length($t) + length($tail) <= 100
            $print "${s}$t${tail}"
        $elif $tail=~/(.*) MPL_STATIC_INLINE_SUFFIX;/
            $print "${s}$t)"
            $print "    MPL_STATIC_INLINE_SUFFIX;"
        $else
            $print "${s}$t${tail}"
        return

    $foreach $i, $p in @$params
        my $t = get_param_phrase($p, $is_arg)
        $if $i < $count - 1
            $t .= ","
        $else
            $t .= "$tail"

        $if $n + length($space) + length($t) <= 100
            $s.= "$space$t"
        $else
            $print $s
            $s = ' '  x $n_lead . $t
        $n=length($s)
        $space = ' '

    $if length($s) > 100 && $s=~/(.*) MPL_STATIC_INLINE_SUFFIX;/ -> $t
        $print $t
        $print "    MPL_STATIC_INLINE_SUFFIX;"
    $else
        $print "$s"

#---------------------------------------- 
fncode: load_ch4_api($ch4_api_txt)
    $global @apis, %name_types
    my ($cur_api, $flag)
    &call open_r, $ch4_api_txt
        $if /^(.*API|PARAM):/ -> $flag*
            NOOP
        $elif $flag =~ /API$/
            $if /^\s+(NM|SHM)(\*?)\s*:\s*(.+)/ -> $nm, $inline, $t
                my @tlist = split(/,\s*/, $t)
                $if $nm eq "NM"
                    $cur_api->{nm_params} = \@tlist
                    $cur_api->{nm_inline} = $inline
                $else
                    $cur_api->{shm_params} = \@tlist
                    $cur_api->{shm_inline} = $inline
            $elif /^\s+(\w+)\s*:\s*(.+)/ -> $name, $ret
                $cur_api = {name=>$name, ret=>$ret}
                push @apis, $cur_api
                my $func_name = $name
                $if $func_name=~/mpi_(init|finalize)_hook/ -> $init
                    $func_name = "mpi_$init"
                $cur_api->{func_name} = $func_name

                $if $flag=~/^Native API/
                    $cur_api->{native}=1
                $else
                    $cur_api->{native}=0
        $elif $flag eq "PARAM"
            $if /^\s+(\S+):\s*(.+)/ -> $k, $v
                $name_types{$k} = $v

#---------------------------------------- 
subcode: each_shm_api
    $(set:nm=shm)
    $(set:NM=SHM)
    &call each_api
        BLOCK

subcode: each_netmod_api
    $(set:nm=nm)
    $(set:NM=NM)
    &call each_api
        BLOCK

subcode: each_api
    $foreach $a in @apis
        # $print $a->{name}
        $if !exists $a->{'$(nm)_params'}
            next
        BLOCK

    # -------------------
    subcode: append_ret
        $s .= $a->{ret}
        $s .= get_space_after_type($a->{ret})

    # -------------------
    subcode: dump_API
        my $s
        $call append_ret
        $s .= "MPIDI_$(NM)_$a->{name}("
        my $tail = ");"
        $if $a->{'$(nm)_inline'}
            $s = "MPL_STATIC_INLINE_PREFIX $s"
            $tail = ") MPL_STATIC_INLINE_SUFFIX;"
        dump_s_param_tail($(Out), $s, $a->{'$(nm)_params'}, $tail)

    subcode: dump_typedef_t
        my $s = "typedef "
        $call append_ret
        $s .= "(*MPIDI_$(NM)_$a->{func_name}_t) ("
        my $tail = ");"
        dump_s_param_tail($(Out), $s, $a->{'$(nm)_params'}, $tail)

    subcode: dump_nm_funcs_t
        my $s="    "
        $s .= "MPIDI_$(NM)_$a->{func_name}_t $a->{func_name};"
        $print $s

    subcode: dump_api_impl
        my $s
        $if $a->{'$(nm)_inline'}
            $s .= "MPL_STATIC_INLINE_PREFIX "
        $call append_ret
        $s .= "MPIDI_$(NM)_$a->{name}("
        my $tail = ")"
        dump_s_param_tail($(Out), $s, $a->{'$(nm)_params'}, $tail)

        $print "{"
        my $use_ret
        $if $a->{ret} =~/int|size_t/ 
            $use_ret = 1
            $print "    $a->{ret} ret;"
            $print
        my $NAME=uc($a->{name})
        $print "    MPIR_FUNC_VERBOSE_STATE_DECL(MPID_STATE_MPIDI_NM_$NAME);"
        $print "    MPIR_FUNC_VERBOSE_ENTER(MPID_STATE_MPIDI_NM_$NAME);"
        $print
        my $s = "    "
        $if $use_ret
            $s .= "ret = "
        $if $a->{native}
            $s .= "MPIDI_$(NM)_native_func->$a->{name}("
        $else
            $s .= "MPIDI_$(NM)_func->$a->{name}("
        my $tail = ");"
        dump_s_param_tail($(Out), $s, $a->{'$(nm)_params'}, $tail, 1)
        $print

        $print "    MPIR_FUNC_VERBOSE_EXIT(MPID_STATE_MPIDI_NM_$NAME);"
        $if $use_ret
            $print "    return ret;"
        $print "}" 
        $print

