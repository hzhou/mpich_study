macros:
    standard_dir: /home/hzhou/work/mpi-standard
    orig_mpich_dir: /home/hzhou/work/pull_requests/branch-2010_mpi_gen
    mpich: /home/hzhou/work/mpich-github

subcode: load_api(@custom_list)
    $(if:do_sync)
        $(set:mpich=.)
        $(set:standard_api=maint/mpi_standard_api.txt)
    $(else)
        $(set:standard_api=output/mpi_standard_api.txt)
    load_mpi_api("$(standard_api)", "")
    $(if:do_sync)
        chdir "src/binding/c"
        my @api_files = glob("*_api.txt")
        $foreach $f in @api_files
            $if $f=~/^(\w+)_api.txt/ -> $dir
                load_mpi_api($f, $dir)
    $(else)
        $(for:f in $(custom_list))
            $(if:f~.*\.txt)
                load_mpi_api("$(f)", ".")
            $(else)
                load_mpi_api("$(mpich)/src/mpi/$(f)/mpi_$(f)_api.txt", ".")

subcode: _autoload
    $global %FUNCS, %MAPS, %default_descriptions, %handle_mpir_types
    $handle_mpir_types{COMMUNICATOR} = "MPIR_Comm"
    $handle_mpir_types{GROUP} = "MPIR_Group"
    $handle_mpir_types{DATATYPE} = "MPIR_Datatype"
    $handle_mpir_types{ERRHANDLER} = "MPIR_Errhandler"
    $handle_mpir_types{OPERATION} = "MPIR_Op"
    $handle_mpir_types{INFO} = "MPIR_Info"
    $handle_mpir_types{WINDOW} = "MPIR_Win"
    $handle_mpir_types{KEYVAL} = "MPII_Keyval"
    $handle_mpir_types{REQUEST} = "MPIR_Request"
    $handle_mpir_types{MESSAGE} = "MPIR_Request"
    $handle_mpir_types{SESSION} = "MPIR_Session"
    $handle_mpir_types{GREQ_CLASS} = "MPIR_Grequest_class"
    NEWLINE

#---------------------------------------- 
fncode: load_mpi_api($api_txt, $dir)
    my $see_also_idx=0
    my ($cur_func, $cur_map, $cur_name)
    my $stage = ''
    &call open_r, $api_txt
        $: \x23 -- stage header --
        $if /^(MPI\w+):\s*(.*)/ -> $name, $attr
            $stage = "FUNC"
            $cur_name = $name
            $if exists $FUNCS{$name}
                $cur_func = $FUNCS{$name}
                $if $attr
                    $cur_func->{attrs} = $attr
            $else
                $cur_func = {name=>$name, params=>[], attrs=>$attr, desc=>""}
                $FUNCS{$name} = $cur_func
            $if $dir
                $cur_func->{dir} = $dir
        $elif /^(\w+_KIND_MAP):/ -> $name
            $stage = "MAP"
            $cur_name = $name
            $cur_map = {_name=>$name}
            $MAPS{$name} = $cur_map
        $elif /^Default Descriptions/
            $stage = "default_descriptions"
            $cur_name = "Default Descriptions"
        $: \x23 -- per-stage parsing --
        $elif $stage eq "FUNC"
            $if /^\s+\.(\w+):\s*(.*)/ -> $key, $val
                $cur_func->{$key} = $val
            $elif /^\s+(\w+):\s*(\w+)(.*)/ -> $name, $kind, $t
                my $p={name=>$name, kind=>$kind}
                $if $t=~/^(.*),\s*\[(.*)\]\s*$/ -> $t*, $p->{desc}*
                    # NOOP
                $p->{t} = $t
                push @{$cur_func->{params}}, $p
            $elif /^{/
                $stage = "FUNC-body"
                $if !exists $cur_func->{body}
                    $cur_func->{body} = []
            $elif /^\/\*/
                $stage = "FUNC-notes"
                $if !exists $cur_func->{notes}
                    $cur_func->{notes} = []
        $elif $stage eq "MAP"
            $if /^\s+\.base:\s*(\w+)/ -> $name
                %$cur_map = %{$MAPS{$name}}
                $cur_map->{_name} = $cur_name
                $MAPS{$cur_name} = $cur_map
            $elif /^\s+(\w+):\s*(.*)/ -> $name, $param_type
                $cur_map->{$name} = $param_type
        $elif $stage eq "default_descriptions"
            $if /^\s*(\w+):\s*(.*)/ -> $key, $val
                $default_descriptions{$key} = $val
        $elif $stage eq "FUNC-body"
            $if /^}/
                $stage = "FUNC"
            $else
                push @{$cur_func->{body}}, $_
        $elif $stage eq "FUNC-notes"
            $if /^\*\//
                $stage = "FUNC"
            $else
                s/^    //
                push @{$cur_func->{notes}}, $_

#---------------------------------------- 
fncode: get_C_params($func, $mapping)
    my @param_list
    $foreach $p in @{$func->{params}}
        $if $p->{t} !~/suppress=c_parameter/
            push @param_list, get_C_param($p, $mapping)
    $if !@param_list
        return ["void"]
    $else
        return \@param_list

fncode: get_C_param($param, $mapping)
    my $kind = $param->{kind}
    $if $kind eq "VARARGS"
        return "..."

    my ($want_star, $want_bracket)
    $call get_param_type
    $if !$want_star
        $call check_want_star

    my $s
    $if $param->{t}=~/constant=True/
        $s.="const "
    $s.=$param_type

    $if $want_star
        $s.=" " . "*" x $want_star
        $(if:style!=succinct)
            $if $s!~/\b(void|int|char|size_t)\b/
                $s.=" "
    $else
        $s.=" "
    $s.=$param->{name}

    $if $want_bracket
        $s.="[]"
    $if $param->{t}=~/length=\[.*?, (\d+)\]/ -> $n
        $s.="[$n]"

    return $s

    # -----------------------------
    subcode: get_param_type
        my $param_type = $mapping->{$kind}

        $if $param->{t}=~/func_type=(\w+)/ -> $func_type
            $param_type = $func_type

        $if !$param_type
            $die Type mapping [$mapping] $kind not found!

    subcode: check_want_star
        my $t = $param->{t}
        $if is_pointer_type($kind, $t)
            $if $kind eq "STRING_ARRAY"
                $want_star = 1
                $want_bracket = 1
            $elif $kind eq "STRING_2DARRAY"
                $want_star = 2
                $want_bracket = 1
            $elif $kind eq "ARGUMENT_LIST"
                $want_star = 3
            $elif $t=~/pointer=False/i
                $want_bracket = 1
            $elif $t=~/length=/ && $kind ne "STRING"
                $want_bracket = 1
            $else
                $want_star = 1

fncode: is_pointer_type($kind, $t)
    $if $kind=~/^(STRING\w*)$/
        return 1
    $elif $kind=~/^(ATTRIBUTE_VAL\w*|(C_)?BUFFER\d?|STATUS|EXTRA_STATE\d*|TOOL_MPI_OBJ|FUNCTION\w*)$/
        return 1
    $elif $t=~/direction=(in)?out/i
        return 1
    $elif $t=~/length=/
        return 1
    $elif $t=~/pointer=True/
        return 1
    $else
        return 0

#---- dump utils ------------------------------------ 
subcode: copy_right
    $print "/*"
    $print " * Copyright (C) by Argonne National Laboratory"
    $print " *     See COPYRIGHT in top-level directory"
    $print " */"
    $print

subcode: begin_error_checking
    $print
    $print "#ifdef HAVE_ERROR_CHECKING"
    $print "{"
    $print "    MPID_BEGIN_ERROR_CHECKS;"
    $print "    {"
    $print INDENT
    $print INDENT
    BLOCK
    $print DEDENT
    $print DEDENT
    $print "    }"
    $print "    MPID_END_ERROR_CHECKS;"
    $print "}"
    $print "#endif \x2f* HAVE_ERROR_CHECKING */"
    $print
