# include: macros/common.def

filter: perl_to_python

macros:
    standard_dir: /home/hzhou/work/mpi-standard

subcode: _autoload
    $global  $standard_dir = "$(standard_dir)"
    $global  $output_dir = "output"
    $(block:frame_init)
        $: \x23 Run this script to scrape API from MPI standard repositories.
        $: \x23 Modify $standard_dir and $output_dir to customize locations.
        $: \x23 The output, mpi_standard_api.txt, will be used to generate bindings.
        NEWLINE

page: parse_standard
    module: perl

    &call cd_standard
        $call load_standard_api
    dump_api("output/mpi_standard_api.txt")

    subcode: cd_standard
        $use Cwd
        my $pwd = getcwd()
        chdir $standard_dir or die "Can't chdir $standard_dir\n"
        BLOCK
        chdir $pwd or die "Can't get back to current directory\n"

fncode: dump_api($api_txt)
    &call open_W, $api_txt
        $print "APIs"
        $print ================
        $foreach $f in sort keys %FUNCS
            my $fn = $FUNCS{$f}
            $print $fn->{name}:
            $if $fn->{return_type}
                $print "    .return: $fn->{return_type}"
            $foreach $p in @{$fn->{params}}
                my $name = $p->{name}
                my $kind = $p->{kind}
                my $s = "    $name: $kind"
                $if $p->{t}
                    $s.=", $p->{t}"
                $if $p->{desc}
                    $s.=", [$p->{desc}]"
                $else
                    # warn "Missing description for $fn->{name} param $name!\n"
                $print $s

        $print "\nType Mappings"
        $print ================
        $foreach $map in @MAPS
            my $mapping = $MAPS{$map}
            $print $map:
            $foreach $k in sort keys %$mapping
                $print "    $k: $mapping->{$k}"

        $print "\nDefault Descriptions"
        $print ================
        $foreach $k in sort keys %default_descriptions
            $call unescape_latex, $default_descriptions{$k}
            $print $k: $default_descriptions{$k}

#---- Loading from mpi-standard ----
subcode: load_standard_api
    load_standard_funcs()
    load_standard_types()
    load_default_descriptions()

fncode: load_standard_funcs
    my @all_latexes = glob("*/*.tex")
    $global %FUNCS
    $foreach $a in @all_latexes
        my $func
        my $i_line=0
        my $l
        &call open_r, $a
            $i_line++
            $call parse_latex

    subcode: parse_latex
        $if /\\begin\{mpi-binding\}/
            $func={name=>undef, params=>[]}
            undef $l
        $elif /\\end\{mpi-binding\}/
            $if $func->{name}
                $FUNCS{$func->{name}} = $func
            $elif !$func->{name} && !$func->{render}
                $warn "Missing name in $a:$i_line\n"
            undef $func
        $elif $func
            chomp
            $if /^\s*#/
                next
            $if $l
                # $print [$l]
                s/^\s+//
                $l .= " $_"
            $else
                $l = $_

            $if $l=~/^\s*(\w+)\(\s*(.*)\)\s*$/ -> $cmd, $args
                $call parse_binding_python
                undef $l

        subcode: parse_binding_python
            $if $cmd eq "function_name"
                $if $args=~/"(\w+)",\s*"(\w+)"/
                    $func->{name} = $1
                    $func->{fortran_name}=$2
                $else
                    $func->{name} = strip_quotes($args)
            $elif $cmd=~/^(return_type|parameters_c_only)/
                $func->{$1} = strip_quotes($args)
            $elif $cmd eq "parameters_c_only"
                push @{$func->{params}}, "C-only: ".strip_quotes($args)
            $elif $cmd eq "parameter"
                my $t = $args
                my $p = {}
                $t=~s/\s+$//
                $t=~s/,$//
                $if $t=~/(.*),\s*desc\s*=\s*(.*?)(,\s*\w+=.*)?$/
                    $t = "$1$3"
                    my $desc = $2
                    $call unescape_latex, $desc
                    $call unquote_python, $desc
                    $p->{desc} = $desc
                $t=~s/['"]//g
                $t=~s/lis:\w+,\s*param://
                my @tlist = split /,\s*/, $t
                $p->{name} = shift @tlist
                $p->{kind} = shift @tlist
                $p->{t} = join(", ", @tlist)
                push @{$func->{params}}, $p
            $elif $cmd=~/^(callback|no_ierror|no_.*_binding|with_uppercase_index|f90_use_colons|not_with_mpif)$/
                $func->{$1}=1
            $elif $cmd=~/^(render|no_render|predefined_function|f90_overload|not_abstract_interface)$/
                $func->{$1}=$args
            $else
                $print unparsed: [$l]

fncode: load_standard_types
    $global %MAPS, @MAPS
    my $mapping
    &call open_r, binding-tool/bindingtypes.py
        s/#.*$//g
        $if /^(\w+_KIND_MAP)\s*=\s*\{/
            $mapping = {}
            $MAPS{$1} = $mapping
            push @MAPS, $1
        $elif /^(\w+_KIND_MAP)\s*=\s*copy.deepcopy\((\w+)\)/
            $mapping = {".base" => $2}
            $MAPS{$1} = $mapping
            push @MAPS, $1
        $if /^(\w+_KIND_MAP)\.update\(\{\s*$/
            $mapping = $MAPS{$1}
        $elif /^\}/
            undef $mapping
        $elif $mapping && /^\s*'(\w+)'\s*:\s*(.*)/ -> $key, $val
            $if $val=~/['"](.*)['"]/
                $val = $1
            $elif $val=~/^(\w+)/
                $val = $1
            $mapping->{$key} = $val

fncode: load_default_descriptions
    $global %default_descriptions
    &call open_r, binding-tool/bindinglis.py
        $if /DEFAULT_DESCRIPTIONS.update\(\{/
            $while <In>
                $if /^\s*\}\)/
                    last
                $elif /^\s+'(\w+)':\s*'(.*)',/
                    $default_descriptions{$1} = $2

#---------------------------------------- 
fncode: strip_quotes($t)
    $if $t=~/^['"](.*)['"]/
        return $1
    return $t

subcode: unescape_latex(t)
    $(t)=~s/\\+(consti?|constskip|mpiarg|mpicode|mpifunc)\{(.*?)\}/'$2'/g
    $(t)=~s/\\+(mbox|emph)\{(.*)?\}/$2/g
    $(t)=~s/\\+(MPI)\/?/$1/gi

subcode: unquote_python(t)
    $if $(t)=~/^\s*\((.*)\)\s*$/
        $(t) = $1
    $(t)=~s/['"]//g
    $(t)=~s/^\s+//
    $(t)=~s/\s+$//
    $(t)=~s/\s\s+/ /g

