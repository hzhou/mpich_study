include: macros/common.def
include: macros/validation.def
include: macros/errorcode.def
include: macros/manpage.def
include: macros/profile.def
include: macros/earlyreturn.def

# filter: perl_to_python

subcode: _autoload
    $global $out=[], %FUNCS, %MAPS, %default_descriptions, %handle_mpir_types, %err_codes
    $global @mpi_sources

macros:
    print_to: @$out


page: gen_binding_c
    module: perl

    $call load_api, output/api_test.txt, output/pt2pt_api.txt

    $foreach %FUNCS
        $if exists $v->{dir}
            dump_mpi_c($v)

    &call open_W, "Makefile.mk"
        $print "##"
        $print "## Copyright (C) by Argonne National Laboratory"
        $print "##     See COPYRIGHT in top-level directory"
        $print "##"
        $print
        $print mpi_sources += \\
        my $n = @mpi_sources
        $foreach $i, $f in @mpi_sources
            $if $i < $n - 1
                $print "    $f \\"
            $else
                $print "    $f"

fncode: dump_mpi_c($func)
    process_func_parameters($func)
    &call push_to_out
        dump_copy_right()
        $print "#include \"mpiimpl.h\""
        $print
        dump_profiling($func, "SMALL_C_KIND_MAP")
        $print
        dump_manpage($func)
        dump_function($func, "SMALL_C_KIND_MAP")
    $(set:print_to=)

    $call set_file
    &call open_W, $file_path
        $call dump_out

    subcode: push_to_out
        $global $out:=[], $err_codes:={}
        BLOCK

    subcode: dump_out
        my ($indent, $prev_empty) = (0, 0)
        $foreach $l in @$out
            # -----
            $if $l=~/^\[ERR CODES\]/
                print Out ".N Errors\n"
                print Out ".N MPI_SUCCESS\n"
                $foreach $err in sort keys %$err_codes
                    print Out ".N $err\n"
            $elif $l=~/^(INDENT|DEDENT)/ -> $a
                $if $a eq "INDENT"
                    $indent+=1
                $else
                    $indent-=1
            $elif $l=~/^fn_\w+:/
                chomp $l
                print Out "  $l\n"
            $elif $l=~/^\s*$/
                $if !$prev_empty
                    print Out "\n"
                    $prev_empty = 1
            $else
                $if $indent>0 && $l!~/^#(if|endif)/
                    print Out "    " x $indent
                chomp $l
                print Out "$l\n"
                $prev_empty = 0

    # ---------------------
    subcode: set_file
        my $file_path
        $if !-d $func->{dir}
            mkdir $func->{dir}
        $if $func->{name} =~ /^MPIX?_(\w+)/i -> $name
            $file_path = $func->{dir} . '/'. lc($name) . ".c"
        $else
            $die "Error in function name pattern: $func->{name}\n"
        $global @mpi_sources
        push @mpi_sources, "src/binding/c/$file_path"

fncode: func_check_params($func)
    $foreach $p in @{$func->{params}}
        my $name = $p->{name}
        $if $name eq "comm"
            $func->{_has_comm} = 1
        $elif $name eq "status"
            $func->{_has_status} = 1

fncode: dump_copy_right
    $call copy_right

fncode: dump_function($func, $map_name)
    $call get_mapping_func_name
    declare_function($func, $mapping, "")
    $print "{"
    $print INDENT
    $call function_body
    $print DEDENT
    $print "}"

    subcode: function_body
        $func->{exit_routines} = []
        $print "int mpi_errno = MPI_SUCCESS;"
        $if exists $func->{handle_ptr_list}
            $foreach $p in @{$func->{handle_ptr_list}}
                dump_handle_ptr_var($func, $p)

        my $state_name = "MPID_STATE_".uc($func_name)
        $call func_log_decl

        $print
        $print "MPIR_ERRTEST_INITIALIZED_ORDIE();"
        $print
        $call cs_enter
        $call func_log_enter
        $if exists $func->{handle_ptr_list}
            &call begin_error_checking
                $foreach $p in @{$func->{handle_ptr_list}}
                    dump_validate_handle($func, $p)
            $foreach $p in @{$func->{handle_ptr_list}}
                dump_convert_handle($func, $p)
        $if $func->{need_validation}
            &call begin_error_checking
                $if exists $func->{handle_ptr_list}
                    $foreach $p in @{$func->{handle_ptr_list}}
                        dump_validate_handle_ptr($func, $p)
                $if exists $func->{validation_list}
                    $foreach $t in @{$func->{validation_list}}
                        dump_validation($func, $t)

        check_early_returns($func)
        $print
        $call dump_body_of_routine
        $print
        $print "fn_exit:"
        $foreach $l in @{$func->{exit_routines}}
            $print $l
        $call func_log_exit
        $call cs_exit
        $print "return mpi_errno;"
        $print
        $print "fn_fail:"
        dump_mpi_fn_fail($func, $mapping)
        $print "goto fn_exit;"

# no-line-wrap version
fncode: declare_function($func, $mapping, $tail)
    my $name = $func->{name}
    $if $mapping->{_name}=~/BIG/
        $name .= "_l"

    my $ret = "int"
    $if exists $func->{return}
        $ret = $mapping->{$func->{return}}

    my $params = get_C_params($func, $mapping)
    my $s_param = join(', ', @$params)
    my $s = "$ret $name($s_param)"
    $if $tail
        $s.=$tail

    $print $s

fncode: call_impl($func, $prefix)
    my $impl = $prefix . "_" . $func->{name} . "_impl"
    my $s = "mpi_errno = $impl("
    $foreach $p in @{$func->{params}}
        my $name = $p->{name}
        $if $p->{kind} =~ /^(COMMUNICATOR|DATATYPE|

fncode: dump_error_check($sp)
    $print "${sp}if (mpi_errno) {"
    $print "${sp}    goto fn_fail;"
    $print "${sp}}"

#---------------------------------------- 
subcode: get_mapping_func_name
    my $mapping = $MAPS{$map_name}
    my $func_name = $func->{name}
    $if $map_name=~/BIG/
        $func_name.="_l"

subcode: if_defined(name)
    $print "#if defined($(name))"
    BLOCK

subcode: elif_defined(name)
    $print "#elif defined($(name))"
    BLOCK

subcode: cs_enter
    $print "MPID_THREAD_CS_ENTER(GLOBAL, MPIR_THREAD_GLOBAL_ALLFUNC_MUTEX);"
subcode: cs_exit
    $print "MPID_THREAD_CS_EXIT(GLOBAL, MPIR_THREAD_GLOBAL_ALLFUNC_MUTEX);"

subcode: dump_body_of_routine
    $print "/* ... body of routine ... */"
    $if exists $func->{body}
        $foreach $l in @{$func->{body}}
            $print $l-
    $else
        my $impl = $func_name . "_impl"
        $impl=~s/^MPIX?_/MPIR_/
        # $warn $func->{name}: $func->{impl_arg_list}
        my $args = join(", ", @{$func->{impl_arg_list}})
        $print "mpi_errno = ${impl}($args);"
        dump_error_check("")

    $print "/* ... end of body of routine ... */"

#---- style issues ------------------------------------ 
macros:
    style: succinct

subcode: func_log_decl
    $(if:1)
        $print "MPIR_FUNC_TERSE_STATE_DECL($state_name);"
    $(else)
        $if $state_name=~/MPI_.*(SEND|RECV|PROBE)/
            $print "MPIR_FUNC_TERSE_STATE_DECL($state_name);"
        $else
            $print "MPIR_FUNC_TERSE_STATE_DECL($state_name);"
subcode: func_log_enter
    $(if:1)
        $print "MPIR_FUNC_TERSE_ENTER($state_name);"
    $(else)
        $if $state_name=~/MPI_.*SENDRECV/
            $print "MPIR_FUNC_TERSE_PT2PT_ENTER_BOTH($state_name);"
        $elif $state_name=~/MPI_.*SEND$/
            $print "MPIR_FUNC_TERSE_PT2PT_ENTER_FRONT($state_name);"
        $elif $state_name=~/MPI_.*RECV$/
            $print "MPIR_FUNC_TERSE_PT2PT_ENTER_BACK($state_name);"
        $elif $state_name=~/MPI_.*(_INIT|PROBE)$/
            $print "MPIR_FUNC_TERSE_PT2PT_ENTER($state_name);"
        $else
            $print "MPIR_FUNC_TERSE_ENTER($state_name);"
subcode: func_log_exit
    $(if:1)
        $print "MPIR_FUNC_TERSE_EXIT($state_name);"
    $(else)
        $if $state_name=~/MPI_.*SENDRECV/
            $print "MPIR_FUNC_TERSE_PT2PT_EXIT_BOTH($state_name);"
        $elif $state_name=~/MPI_.*SEND$/
            $print "MPIR_FUNC_TERSE_PT2PT_EXIT_FRONT($state_name);"
        $elif $state_name=~/MPI_.*RECV$/
            $print "MPIR_FUNC_TERSE_PT2PT_EXIT_BACK($state_name);"
        $elif $state_name=~/MPI_.*(_INIT|PROBE)$/
            $print "MPIR_FUNC_TERSE_PT2PT_EXIT($state_name);"
        $else
            $print "MPIR_FUNC_TERSE_EXIT($state_name);"

subcode: dump_Err_create_code
    $(if:style=succinct)
        $print $s
    $(else)
        $print "    {"
        my $sp = ' ' x 8
        $if $s=~/mpi_errno = (\w+)\((.*)/ -> $a, $t
            $print "${sp}mpi_errno ="
            $print "${sp}    $a\(-"
            my $n_lead = 12 + length($a) + 1
            my $sp = ' ' x $n_lead
            my @tlist = split /, /, $t
            my $a = shift @tlist # first one
            $print "$a,-"
            my $n = $n_lead + length($a)
            my $a = pop @tlist # last one
            $foreach $t in @tlist
                $if $n + length($t) +2 <= 100
                    $print " $t,-"
                    $n += length($t)+2
                $else
                    $print
                    $print "$sp$t,-"
                    $n = $n_lead + length($t) + 1
            $if $n + length($a) + 1 <= 100
                $print " $a"
            $else
                $print
                $print "$sp$a"
        $print "    }"
